%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: 1
%%CreationDate: 11/25/2019
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2019-11-25T10:50:35+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2019-11-25T10:50:35+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2019-11-25T10:50:35+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8AgVjpslyebfDCOrdz8stjC2E50mX6GsvBvvy3ww1eIW/0RY/yH/gjj4YXxC2N&#xA;JsB/uuv+yb+uHwwviFsaXYD/AHV+Lf1x8MI8Qrk0+zRw6xDkpqOp/jjwBeMq9xpWn0WeKFRFJ23+&#xA;Fh1X+ntjwBeMqP1Gz/3yn3YeEI4iqQ29pE4b0I2HRlKggg9RjwheIqk+n2kZV44kMTisbcVr7g7d&#xA;R3x4QvEVP6vb/wC+k/4EYaC8Rb9GH+RfuGNBFlsIg6KPuxpbbAA6CmKt4VdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdiqE0sUsIvpP8AwxyEOTLJzbluXVioAFO+SYqXrzVryOKrhdTDuD8x&#xA;iqKhcvGGOxPhiq/CqvazIhaOWpt5dpAOo8GHuv8AZgVZcW7wSlGodgVYdGU9GHscVU8KqkV1DEpi&#xA;uK+hIeoFSjdnH8R3GBUJcyzQSmNlAI3DVqGB6MD4HG1WC8PdfuOKq8UgkXkBTemKr8KtqpYgAVJx&#xA;Qq/VJfbGltL9divotNke2lWGUFaSE7AV37HMfVZDCBIcvRYhkyCJQseuWYjQPIC4ADEMu5pv3zEH&#xA;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&#xA;lrIAmvFiP4/xzIx8nHyDdHZYwf/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:4eb98dcb-a5ab-d149-8726-500544526fef</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:4eb98dcb-a5ab-d149-8726-500544526fef</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:f6d56d0b-d8e1-3a41-83d4-0605604c367d</stRef:instanceID>
            <stRef:documentID>xmp.did:f6d56d0b-d8e1-3a41-83d4-0605604c367d</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:61272d06-f7ac-084f-8850-3967b5d78093</stEvt:instanceID>
                  <stEvt:when>2019-11-25T10:44:47+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4eb98dcb-a5ab-d149-8726-500544526fef</stEvt:instanceID>
                  <stEvt:when>2019-11-25T10:50:35+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.360784 .427451 .498039 rgb
f
55.5842 198.391 mo
36.8627 198.391 li
32.6218 193.796 li
31.0668 171.45 li
34.3181 167.067 li
41.5277 165.371 li
35.025 164.318 li
30.3599 150.914 li
31.7736 141.156 li
38.7004 138.565 li
49.02 137.265 li
38.4176 137.265 li
31.915 132.434 li
29.5118 117.508 li
36.2972 107.695 li
42.5481 106.847 li
36.4386 106.847 li
33.1872 102.335 li
31.7736 89.8832 li
35.3076 82.9564 li
38.559 80.8097 li
42.5481 82.1082 li
38.559 79.7744 li
39.4072 68.9614 li
47.889 61.3278 li
58.774 61.3278 li
63.8631 66.1841 li
64.6555 68.82 li
64.6555 65.0033 li
66.8317 58.6419 li
79.0228 56.6749 li
90.298 57.7192 li
93.408 63.0242 li
94.1148 68.2047 li
94.1148 63.1656 li
97.7903 57.7192 li
113.331 54.6586 li
123.673 58.6912 li
126.063 67.2651 li
125.497 72.4615 li
127.052 68.2047 li
126.063 62.176 li
142.234 57.7192 li
158.765 64.8619 li
163.913 72.9902 li
161.027 77.975 li
164.985 74.5563 li
170.498 77.8202 li
172.995 97.2812 li
171.441 111.088 li
163.665 111.911 li
168.896 111.911 li
173.844 123.528 li
176.105 139.21 li
174.126 155.16 li
164.655 157.355 li
170.31 157.355 li
176.388 164.318 li
178.085 183.042 li
174.833 198.391 li
55.5842 198.391 li
.909804 .843137 .811765 rgb
f
55.5836 198.379 mo
53.5347 159.145 li
55.5842 111.911 li
53.5349 88.0427 li
56.2633 78.1424 li
72.769 74.5563 li
116.167 77.5458 li
144.933 77.5458 li
153.487 82.8802 li
151.791 101.619 li
151.791 101.619 li
154.901 152.854 li
152.076 198.357 li
150.132 198.358 li
150.626 159.864 li
152.568 155.16 li
151.862 137.947 li
150.132 135.119 li
150.626 84.6527 li
145.783 83.3177 li
74.3797 79.7744 li
57.5371 81.5427 li
55.452 89.035 li
56.4945 135.261 li
55.452 137.265 li
55.452 160.777 li
56.4945 164.318 li
57.5367 198.378 li
55.5836 198.379 li
.662745 .6 .580392 rgb
f
57.5367 198.378 mo
56.4945 164.318 li
55.452 160.777 li
55.452 137.265 li
56.4945 135.261 li
55.452 89.035 li
57.5371 81.5427 li
74.3797 79.7744 li
145.783 83.3177 li
150.626 84.6527 li
150.132 135.119 li
151.862 137.947 li
152.568 155.16 li
150.626 159.864 li
150.132 198.358 li
148.681 198.358 li
148.681 182.259 li
148.681 181.436 li
148.681 175.824 li
148.681 174.478 li
148.681 167.899 li
148.681 122.78 li
148.681 121.957 li
148.681 116.345 li
148.681 114.999 li
148.681 85.8257 li
137.372 85.8257 li
126.063 85.8257 li
114.754 85.8257 li
103.445 85.8257 li
103.445 198.368 li
103.445 182.259 li
103.445 180.912 li
103.445 175.301 li
103.445 174.478 li
103.445 122.78 li
103.445 121.433 li
103.445 115.822 li
103.445 114.999 li
103.445 85.8257 li
92.1357 85.8257 li
80.8267 85.8257 li
80.8267 114.999 li
80.8267 85.8257 li
69.5176 85.8257 li
58.2085 85.8257 li
58.2085 198.378 li
57.5367 198.378 li
.529412 .462745 .447059 rgb
f
69.5176 198.391 mo
58.2085 198.391 li
58.2085 85.8257 li
69.5176 85.8257 li
69.5176 198.391 li
.839216 .411765 .235294 rgb
f
80.8267 198.391 mo
69.5176 198.391 li
69.5176 85.8257 li
80.8267 85.8257 li
80.8267 198.391 li
.890196 .462745 .286275 rgb
f
92.1357 198.391 mo
80.8267 198.391 li
80.8267 85.8257 li
92.1357 85.8257 li
92.1357 198.391 li
.960784 .521569 .341176 rgb
f
103.445 198.391 mo
92.1357 198.391 li
92.1357 85.8257 li
103.445 85.8257 li
103.445 198.391 li
.839216 .411765 .235294 rgb
f
58.2085 198.378 mo
58.2085 119.899 li
58.2085 119.899 li
58.2085 122.78 li
58.2495 122.78 li
58.3732 131.185 58.751 156.214 59.0272 174.478 cv
58.2085 174.478 li
58.2085 182.259 li
59.1449 182.259 li
59.2608 189.914 59.3394 195.105 59.3394 195.105 cv
60.7531 196.542 li
67.1144 196.175 li
68.5987 194.28 li
69.3394 182.259 li
69.5176 182.259 li
69.5176 198.376 li
58.2085 198.378 li
.662745 .27451 .141176 rgb
f
69.5176 198.376 mo
69.5176 182.259 li
70.3563 182.259 li
70.5778 190.322 li
71.426 191.523 li
77.8581 192.16 li
79.625 191.311 li
79.625 191.311 80.5824 183.653 80.7881 182.259 cv
80.8267 182.259 li
80.8267 198.373 li
69.5176 198.376 li
.701961 .305882 .172549 rgb
f
80.8267 198.373 mo
80.8267 182.259 li
80.8267 184.136 80.8267 197.808 80.8267 198.373 cv
80.8267 198.373 li
.756863 .345098 .203922 rgb
f
70.1425 174.478 mo
69.5176 174.478 li
69.5176 151.73 li
70.1425 174.478 li
.701961 .305882 .172549 rgb
f
80.8267 133.535 mo
80.8267 122.78 li
81.2277 122.78 li
80.8267 133.535 li
.854902 .419608 .258824 rgb
f
81.5179 114.999 mo
80.8267 114.999 li
80.8267 85.8257 li
92.1357 85.8257 li
92.1357 86.6318 li
87.188 86.6318 li
82.523 88.0427 li
81.5179 114.999 li
f
86.0297 198.372 mo
91.4289 197.461 li
91.6146 182.259 li
92.1357 182.259 li
92.1357 198.371 li
86.0297 198.372 li
f
92.1357 198.371 mo
92.1357 182.259 li
93.0034 182.259 li
93.2666 195.199 li
94.8217 196.175 li
101.042 196.175 li
102.172 194.633 li
102.374 182.259 li
103.445 182.259 li
103.445 198.368 li
92.1357 198.371 li
.74902 .329412 .180392 rgb
f
103.445 174.478 mo
102.5 174.478 li
103.34 122.78 li
103.445 122.78 li
103.445 174.478 li
f
92.1357 174.478 mo
91.7096 174.478 li
91.8668 161.611 li
91.9562 161.614 92.0457 161.616 92.1357 161.616 cv
92.1357 174.478 li
92.1357 159.864 mo
92.0528 159.864 91.9703 159.863 91.8882 159.86 cv
92.0531 146.358 li
92.0806 146.358 92.1081 146.358 92.1357 146.358 cv
92.1357 159.864 li
92.0745 144.607 mo
92.1357 139.6 li
92.1357 144.607 li
92.1153 144.607 92.0948 144.607 92.0745 144.607 cv
.854902 .419608 .258824 rgb
f
92.8451 174.478 mo
92.1357 174.478 li
92.1357 161.616 li
92.1357 161.616 li
92.2859 161.616 92.4349 161.612 92.5833 161.604 cv
92.8451 174.478 li
92.1357 159.864 mo
92.1357 159.864 li
92.1357 146.358 li
92.1357 146.358 li
92.1817 146.358 92.2274 146.358 92.2732 146.359 cv
92.5476 159.852 li
92.4113 159.86 92.2741 159.864 92.1357 159.864 cv
92.2375 144.607 mo
92.2035 144.607 92.1698 144.607 92.1357 144.607 cv
92.1357 144.607 li
92.1357 139.6 li
92.2375 144.607 li
.74902 .329412 .180392 rgb
f
58.2085 104.868 mo
58.2085 85.8257 li
69.5176 85.8257 li
69.5176 86.1401 li
60.0462 87.0559 li
59.198 88.0427 li
58.2085 104.868 li
.662745 .27451 .141176 rgb
f
69.5176 86.1401 mo
69.5176 85.8257 li
72.769 85.8257 li
69.5176 86.1401 li
.701961 .305882 .172549 rgb
f
103.445 122.78 mo
58.2085 122.78 li
58.2085 114.999 li
103.445 114.999 li
103.445 122.78 li
.152941 .294118 .341176 rgb
f
103.445 115.822 mo
58.2085 116.345 li
58.2085 114.999 li
103.445 114.999 li
103.445 115.822 li
.298039 .478431 .541176 rgb
f
58.2085 121.957 mo
103.445 121.433 li
103.445 122.78 li
58.2085 122.78 li
58.2085 121.957 li
.121569 .231373 .270588 rgb
f
65.7695 118.889 mo
65.7695 119.942 64.916 120.796 63.8631 120.796 cv
62.8101 120.796 61.9566 119.942 61.9566 118.889 cv
61.9566 117.836 62.8101 116.983 63.8631 116.983 cv
64.916 116.983 65.7695 117.836 65.7695 118.889 cv
cp
.231373 .372549 .419608 rgb
f
64.4361 117.565 mo
64.1635 117.565 63.5246 117.436 63.2945 117.565 cv
63.0047 117.728 62.9876 118.401 63.2945 118.559 cv
63.4399 118.635 64.2908 118.634 64.4361 118.559 cv
64.6547 118.447 64.7942 117.565 64.4361 117.565 cv
cp
.298039 .478431 .541176 rgb
f
77.0786 118.889 mo
77.0786 119.942 76.225 120.796 75.1721 120.796 cv
74.1192 120.796 73.2656 119.942 73.2656 118.889 cv
73.2656 117.836 74.1192 116.983 75.1721 116.983 cv
76.225 116.983 77.0786 117.836 77.0786 118.889 cv
cp
.231373 .372549 .419608 rgb
f
75.7451 117.565 mo
75.4726 117.565 74.8336 117.436 74.6036 117.565 cv
74.3137 117.728 74.2966 118.401 74.6036 118.559 cv
74.7489 118.635 75.5999 118.634 75.7451 118.559 cv
75.9638 118.447 76.1033 117.565 75.7451 117.565 cv
cp
.298039 .478431 .541176 rgb
f
88.3877 118.889 mo
88.3877 119.942 87.5341 120.796 86.4812 120.796 cv
85.4283 120.796 84.5747 119.942 84.5747 118.889 cv
84.5747 117.836 85.4283 116.983 86.4812 116.983 cv
87.5341 116.983 88.3877 117.836 88.3877 118.889 cv
cp
.231373 .372549 .419608 rgb
f
87.0542 117.565 mo
86.7816 117.565 86.1427 117.436 85.9126 117.565 cv
85.6228 117.728 85.6057 118.401 85.9126 118.559 cv
86.058 118.635 86.9089 118.634 87.0542 118.559 cv
87.2729 118.447 87.4124 117.565 87.0542 117.565 cv
cp
.298039 .478431 .541176 rgb
f
99.6967 118.889 mo
99.6967 119.942 98.8432 120.796 97.7902 120.796 cv
96.7373 120.796 95.8838 119.942 95.8838 118.889 cv
95.8838 117.836 96.7373 116.983 97.7902 116.983 cv
98.8432 116.983 99.6967 117.836 99.6967 118.889 cv
cp
.231373 .372549 .419608 rgb
f
98.3632 117.565 mo
98.0907 117.565 97.4518 117.436 97.2217 117.565 cv
96.9318 117.728 96.9147 118.401 97.2217 118.559 cv
97.3671 118.635 98.218 118.634 98.3632 118.559 cv
98.5819 118.447 98.7214 117.565 98.3632 117.565 cv
cp
.298039 .478431 .541176 rgb
f
103.445 182.259 mo
58.2085 182.259 li
58.2085 174.478 li
103.445 174.478 li
103.445 182.259 li
.152941 .294118 .341176 rgb
f
103.445 175.301 mo
58.2085 175.824 li
58.2085 174.478 li
103.445 174.478 li
103.445 175.301 li
.298039 .478431 .541176 rgb
f
58.2085 181.436 mo
103.445 180.912 li
103.445 182.259 li
58.2085 182.259 li
58.2085 181.436 li
.121569 .231373 .270588 rgb
f
65.7695 178.368 mo
65.7695 179.421 64.916 180.275 63.8631 180.275 cv
62.8101 180.275 61.9566 179.421 61.9566 178.368 cv
61.9566 177.315 62.8101 176.462 63.8631 176.462 cv
64.916 176.462 65.7695 177.315 65.7695 178.368 cv
cp
.231373 .372549 .419608 rgb
f
64.4361 177.044 mo
64.1635 177.044 63.5246 176.915 63.2945 177.044 cv
63.0047 177.207 62.9876 177.88 63.2945 178.038 cv
63.4399 178.113 64.2908 178.113 64.4361 178.038 cv
64.6547 177.926 64.7942 177.044 64.4361 177.044 cv
cp
.298039 .478431 .541176 rgb
f
77.0786 178.368 mo
77.0786 179.421 76.225 180.275 75.1721 180.275 cv
74.1192 180.275 73.2656 179.421 73.2656 178.368 cv
73.2656 177.315 74.1192 176.462 75.1721 176.462 cv
76.225 176.462 77.0786 177.315 77.0786 178.368 cv
cp
.231373 .372549 .419608 rgb
f
75.7451 177.044 mo
75.4726 177.044 74.8336 176.915 74.6036 177.044 cv
74.3137 177.207 74.2966 177.88 74.6036 178.038 cv
74.7489 178.113 75.5999 178.113 75.7451 178.038 cv
75.9638 177.926 76.1033 177.044 75.7451 177.044 cv
cp
.298039 .478431 .541176 rgb
f
88.3877 178.368 mo
88.3877 179.421 87.5341 180.275 86.4812 180.275 cv
85.4283 180.275 84.5747 179.421 84.5747 178.368 cv
84.5747 177.315 85.4283 176.462 86.4812 176.462 cv
87.5341 176.462 88.3877 177.315 88.3877 178.368 cv
cp
.231373 .372549 .419608 rgb
f
87.0542 177.044 mo
86.7816 177.044 86.1427 176.915 85.9126 177.044 cv
85.6228 177.207 85.6057 177.88 85.9126 178.038 cv
86.058 178.113 86.9089 178.113 87.0542 178.038 cv
87.2729 177.926 87.4124 177.044 87.0542 177.044 cv
cp
.298039 .478431 .541176 rgb
f
99.6967 178.368 mo
99.6967 179.421 98.8432 180.275 97.7902 180.275 cv
96.7373 180.275 95.8838 179.421 95.8838 178.368 cv
95.8838 177.315 96.7373 176.462 97.7902 176.462 cv
98.8432 176.462 99.6967 177.315 99.6967 178.368 cv
cp
.231373 .372549 .419608 rgb
f
98.3632 177.044 mo
98.0907 177.044 97.4518 176.915 97.2217 177.044 cv
96.9318 177.207 96.9147 177.88 97.2217 178.038 cv
97.3671 178.113 98.218 178.113 98.3632 178.038 cv
98.5819 177.926 98.7214 177.044 98.3632 177.044 cv
cp
.298039 .478431 .541176 rgb
f
114.754 85.8257 mo
103.445 85.8257 li
103.445 198.391 li
114.754 198.391 li
114.754 85.8257 li
.890196 .462745 .286275 rgb
f
126.063 85.8257 mo
114.754 85.8257 li
114.754 198.391 li
126.063 198.391 li
126.063 85.8257 li
.960784 .521569 .341176 rgb
f
137.372 85.8257 mo
126.063 85.8257 li
126.063 198.391 li
137.372 198.391 li
137.372 85.8257 li
.839216 .411765 .235294 rgb
f
148.681 85.8257 mo
137.372 85.8257 li
137.372 198.391 li
148.681 198.391 li
148.681 85.8257 li
.890196 .462745 .286275 rgb
f
114.754 104.851 mo
113.835 89.9369 li
112.351 88.0423 li
108.893 87.8427 li
109.1 86.8978 li
114.754 86.7033 li
114.754 104.851 li
.792157 .372549 .219608 rgb
f
115.353 114.999 mo
114.754 114.999 li
114.754 104.851 li
114.754 86.7033 li
126.063 86.3143 li
126.063 102.165 li
126.063 102.169 126.063 102.171 126.063 102.171 cv
126.045 102.171 125.309 87.48 125.309 87.48 cv
123.542 86.6318 li
117.11 87.268 li
116.262 88.4695 li
115.353 114.999 li
.854902 .419608 .258824 rgb
f
126.063 102.165 mo
126.063 86.3143 li
126.063 88.9993 126.063 101.848 126.063 102.165 cv
126.063 102.165 li
.74902 .329412 .180392 rgb
f
114.754 132.487 mo
114.754 122.78 li
115.086 122.78 li
114.754 132.487 li
.854902 .419608 .258824 rgb
f
126.063 198.363 mo
126.063 182.259 li
127.24 182.259 li
127.759 196.174 li
132.424 197.585 li
137.372 197.585 li
137.372 198.361 li
126.063 198.363 li
126.95 174.478 mo
126.063 174.478 li
126.063 150.681 li
126.95 174.478 li
.74902 .329412 .180392 rgb
f
137.372 144.616 mo
137.105 122.78 li
137.372 122.78 li
137.372 144.616 li
f
137.372 114.999 mo
137.01 114.999 li
136.665 86.7563 li
132.695 86.0862 li
137.372 85.9253 li
137.372 114.999 li
f
148.681 167.899 mo
147.948 122.78 li
148.681 122.78 li
148.681 167.899 li
137.372 144.616 mo
137.372 144.616 li
137.372 122.78 li
137.816 122.78 li
137.372 144.616 li
148.681 114.999 mo
147.822 114.999 li
147.409 89.5835 li
146.278 88.0423 li
140.058 88.0423 li
138.503 89.018 li
137.974 114.999 li
137.372 114.999 li
137.372 85.9253 li
140.27 85.8257 li
137.372 85.8257 li
148.681 85.8257 li
148.681 114.999 li
.792157 .372549 .219608 rgb
f
107.877 198.367 mo
107.86 197.41 li
114.754 198.077 li
114.754 198.366 li
107.877 198.367 li
f
114.754 198.366 mo
114.754 198.077 li
117.733 198.365 li
114.754 198.366 li
.854902 .419608 .258824 rgb
f
103.445 122.78 mo
148.681 122.78 li
148.681 114.999 li
103.445 114.999 li
103.445 122.78 li
.121569 .231373 .270588 rgb
f
103.445 115.822 mo
148.681 116.345 li
148.681 114.999 li
103.445 114.999 li
103.445 115.822 li
.152941 .294118 .341176 rgb
f
148.681 121.957 mo
103.445 121.433 li
103.445 122.78 li
148.681 122.78 li
148.681 121.957 li
.0862745 .160784 .188235 rgb
f
141.12 118.889 mo
141.12 119.942 141.974 120.796 143.026 120.796 cv
144.079 120.796 144.933 119.942 144.933 118.889 cv
144.933 117.836 144.079 116.983 143.026 116.983 cv
141.974 116.983 141.12 117.836 141.12 118.889 cv
cp
.152941 .294118 .341176 rgb
f
142.453 117.565 mo
142.726 117.565 143.365 117.436 143.595 117.565 cv
143.885 117.728 143.902 118.401 143.595 118.559 cv
143.45 118.635 142.599 118.634 142.453 118.559 cv
142.235 118.447 142.095 117.565 142.453 117.565 cv
cp
.231373 .372549 .419608 rgb
f
129.811 118.889 mo
129.811 119.942 130.665 120.796 131.717 120.796 cv
132.77 120.796 133.624 119.942 133.624 118.889 cv
133.624 117.836 132.77 116.983 131.717 116.983 cv
130.665 116.983 129.811 117.836 129.811 118.889 cv
cp
.152941 .294118 .341176 rgb
f
131.144 117.565 mo
131.417 117.565 132.056 117.436 132.286 117.565 cv
132.576 117.728 132.593 118.401 132.286 118.559 cv
132.141 118.635 131.29 118.634 131.144 118.559 cv
130.926 118.447 130.786 117.565 131.144 117.565 cv
cp
.231373 .372549 .419608 rgb
f
118.502 118.889 mo
118.502 119.942 119.355 120.796 120.408 120.796 cv
121.461 120.796 122.315 119.942 122.315 118.889 cv
122.315 117.836 121.461 116.983 120.408 116.983 cv
119.355 116.983 118.502 117.836 118.502 118.889 cv
cp
.152941 .294118 .341176 rgb
f
119.835 117.565 mo
120.108 117.565 120.747 117.436 120.977 117.565 cv
121.267 117.728 121.284 118.401 120.977 118.559 cv
120.832 118.635 119.981 118.634 119.835 118.559 cv
119.617 118.447 119.477 117.565 119.835 117.565 cv
cp
.231373 .372549 .419608 rgb
f
107.193 118.889 mo
107.193 119.942 108.046 120.796 109.099 120.796 cv
110.152 120.796 111.006 119.942 111.006 118.889 cv
111.006 117.836 110.152 116.983 109.099 116.983 cv
108.046 116.983 107.193 117.836 107.193 118.889 cv
cp
.152941 .294118 .341176 rgb
f
108.526 117.565 mo
108.799 117.565 109.438 117.436 109.668 117.565 cv
109.958 117.728 109.975 118.401 109.668 118.559 cv
109.522 118.635 108.672 118.634 108.526 118.559 cv
108.308 118.447 108.168 117.565 108.526 117.565 cv
cp
.231373 .372549 .419608 rgb
f
103.445 182.259 mo
148.681 182.259 li
148.681 174.478 li
103.445 174.478 li
103.445 182.259 li
.121569 .231373 .270588 rgb
f
103.445 175.301 mo
148.681 175.824 li
148.681 174.478 li
103.445 174.478 li
103.445 175.301 li
.152941 .294118 .341176 rgb
f
148.681 181.436 mo
103.445 180.912 li
103.445 182.259 li
148.681 182.259 li
148.681 181.436 li
.0862745 .160784 .188235 rgb
f
141.12 178.368 mo
141.12 179.421 141.974 180.275 143.026 180.275 cv
144.079 180.275 144.933 179.421 144.933 178.368 cv
144.933 177.315 144.079 176.462 143.026 176.462 cv
141.974 176.462 141.12 177.315 141.12 178.368 cv
cp
.152941 .294118 .341176 rgb
f
142.453 177.044 mo
142.726 177.044 143.365 176.915 143.595 177.044 cv
143.885 177.207 143.902 177.88 143.595 178.038 cv
143.45 178.113 142.599 178.113 142.453 178.038 cv
142.235 177.926 142.095 177.044 142.453 177.044 cv
cp
.231373 .372549 .419608 rgb
f
129.811 178.368 mo
129.811 179.421 130.665 180.275 131.717 180.275 cv
132.77 180.275 133.624 179.421 133.624 178.368 cv
133.624 177.315 132.77 176.462 131.717 176.462 cv
130.665 176.462 129.811 177.315 129.811 178.368 cv
cp
.152941 .294118 .341176 rgb
f
131.144 177.044 mo
131.417 177.044 132.056 176.915 132.286 177.044 cv
132.576 177.207 132.593 177.88 132.286 178.038 cv
132.141 178.113 131.29 178.113 131.144 178.038 cv
130.926 177.926 130.786 177.044 131.144 177.044 cv
cp
.231373 .372549 .419608 rgb
f
118.502 178.368 mo
118.502 179.421 119.355 180.275 120.408 180.275 cv
121.461 180.275 122.315 179.421 122.315 178.368 cv
122.315 177.315 121.461 176.462 120.408 176.462 cv
119.355 176.462 118.502 177.315 118.502 178.368 cv
cp
.152941 .294118 .341176 rgb
f
119.835 177.044 mo
120.108 177.044 120.747 176.915 120.977 177.044 cv
121.267 177.207 121.284 177.88 120.977 178.038 cv
120.832 178.113 119.981 178.113 119.835 178.038 cv
119.617 177.926 119.477 177.044 119.835 177.044 cv
cp
.231373 .372549 .419608 rgb
f
107.193 178.368 mo
107.193 179.421 108.046 180.275 109.099 180.275 cv
110.152 180.275 111.006 179.421 111.006 178.368 cv
111.006 177.315 110.152 176.462 109.099 176.462 cv
108.046 176.462 107.193 177.315 107.193 178.368 cv
.152941 .294118 .341176 rgb
f
108.526 177.044 mo
108.799 177.044 109.438 176.915 109.668 177.044 cv
109.958 177.207 109.975 177.88 109.668 178.038 cv
109.522 178.113 108.672 178.113 108.526 178.038 cv
108.308 177.926 108.168 177.044 108.526 177.044 cv
cp
.231373 .372549 .419608 rgb
f
59.6591 137.265 mo
56.758 137.265 li
56.4848 137.265 56.2632 137.487 56.2632 137.76 cv
56.2632 140.661 li
56.2632 140.934 56.4848 141.156 56.758 141.156 cv
59.6591 141.156 li
59.9323 141.156 60.1538 140.934 60.1538 140.661 cv
60.1538 137.76 li
60.1538 137.487 59.9323 137.265 59.6591 137.265 cv
cp
.121569 .231373 .270588 rgb
f
59.6591 154.37 mo
56.758 154.37 li
56.4848 154.37 56.2632 154.592 56.2632 154.865 cv
56.2632 157.766 li
56.2632 158.039 56.4848 158.261 56.758 158.261 cv
59.6591 158.261 li
59.9323 158.261 60.1538 158.039 60.1538 157.766 cv
60.1538 154.865 li
60.1538 154.592 59.9323 154.37 59.6591 154.37 cv
cp
f
59.6591 154.37 mo
56.758 154.37 li
56.758 141.156 li
59.6591 141.156 li
59.6591 154.37 li
cp
.0862745 .160784 .188235 rgb
f
59.6591 147.763 mo
79.0227 147.763 li
75.3627 146.365 li
75.3627 144.307 li
75.8497 143.82 li
71.0593 143.82 li
68.829 141.589 li
67.9257 142.493 li
61.5879 142.493 li
59.6929 144.388 li
59.6591 147.763 li
cp
.152941 .294118 .341176 rgb
f
59.6591 147.763 mo
79.0227 147.763 li
75.3627 149.161 li
75.3627 151.219 li
75.8497 151.706 li
71.0593 151.706 li
68.829 153.937 li
67.9257 153.033 li
61.5879 153.033 li
59.6929 151.138 li
59.6591 147.763 li
cp
.121569 .231373 .270588 rgb
f
147.23 158.261 mo
150.132 158.261 li
150.405 158.261 150.626 158.039 150.626 157.766 cv
150.626 154.865 li
150.626 154.592 150.405 154.37 150.132 154.37 cv
147.23 154.37 li
146.957 154.37 146.736 154.592 146.736 154.865 cv
146.736 157.766 li
146.736 158.039 146.957 158.261 147.23 158.261 cv
cp
f
147.23 141.156 mo
150.132 141.156 li
150.405 141.156 150.626 140.934 150.626 140.661 cv
150.626 137.76 li
150.626 137.487 150.405 137.265 150.132 137.265 cv
147.23 137.265 li
146.957 137.265 146.736 137.487 146.736 137.76 cv
146.736 140.661 li
146.736 140.934 146.957 141.156 147.23 141.156 cv
cp
f
147.23 141.156 mo
150.132 141.156 li
150.132 154.37 li
147.23 154.37 li
147.23 141.156 li
cp
.0862745 .160784 .188235 rgb
f
147.23 147.763 mo
127.867 147.763 li
131.527 149.161 li
131.527 151.219 li
131.04 151.706 li
135.83 151.706 li
138.061 153.937 li
138.964 153.033 li
145.302 153.033 li
147.197 151.138 li
147.23 147.763 li
cp
.121569 .231373 .270588 rgb
f
147.23 147.763 mo
127.867 147.763 li
131.527 146.365 li
131.527 144.307 li
131.04 143.82 li
135.83 143.82 li
138.061 141.589 li
138.964 142.493 li
145.302 142.493 li
147.197 144.388 li
147.23 147.763 li
cp
.152941 .294118 .341176 rgb
f
92.1357 159.864 mo
88.4061 159.864 85.3826 156.841 85.3826 153.111 cv
85.3826 149.381 88.4061 146.358 92.1357 146.358 cv
95.8654 146.358 98.8889 149.381 98.8889 153.111 cv
98.8889 156.841 95.8654 159.864 92.1357 159.864 cv
92.1357 144.607 mo
87.4389 144.607 83.6312 148.414 83.6312 153.111 cv
83.6312 157.808 87.4389 161.616 92.1357 161.616 cv
96.8326 161.616 100.64 157.808 100.64 153.111 cv
100.64 148.414 96.8326 144.607 92.1357 144.607 cv
f
100.64 153.111 mo
100.64 153.102 100.64 153.094 100.64 153.085 cv
100.64 153.094 100.64 153.102 100.64 153.111 cv
.74902 .329412 .180392 rgb
f
83.6312 153.111 mo
83.6312 153.102 83.6312 153.094 83.6312 153.085 cv
83.6312 153.094 83.6312 153.102 83.6312 153.111 cv
.854902 .419608 .258824 rgb
f
100.64 153.077 mo
100.64 153.071 100.64 153.065 100.64 153.059 cv
100.64 153.065 100.64 153.071 100.64 153.077 cv
.74902 .329412 .180392 rgb
f
83.6313 153.077 mo
83.6313 153.071 83.6313 153.065 83.6313 153.059 cv
83.6313 153.065 83.6313 153.071 83.6313 153.077 cv
83.6314 153.049 mo
83.6314 153.044 83.6315 153.039 83.6315 153.033 cv
83.6315 153.038 83.6314 153.044 83.6314 153.049 cv
.854902 .419608 .258824 rgb
f
100.64 153.049 mo
100.64 153.044 100.64 153.039 100.64 153.033 cv
100.64 153.039 100.64 153.043 100.64 153.049 cv
100.64 153.023 mo
100.64 153.018 100.64 153.012 100.64 153.007 cv
100.64 153.013 100.64 153.017 100.64 153.023 cv
.74902 .329412 .180392 rgb
f
83.6316 153.022 mo
83.6317 153.017 83.6318 153.012 83.6318 153.007 cv
83.6318 153.012 83.6317 153.017 83.6316 153.022 cv
83.6319 152.996 mo
83.632 152.991 83.6321 152.986 83.6322 152.981 cv
83.6321 152.986 83.632 152.991 83.6319 152.996 cv
.854902 .419608 .258824 rgb
f
100.64 152.996 mo
100.639 152.991 100.639 152.986 100.639 152.981 cv
100.639 152.986 100.639 152.991 100.64 152.996 cv
100.639 152.97 mo
100.639 152.965 100.639 152.959 100.639 152.954 cv
100.639 152.959 100.639 152.965 100.639 152.97 cv
.74902 .329412 .180392 rgb
f
83.6323 152.97 mo
83.6324 152.965 83.6325 152.959 83.6326 152.954 cv
83.6325 152.959 83.6324 152.965 83.6323 152.97 cv
.854902 .419608 .258824 rgb
f
100.639 152.944 mo
100.638 152.927 100.638 152.911 100.638 152.893 cv
100.638 152.91 100.638 152.927 100.639 152.944 cv
.74902 .329412 .180392 rgb
f
83.6328 152.944 mo
83.6329 152.937 83.6331 152.929 83.6332 152.922 cv
83.6331 152.93 83.6329 152.937 83.6328 152.944 cv
83.6333 152.918 mo
83.6335 152.91 83.6337 152.901 83.6339 152.893 cv
83.6337 152.901 83.6335 152.91 83.6333 152.918 cv
83.6341 152.885 mo
83.6343 152.879 83.6344 152.873 83.6346 152.867 cv
83.6344 152.873 83.6343 152.879 83.6341 152.885 cv
.854902 .419608 .258824 rgb
f
100.637 152.883 mo
100.637 152.878 100.637 152.873 100.637 152.867 cv
100.637 152.873 100.637 152.878 100.637 152.883 cv
.74902 .329412 .180392 rgb
f
83.6349 152.857 mo
83.6351 152.852 83.6352 152.846 83.6354 152.841 cv
83.6352 152.847 83.6351 152.852 83.6349 152.857 cv
.854902 .419608 .258824 rgb
f
100.637 152.857 mo
100.636 152.852 100.636 152.847 100.636 152.841 cv
100.636 152.847 100.636 152.852 100.637 152.857 cv
.74902 .329412 .180392 rgb
f
83.6357 152.831 mo
83.6359 152.826 83.636 152.821 83.6362 152.816 cv
83.636 152.821 83.6359 152.826 83.6357 152.831 cv
.854902 .419608 .258824 rgb
f
100.636 152.831 mo
100.636 152.826 100.635 152.821 100.635 152.816 cv
100.635 152.82 100.636 152.826 100.636 152.831 cv
.74902 .329412 .180392 rgb
f
83.6366 152.805 mo
83.6368 152.799 83.637 152.794 83.6372 152.789 cv
83.637 152.794 83.6368 152.8 83.6366 152.805 cv
.854902 .419608 .258824 rgb
f
100.635 152.805 mo
100.635 152.8 100.635 152.795 100.634 152.79 cv
100.635 152.795 100.635 152.8 100.635 152.805 cv
.74902 .329412 .180392 rgb
f
83.6376 152.779 mo
83.6378 152.773 83.638 152.768 83.6382 152.763 cv
83.638 152.768 83.6378 152.773 83.6376 152.779 cv
.854902 .419608 .258824 rgb
f
100.634 152.779 mo
100.634 152.773 100.634 152.769 100.633 152.764 cv
100.634 152.769 100.634 152.773 100.634 152.779 cv
.74902 .329412 .180392 rgb
f
83.6386 152.753 mo
83.6389 152.746 83.6391 152.74 83.6394 152.734 cv
83.6391 152.74 83.6388 152.747 83.6386 152.753 cv
.854902 .419608 .258824 rgb
f
100.633 152.753 mo
100.633 152.746 100.632 152.74 100.632 152.733 cv
100.632 152.74 100.633 152.746 100.633 152.753 cv
100.632 152.727 mo
100.631 152.719 100.631 152.711 100.631 152.702 cv
100.631 152.711 100.631 152.719 100.632 152.727 cv
.74902 .329412 .180392 rgb
f
83.6398 152.725 mo
83.6401 152.717 83.6405 152.71 83.6408 152.702 cv
83.6405 152.71 83.6401 152.717 83.6398 152.725 cv
83.6413 152.693 mo
83.6415 152.688 83.6418 152.682 83.6421 152.676 cv
83.6418 152.682 83.6415 152.688 83.6413 152.693 cv
.854902 .419608 .258824 rgb
f
100.63 152.692 mo
100.63 152.687 100.63 152.682 100.629 152.677 cv
100.63 152.682 100.63 152.687 100.63 152.692 cv
.74902 .329412 .180392 rgb
f
83.6426 152.667 mo
83.6429 152.661 83.6432 152.656 83.6434 152.65 cv
83.6432 152.656 83.6429 152.661 83.6426 152.667 cv
.854902 .419608 .258824 rgb
f
100.629 152.665 mo
100.629 152.66 100.628 152.656 100.628 152.651 cv
100.628 152.656 100.629 152.66 100.629 152.665 cv
.74902 .329412 .180392 rgb
f
83.644 152.64 mo
83.6443 152.635 83.6446 152.63 83.6448 152.625 cv
83.6446 152.63 83.6443 152.635 83.644 152.64 cv
.854902 .419608 .258824 rgb
f
100.627 152.639 mo
100.627 152.635 100.627 152.63 100.627 152.626 cv
100.627 152.63 100.627 152.635 100.627 152.639 cv
.74902 .329412 .180392 rgb
f
83.6455 152.614 mo
83.6458 152.609 83.646 152.604 83.6463 152.599 cv
83.646 152.604 83.6457 152.609 83.6455 152.614 cv
.854902 .419608 .258824 rgb
f
100.626 152.614 mo
100.626 152.609 100.625 152.604 100.625 152.6 cv
100.625 152.604 100.626 152.609 100.626 152.614 cv
.74902 .329412 .180392 rgb
f
83.647 152.588 mo
83.6473 152.583 83.6476 152.578 83.648 152.572 cv
83.6476 152.578 83.6473 152.583 83.647 152.588 cv
.854902 .419608 .258824 rgb
f
100.624 152.588 mo
100.624 152.584 100.624 152.578 100.624 152.574 cv
100.624 152.579 100.624 152.583 100.624 152.588 cv
.74902 .329412 .180392 rgb
f
100.623 152.562 mo
100.622 152.557 100.622 152.55 100.622 152.544 cv
100.622 152.55 100.622 152.557 100.623 152.562 cv
100.621 152.537 mo
100.621 152.529 100.62 152.521 100.62 152.513 cv
100.62 152.521 100.621 152.529 100.621 152.537 cv
f
83.6506 152.533 mo
83.651 152.526 83.6515 152.519 83.6519 152.512 cv
83.6515 152.519 83.651 152.526 83.6506 152.533 cv
83.6527 152.502 mo
83.653 152.497 83.6534 152.492 83.6537 152.487 cv
83.6534 152.492 83.653 152.497 83.6527 152.502 cv
.854902 .419608 .258824 rgb
f
100.619 152.5 mo
100.618 152.496 100.618 152.492 100.618 152.487 cv
100.618 152.492 100.618 152.496 100.619 152.5 cv
.74902 .329412 .180392 rgb
f
83.6546 152.475 mo
83.6549 152.471 83.6553 152.466 83.6556 152.461 cv
83.6553 152.466 83.6549 152.471 83.6546 152.475 cv
.854902 .419608 .258824 rgb
f
83.6565 152.45 mo
83.6569 152.445 83.6572 152.441 83.6575 152.436 cv
83.6572 152.441 83.6569 152.445 83.6565 152.45 cv
f
100.615 152.449 mo
100.615 152.445 100.614 152.441 100.614 152.437 cv
100.614 152.441 100.615 152.445 100.615 152.449 cv
.74902 .329412 .180392 rgb
f
83.6585 152.424 mo
83.6589 152.419 83.6592 152.415 83.6596 152.411 cv
83.6593 152.415 83.6589 152.42 83.6585 152.424 cv
.854902 .419608 .258824 rgb
f
100.613 152.423 mo
100.613 152.419 100.612 152.416 100.612 152.412 cv
100.612 152.416 100.613 152.419 100.613 152.423 cv
.74902 .329412 .180392 rgb
f
83.6606 152.399 mo
83.661 152.394 83.6613 152.39 83.6617 152.386 cv
83.6613 152.39 83.661 152.394 83.6606 152.399 cv
.854902 .419608 .258824 rgb
f
100.611 152.398 mo
100.611 152.394 100.61 152.39 100.61 152.387 cv
100.61 152.391 100.61 152.394 100.611 152.398 cv
.74902 .329412 .180392 rgb
f
83.6628 152.373 mo
83.6631 152.369 83.6635 152.365 83.6638 152.361 cv
83.6634 152.365 83.6631 152.369 83.6628 152.373 cv
.854902 .419608 .258824 rgb
f
100.609 152.373 mo
100.608 152.369 100.608 152.366 100.608 152.362 cv
100.608 152.366 100.608 152.369 100.609 152.373 cv
.74902 .329412 .180392 rgb
f
83.6663 152.334 mo
83.6665 152.331 83.6668 152.327 83.6671 152.324 cv
83.6668 152.327 83.6665 152.331 83.6663 152.334 cv
.854902 .419608 .258824 rgb
f
100.604 152.325 mo
100.604 152.325 100.604 152.325 100.604 152.325 cv
100.604 152.325 100.604 152.325 100.604 152.325 cv
.74902 .329412 .180392 rgb
f
83.6684 152.31 mo
83.6687 152.307 83.6691 152.303 83.6695 152.299 cv
83.6691 152.303 83.6687 152.307 83.6684 152.31 cv
.854902 .419608 .258824 rgb
f
100.603 152.308 mo
100.603 152.305 100.602 152.303 100.602 152.299 cv
100.602 152.302 100.603 152.305 100.603 152.308 cv
.74902 .329412 .180392 rgb
f
83.6708 152.285 mo
83.6711 152.281 83.6715 152.278 83.6719 152.274 cv
83.6715 152.278 83.6711 152.282 83.6708 152.285 cv
.854902 .419608 .258824 rgb
f
100.601 152.283 mo
100.6 152.281 100.6 152.278 100.6 152.275 cv
100.6 152.278 100.6 152.28 100.601 152.283 cv
.74902 .329412 .180392 rgb
f
83.6732 152.26 mo
83.6736 152.256 83.674 152.252 83.6744 152.249 cv
83.674 152.252 83.6736 152.256 83.6732 152.26 cv
.854902 .419608 .258824 rgb
f
100.598 152.259 mo
100.598 152.256 100.598 152.253 100.597 152.25 cv
100.598 152.253 100.598 152.256 100.598 152.259 cv
.74902 .329412 .180392 rgb
f
100.596 152.233 mo
100.595 152.231 100.595 152.229 100.595 152.226 cv
100.595 152.229 100.595 152.231 100.596 152.233 cv
f
83.6784 152.21 mo
83.6787 152.206 83.6791 152.203 83.6795 152.2 cv
83.6791 152.203 83.6787 152.206 83.6784 152.21 cv
.854902 .419608 .258824 rgb
f
100.593 152.209 mo
100.593 152.207 100.593 152.204 100.592 152.202 cv
100.593 152.204 100.593 152.207 100.593 152.209 cv
.74902 .329412 .180392 rgb
f
83.6811 152.185 mo
83.6813 152.182 83.6816 152.18 83.6819 152.177 cv
83.6816 152.18 83.6813 152.182 83.6811 152.185 cv
.854902 .419608 .258824 rgb
f
100.59 152.184 mo
100.59 152.183 100.59 152.183 100.59 152.182 cv
100.59 152.183 100.59 152.183 100.59 152.184 cv
.74902 .329412 .180392 rgb
f
83.686 152.14 mo
83.6861 152.139 83.6863 152.138 83.6864 152.137 cv
83.6863 152.138 83.6861 152.139 83.686 152.14 cv
83.6882 152.121 mo
83.6885 152.118 83.6889 152.115 83.6893 152.112 cv
83.6889 152.115 83.6885 152.118 83.6882 152.121 cv
.854902 .419608 .258824 rgb
f
100.583 152.116 mo
100.583 152.115 100.582 152.114 100.582 152.113 cv
100.582 152.114 100.583 152.115 100.583 152.116 cv
.74902 .329412 .180392 rgb
f
83.691 152.097 mo
83.6914 152.094 83.6918 152.09 83.6922 152.087 cv
83.6918 152.09 83.6914 152.094 83.691 152.097 cv
.854902 .419608 .258824 rgb
f
100.58 152.094 mo
100.58 152.092 100.58 152.09 100.579 152.089 cv
100.58 152.09 100.58 152.092 100.58 152.094 cv
.74902 .329412 .180392 rgb
f
83.6941 152.071 mo
83.6944 152.069 83.6948 152.066 83.6951 152.063 cv
83.6948 152.066 83.6944 152.069 83.6941 152.071 cv
.854902 .419608 .258824 rgb
f
100.577 152.07 mo
100.577 152.068 100.577 152.066 100.576 152.064 cv
100.577 152.066 100.577 152.068 100.577 152.07 cv
.74902 .329412 .180392 rgb
f
83.6971 152.047 mo
83.6975 152.044 83.6978 152.041 83.6982 152.038 cv
83.6978 152.041 83.6975 152.044 83.6971 152.047 cv
.854902 .419608 .258824 rgb
f
100.574 152.045 mo
100.574 152.044 100.574 152.042 100.574 152.041 cv
100.574 152.042 100.574 152.044 100.574 152.045 cv
.74902 .329412 .180392 rgb
f
83.7003 152.022 mo
83.7006 152.02 83.7008 152.018 83.7011 152.015 cv
83.7008 152.018 83.7006 152.02 83.7003 152.022 cv
.854902 .419608 .258824 rgb
f
100.571 152.02 mo
100.571 152.02 100.571 152.02 100.571 152.019 cv
100.571 152.02 100.571 152.02 100.571 152.02 cv
.74902 .329412 .180392 rgb
f
83.7035 151.997 mo
83.7035 151.997 83.7036 151.997 83.7036 151.996 cv
83.7035 151.997 83.7035 151.997 83.7035 151.997 cv
83.7127 151.929 mo
83.7128 151.928 83.7129 151.927 83.713 151.927 cv
83.7129 151.927 83.7128 151.928 83.7127 151.929 cv
83.7157 151.907 mo
83.716 151.906 83.7162 151.904 83.7164 151.902 cv
83.7162 151.904 83.716 151.906 83.7157 151.907 cv
83.7192 151.883 mo
83.7194 151.882 83.7196 151.88 83.7198 151.879 cv
83.7196 151.88 83.7194 151.882 83.7192 151.883 cv
.854902 .419608 .258824 rgb
f
100.552 151.881 mo
100.552 151.881 100.552 151.88 100.552 151.88 cv
100.552 151.881 100.552 151.881 100.552 151.881 cv
.74902 .329412 .180392 rgb
f
83.7226 151.86 mo
83.7229 151.858 83.7231 151.856 83.7234 151.855 cv
83.7231 151.856 83.7229 151.858 83.7226 151.86 cv
83.7262 151.835 mo
83.7264 151.834 83.7266 151.833 83.7268 151.832 cv
83.7266 151.833 83.7264 151.834 83.7262 151.835 cv
83.7484 151.696 mo
83.7484 151.696 li
83.7484 151.696 83.7484 151.696 83.7484 151.696 cv
.854902 .419608 .258824 rgb
f
92.1357 161.616 mo
92.1357 161.616 li
92.1357 161.616 li
92.0457 161.616 91.9562 161.614 91.8668 161.611 cv
87.2945 161.469 83.6312 157.718 83.6312 153.111 cv
83.6312 153.111 li
83.6312 153.102 83.6312 153.094 83.6312 153.085 cv
83.6312 153.082 83.6312 153.08 83.6313 153.077 cv
83.6313 153.071 83.6313 153.065 83.6313 153.059 cv
83.6314 153.056 83.6314 153.052 83.6314 153.049 cv
83.6314 153.044 83.6315 153.038 83.6315 153.033 cv
83.6316 153.03 83.6316 153.026 83.6316 153.022 cv
83.6317 153.017 83.6318 153.012 83.6318 153.007 cv
83.6319 153.004 83.6319 153 83.6319 152.996 cv
83.632 152.991 83.6321 152.986 83.6322 152.981 cv
83.6322 152.977 83.6323 152.974 83.6323 152.97 cv
83.6324 152.965 83.6325 152.959 83.6326 152.954 cv
83.6327 152.95 83.6327 152.948 83.6328 152.944 cv
83.6329 152.937 83.6331 152.93 83.6332 152.922 cv
83.6333 152.921 83.6333 152.919 83.6333 152.918 cv
83.6335 152.91 83.6337 152.901 83.6339 152.893 cv
83.634 152.89 83.6341 152.888 83.6341 152.885 cv
83.6343 152.879 83.6344 152.873 83.6346 152.867 cv
83.6347 152.864 83.6348 152.861 83.6349 152.857 cv
83.6351 152.852 83.6352 152.847 83.6354 152.841 cv
83.6355 152.838 83.6356 152.834 83.6357 152.831 cv
83.6359 152.826 83.636 152.821 83.6362 152.816 cv
83.6363 152.812 83.6365 152.808 83.6366 152.805 cv
83.6368 152.8 83.637 152.794 83.6372 152.789 cv
83.6373 152.786 83.6374 152.782 83.6376 152.779 cv
83.6378 152.773 83.638 152.768 83.6382 152.763 cv
83.6383 152.76 83.6385 152.756 83.6386 152.753 cv
83.6388 152.747 83.6391 152.74 83.6394 152.734 cv
83.6395 152.731 83.6397 152.728 83.6398 152.725 cv
83.6401 152.717 83.6405 152.71 83.6408 152.702 cv
83.641 152.699 83.6411 152.696 83.6413 152.693 cv
83.6415 152.688 83.6418 152.682 83.6421 152.676 cv
83.6423 152.673 83.6424 152.67 83.6426 152.667 cv
83.6429 152.661 83.6432 152.656 83.6434 152.65 cv
83.6436 152.647 83.6438 152.643 83.644 152.64 cv
83.6443 152.635 83.6446 152.63 83.6448 152.625 cv
83.6451 152.621 83.6453 152.618 83.6455 152.614 cv
83.6457 152.609 83.646 152.604 83.6463 152.599 cv
83.6466 152.596 83.6468 152.592 83.647 152.588 cv
83.6473 152.583 83.6476 152.578 83.648 152.572 cv
83.6482 152.569 83.6484 152.566 83.6486 152.563 cv
83.6489 152.557 83.6493 152.551 83.6497 152.545 cv
83.65 152.541 83.6503 152.537 83.6506 152.533 cv
83.651 152.526 83.6515 152.519 83.6519 152.512 cv
83.6522 152.509 83.6524 152.506 83.6527 152.502 cv
83.653 152.497 83.6534 152.492 83.6537 152.487 cv
83.654 152.483 83.6543 152.479 83.6546 152.475 cv
83.6549 152.471 83.6553 152.466 83.6556 152.461 cv
83.6559 152.457 83.6562 152.454 83.6565 152.45 cv
83.6569 152.445 83.6572 152.441 83.6575 152.436 cv
83.6579 152.432 83.6582 152.428 83.6585 152.424 cv
83.6589 152.42 83.6593 152.415 83.6596 152.411 cv
83.6599 152.407 83.6603 152.403 83.6606 152.399 cv
83.661 152.394 83.6613 152.39 83.6617 152.386 cv
83.662 152.381 83.6624 152.377 83.6628 152.373 cv
83.6631 152.369 83.6634 152.365 83.6638 152.361 cv
83.6646 152.352 83.6654 152.343 83.6663 152.334 cv
83.6665 152.331 83.6668 152.327 83.6671 152.324 cv
83.6675 152.32 83.6679 152.315 83.6684 152.31 cv
83.6687 152.307 83.6691 152.303 83.6695 152.299 cv
83.6699 152.295 83.6703 152.29 83.6708 152.285 cv
83.6711 152.282 83.6715 152.278 83.6719 152.274 cv
83.6723 152.269 83.6728 152.265 83.6732 152.26 cv
83.6736 152.256 83.674 152.252 83.6744 152.249 cv
83.6748 152.244 83.6753 152.24 83.6757 152.235 cv
83.6761 152.231 83.6765 152.228 83.6769 152.224 cv
83.6774 152.219 83.6779 152.214 83.6784 152.21 cv
83.6787 152.206 83.6791 152.203 83.6795 152.2 cv
83.68 152.195 83.6805 152.19 83.6811 152.185 cv
83.6813 152.182 83.6816 152.18 83.6819 152.177 cv
83.6832 152.165 83.6846 152.152 83.686 152.14 cv
83.6861 152.139 83.6863 152.138 83.6864 152.137 cv
83.687 152.131 83.6876 152.126 83.6882 152.121 cv
83.6885 152.118 83.6889 152.115 83.6893 152.112 cv
83.6898 152.107 83.6904 152.102 83.691 152.097 cv
83.6914 152.094 83.6918 152.09 83.6922 152.087 cv
83.6928 152.082 83.6934 152.077 83.6941 152.071 cv
83.6944 152.069 83.6948 152.066 83.6951 152.063 cv
83.6958 152.057 83.6964 152.052 83.6971 152.047 cv
83.6975 152.044 83.6978 152.041 83.6982 152.038 cv
83.6989 152.033 83.6996 152.027 83.7003 152.022 cv
83.7006 152.02 83.7008 152.018 83.7011 152.015 cv
83.7019 152.009 83.7027 152.003 83.7035 151.997 cv
83.7035 151.997 83.7035 151.997 83.7036 151.996 cv
83.7065 151.974 83.7096 151.951 83.7127 151.929 cv
83.7128 151.928 83.7129 151.927 83.713 151.927 cv
83.7139 151.92 83.7148 151.914 83.7157 151.907 cv
83.716 151.906 83.7162 151.904 83.7164 151.902 cv
83.7173 151.896 83.7182 151.89 83.7192 151.883 cv
83.7194 151.882 83.7196 151.88 83.7198 151.879 cv
83.7207 151.872 83.7217 151.866 83.7226 151.86 cv
83.7229 151.858 83.7231 151.856 83.7234 151.855 cv
83.7243 151.848 83.7253 151.842 83.7262 151.835 cv
83.7264 151.834 83.7266 151.833 83.7268 151.832 cv
83.7336 151.786 83.7408 151.741 83.7484 151.696 cv
83.7484 151.696 83.7484 151.696 83.7484 151.696 cv
84.3291 148.229 87.0074 145.473 90.4338 144.777 cv
86.8068 145.559 84.0871 148.781 84.0871 152.642 cv
84.0871 157.087 87.6906 160.691 92.1357 160.691 cv
96.5807 160.691 100.184 157.087 100.184 152.642 cv
100.184 148.781 97.4646 145.559 93.8375 144.777 cv
97.3243 145.486 100.037 148.327 100.552 151.88 cv
100.552 151.88 100.552 151.881 100.552 151.881 cv
100.559 151.927 100.565 151.973 100.571 152.019 cv
100.571 152.02 100.571 152.02 100.571 152.02 cv
100.572 152.027 100.573 152.034 100.574 152.041 cv
100.574 152.042 100.574 152.044 100.574 152.045 cv
100.575 152.051 100.576 152.058 100.576 152.064 cv
100.577 152.066 100.577 152.068 100.577 152.07 cv
100.578 152.076 100.579 152.082 100.579 152.089 cv
100.58 152.09 100.58 152.092 100.58 152.094 cv
100.581 152.1 100.582 152.107 100.582 152.113 cv
100.582 152.114 100.583 152.115 100.583 152.116 cv
100.585 152.138 100.588 152.16 100.59 152.182 cv
100.59 152.183 100.59 152.183 100.59 152.184 cv
100.591 152.19 100.592 152.196 100.592 152.202 cv
100.593 152.204 100.593 152.207 100.593 152.209 cv
100.594 152.215 100.594 152.22 100.595 152.226 cv
100.595 152.229 100.595 152.231 100.596 152.233 cv
100.596 152.239 100.597 152.245 100.597 152.25 cv
100.598 152.253 100.598 152.256 100.598 152.259 cv
100.599 152.264 100.599 152.269 100.6 152.275 cv
100.6 152.278 100.6 152.281 100.601 152.283 cv
100.601 152.289 100.602 152.294 100.602 152.299 cv
100.602 152.303 100.603 152.305 100.603 152.308 cv
100.603 152.314 100.604 152.319 100.604 152.325 cv
100.604 152.325 100.604 152.325 100.604 152.325 cv
100.606 152.338 100.607 152.35 100.608 152.362 cv
100.608 152.366 100.608 152.369 100.609 152.373 cv
100.609 152.377 100.609 152.382 100.61 152.387 cv
100.61 152.39 100.611 152.394 100.611 152.398 cv
100.611 152.402 100.612 152.407 100.612 152.412 cv
100.612 152.416 100.613 152.419 100.613 152.423 cv
100.613 152.428 100.614 152.432 100.614 152.437 cv
100.614 152.441 100.615 152.445 100.615 152.449 cv
100.615 152.453 100.616 152.458 100.616 152.462 cv
100.616 152.466 100.616 152.47 100.617 152.474 cv
100.617 152.479 100.617 152.483 100.618 152.487 cv
100.618 152.492 100.618 152.496 100.619 152.5 cv
100.619 152.505 100.619 152.508 100.62 152.513 cv
100.62 152.521 100.621 152.529 100.621 152.537 cv
100.621 152.54 100.622 152.542 100.622 152.544 cv
100.622 152.55 100.622 152.557 100.623 152.562 cv
100.623 152.566 100.623 152.57 100.624 152.574 cv
100.624 152.578 100.624 152.584 100.624 152.588 cv
100.625 152.592 100.625 152.596 100.625 152.6 cv
100.625 152.604 100.626 152.609 100.626 152.614 cv
100.626 152.617 100.626 152.622 100.627 152.626 cv
100.627 152.63 100.627 152.635 100.627 152.639 cv
100.628 152.643 100.628 152.647 100.628 152.651 cv
100.628 152.656 100.629 152.66 100.629 152.665 cv
100.629 152.669 100.629 152.673 100.629 152.677 cv
100.63 152.682 100.63 152.687 100.63 152.692 cv
100.63 152.695 100.63 152.699 100.631 152.702 cv
100.631 152.711 100.631 152.719 100.632 152.727 cv
100.632 152.729 100.632 152.731 100.632 152.733 cv
100.632 152.74 100.633 152.746 100.633 152.753 cv
100.633 152.756 100.633 152.76 100.633 152.764 cv
100.634 152.769 100.634 152.773 100.634 152.779 cv
100.634 152.782 100.634 152.786 100.634 152.79 cv
100.635 152.795 100.635 152.8 100.635 152.805 cv
100.635 152.808 100.635 152.812 100.635 152.816 cv
100.635 152.821 100.636 152.826 100.636 152.831 cv
100.636 152.834 100.636 152.838 100.636 152.841 cv
100.636 152.847 100.636 152.852 100.637 152.857 cv
100.637 152.86 100.637 152.864 100.637 152.867 cv
100.637 152.873 100.637 152.878 100.637 152.883 cv
100.637 152.886 100.637 152.89 100.638 152.893 cv
100.638 152.911 100.638 152.927 100.639 152.944 cv
100.639 152.948 100.639 152.95 100.639 152.954 cv
100.639 152.959 100.639 152.965 100.639 152.97 cv
100.639 152.974 100.639 152.978 100.639 152.981 cv
100.639 152.986 100.639 152.991 100.64 152.996 cv
100.64 153 100.64 153.003 100.64 153.007 cv
100.64 153.012 100.64 153.018 100.64 153.023 cv
100.64 153.026 100.64 153.03 100.64 153.033 cv
100.64 153.039 100.64 153.044 100.64 153.049 cv
100.64 153.052 100.64 153.056 100.64 153.059 cv
100.64 153.065 100.64 153.071 100.64 153.077 cv
100.64 153.08 100.64 153.082 100.64 153.085 cv
100.64 153.094 100.64 153.102 100.64 153.111 cv
100.64 153.111 li
100.64 157.658 97.072 161.371 92.5833 161.604 cv
92.4349 161.612 92.2859 161.616 92.1357 161.616 cv
.137255 .235294 .258824 rgb
f
94.4448 143.07 mo
89.8267 143.07 li
89.409 143.07 89.0703 143.409 89.0703 143.826 cv
89.0703 146.932 li
89.0703 147.349 89.409 147.688 89.8267 147.688 cv
94.4448 147.688 li
94.8625 147.688 95.2011 147.349 95.2011 146.932 cv
95.2011 143.826 li
95.2011 143.409 94.8625 143.07 94.4448 143.07 cv
cp
.231373 .372549 .419608 rgb
f
94.0401 143.475 mo
93.1308 143.475 90.999 143.042 90.2313 143.475 cv
89.2643 144.019 89.2072 146.264 90.2313 146.792 cv
90.7164 147.043 93.5555 147.042 94.0401 146.792 cv
94.7697 146.416 95.2351 143.475 94.0401 143.475 cv
cp
.298039 .478431 .541176 rgb
f
114.754 159.864 mo
111.024 159.864 108.001 156.841 108.001 153.111 cv
108.001 149.381 111.024 146.358 114.754 146.358 cv
118.483 146.358 121.507 149.381 121.507 153.111 cv
121.507 156.841 118.483 159.864 114.754 159.864 cv
114.754 144.607 mo
110.057 144.607 106.249 148.414 106.249 153.111 cv
106.249 157.808 110.057 161.616 114.754 161.616 cv
119.451 161.616 123.258 157.808 123.258 153.111 cv
123.258 148.414 119.451 144.607 114.754 144.607 cv
.152941 .294118 .341176 rgb
f
114.754 161.616 mo
114.754 161.616 li
114.754 161.616 li
119.451 161.616 123.258 157.808 123.258 153.111 cv
123.258 153.111 li
123.258 157.808 119.451 161.616 114.754 161.616 cv
123.258 153.111 mo
123.258 153.102 123.258 153.094 123.258 153.085 cv
123.258 153.094 123.258 153.102 123.258 153.111 cv
123.258 153.077 mo
123.258 153.071 123.258 153.065 123.258 153.059 cv
123.258 153.065 123.258 153.071 123.258 153.077 cv
123.258 153.049 mo
123.258 153.044 123.258 153.039 123.258 153.033 cv
123.258 153.039 123.258 153.043 123.258 153.049 cv
123.258 153.023 mo
123.258 153.018 123.258 153.012 123.258 153.007 cv
123.258 153.013 123.258 153.017 123.258 153.023 cv
123.258 152.996 mo
123.258 152.991 123.257 152.986 123.257 152.981 cv
123.257 152.986 123.258 152.991 123.258 152.996 cv
123.257 152.97 mo
123.257 152.965 123.257 152.959 123.257 152.954 cv
123.257 152.959 123.257 152.965 123.257 152.97 cv
123.257 152.944 mo
123.256 152.927 123.256 152.911 123.256 152.893 cv
123.256 152.91 123.256 152.927 123.257 152.944 cv
123.255 152.883 mo
123.255 152.878 123.255 152.873 123.255 152.867 cv
123.255 152.873 123.255 152.878 123.255 152.883 cv
123.255 152.857 mo
123.254 152.852 123.254 152.847 123.254 152.841 cv
123.254 152.847 123.255 152.852 123.255 152.857 cv
123.254 152.831 mo
123.254 152.826 123.254 152.821 123.253 152.816 cv
123.254 152.82 123.254 152.826 123.254 152.831 cv
123.253 152.805 mo
123.253 152.8 123.253 152.795 123.252 152.79 cv
123.253 152.795 123.253 152.8 123.253 152.805 cv
123.252 152.779 mo
123.252 152.773 123.252 152.769 123.251 152.764 cv
123.252 152.769 123.252 152.773 123.252 152.779 cv
123.251 152.753 mo
123.251 152.746 123.25 152.74 123.25 152.733 cv
123.25 152.74 123.251 152.746 123.251 152.753 cv
123.25 152.727 mo
123.25 152.719 123.249 152.711 123.249 152.702 cv
123.249 152.711 123.249 152.719 123.25 152.727 cv
123.248 152.692 mo
123.248 152.687 123.248 152.682 123.247 152.677 cv
123.248 152.682 123.248 152.687 123.248 152.692 cv
123.247 152.665 mo
123.247 152.661 123.246 152.656 123.246 152.651 cv
123.246 152.656 123.247 152.661 123.247 152.665 cv
123.246 152.64 mo
123.245 152.635 123.245 152.63 123.245 152.625 cv
123.245 152.63 123.245 152.635 123.246 152.64 cv
123.244 152.614 mo
123.244 152.609 123.244 152.604 123.243 152.599 cv
123.244 152.604 123.244 152.609 123.244 152.614 cv
123.243 152.588 mo
123.242 152.583 123.242 152.578 123.242 152.573 cv
123.242 152.578 123.242 152.583 123.243 152.588 cv
123.241 152.563 mo
123.241 152.556 123.24 152.549 123.24 152.542 cv
123.24 152.549 123.241 152.556 123.241 152.563 cv
123.239 152.537 mo
123.239 152.529 123.238 152.521 123.238 152.513 cv
123.238 152.521 123.239 152.529 123.239 152.537 cv
123.237 152.501 mo
123.237 152.497 123.236 152.492 123.236 152.487 cv
123.236 152.492 123.237 152.496 123.237 152.501 cv
123.235 152.475 mo
123.235 152.47 123.234 152.466 123.234 152.462 cv
123.234 152.466 123.235 152.471 123.235 152.475 cv
123.233 152.449 mo
123.233 152.445 123.232 152.441 123.232 152.436 cv
123.232 152.441 123.233 152.445 123.233 152.449 cv
123.231 152.424 mo
123.231 152.42 123.23 152.415 123.23 152.411 cv
123.23 152.415 123.231 152.419 123.231 152.424 cv
123.229 152.399 mo
123.229 152.394 123.228 152.389 123.228 152.385 cv
123.228 152.389 123.229 152.394 123.229 152.399 cv
123.227 152.373 mo
123.226 152.368 123.226 152.363 123.225 152.358 cv
123.226 152.363 123.226 152.368 123.227 152.373 cv
123.224 152.345 mo
123.224 152.338 123.223 152.331 123.222 152.324 cv
123.223 152.331 123.224 152.338 123.224 152.345 cv
123.221 152.311 mo
123.221 152.307 123.221 152.303 123.22 152.299 cv
123.22 152.303 123.221 152.307 123.221 152.311 cv
123.219 152.285 mo
123.218 152.281 123.218 152.278 123.218 152.274 cv
123.218 152.278 123.218 152.281 123.219 152.285 cv
123.216 152.26 mo
123.216 152.256 123.216 152.253 123.215 152.249 cv
123.216 152.253 123.216 152.256 123.216 152.26 cv
123.214 152.234 mo
123.213 152.231 123.213 152.228 123.213 152.225 cv
123.213 152.228 123.213 152.231 123.214 152.234 cv
123.211 152.209 mo
123.211 152.206 123.211 152.203 123.21 152.2 cv
123.21 152.203 123.211 152.206 123.211 152.209 cv
123.208 152.184 mo
123.208 152.182 123.208 152.179 123.208 152.177 cv
123.208 152.179 123.208 152.182 123.208 152.184 cv
123.201 152.121 mo
123.201 152.118 123.201 152.115 123.2 152.112 cv
123.201 152.115 123.201 152.118 123.201 152.121 cv
123.198 152.096 mo
123.198 152.093 123.198 152.09 123.197 152.087 cv
123.198 152.09 123.198 152.093 123.198 152.096 cv
123.196 152.072 mo
123.195 152.069 123.195 152.065 123.194 152.062 cv
123.195 152.066 123.195 152.069 123.196 152.072 cv
123.192 152.047 mo
123.192 152.044 123.192 152.041 123.191 152.038 cv
123.192 152.041 123.192 152.044 123.192 152.047 cv
123.189 152.022 mo
123.189 152.02 123.189 152.017 123.188 152.015 cv
123.189 152.017 123.189 152.02 123.189 152.022 cv
123.186 151.997 mo
123.186 151.996 123.186 151.995 123.186 151.994 cv
123.186 151.995 123.186 151.996 123.186 151.997 cv
123.177 151.929 mo
123.177 151.928 123.177 151.928 123.177 151.927 cv
123.177 151.928 123.177 151.928 123.177 151.929 cv
123.174 151.907 mo
123.174 151.906 123.173 151.904 123.173 151.902 cv
123.173 151.904 123.174 151.906 123.174 151.907 cv
123.171 151.884 mo
123.17 151.882 123.17 151.88 123.17 151.878 cv
123.17 151.88 123.17 151.882 123.171 151.884 cv
123.167 151.86 mo
123.167 151.858 123.166 151.856 123.166 151.855 cv
123.166 151.856 123.167 151.858 123.167 151.86 cv
123.163 151.835 mo
123.163 151.834 123.163 151.833 123.163 151.832 cv
123.163 151.833 123.163 151.834 123.163 151.835 cv
123.145 151.719 mo
123.145 151.719 123.145 151.719 123.145 151.719 cv
123.145 151.719 li
123.141 151.697 mo
123.141 151.696 123.141 151.696 123.141 151.695 cv
123.141 151.696 123.141 151.697 123.141 151.697 cv
123.137 151.673 mo
123.137 151.673 123.137 151.673 123.137 151.672 cv
123.137 151.673 123.137 151.673 123.137 151.673 cv
.854902 .419608 .258824 rgb
f
114.754 161.616 mo
114.754 161.616 li
111.411 161.616 108.52 159.688 107.129 156.883 cv
107.098 155.132 li
108.147 158.358 111.178 160.691 114.754 160.691 cv
119.199 160.691 122.802 157.087 122.802 152.642 cv
122.802 148.781 120.083 145.559 116.456 144.777 cv
119.874 145.472 122.548 148.217 123.137 151.672 cv
123.137 151.673 123.137 151.673 123.137 151.673 cv
123.139 151.681 123.14 151.688 123.141 151.695 cv
123.141 151.696 123.141 151.696 123.141 151.697 cv
123.143 151.704 123.144 151.711 123.145 151.719 cv
123.145 151.719 123.145 151.719 123.145 151.719 cv
123.151 151.757 123.157 151.795 123.163 151.832 cv
123.163 151.833 123.163 151.834 123.163 151.835 cv
123.164 151.842 123.165 151.848 123.166 151.855 cv
123.166 151.856 123.167 151.858 123.167 151.86 cv
123.168 151.866 123.169 151.872 123.17 151.878 cv
123.17 151.88 123.17 151.882 123.171 151.884 cv
123.171 151.89 123.172 151.896 123.173 151.902 cv
123.173 151.904 123.174 151.906 123.174 151.907 cv
123.175 151.914 123.176 151.92 123.177 151.927 cv
123.177 151.928 123.177 151.928 123.177 151.929 cv
123.18 151.951 123.183 151.973 123.186 151.994 cv
123.186 151.995 123.186 151.996 123.186 151.997 cv
123.187 152.003 123.188 152.009 123.188 152.015 cv
123.189 152.017 123.189 152.02 123.189 152.022 cv
123.19 152.027 123.191 152.033 123.191 152.038 cv
123.192 152.041 123.192 152.044 123.192 152.047 cv
123.193 152.052 123.194 152.057 123.194 152.062 cv
123.195 152.065 123.195 152.069 123.196 152.072 cv
123.196 152.077 123.197 152.082 123.197 152.087 cv
123.198 152.09 123.198 152.093 123.198 152.096 cv
123.199 152.101 123.2 152.107 123.2 152.112 cv
123.201 152.115 123.201 152.118 123.201 152.121 cv
123.203 152.139 123.206 152.158 123.208 152.177 cv
123.208 152.179 123.208 152.182 123.208 152.184 cv
123.209 152.19 123.21 152.195 123.21 152.2 cv
123.211 152.203 123.211 152.206 123.211 152.209 cv
123.212 152.215 123.212 152.22 123.213 152.225 cv
123.213 152.228 123.213 152.231 123.214 152.234 cv
123.214 152.239 123.215 152.244 123.215 152.249 cv
123.216 152.253 123.216 152.256 123.216 152.26 cv
123.217 152.264 123.217 152.27 123.218 152.274 cv
123.218 152.278 123.218 152.281 123.219 152.285 cv
123.219 152.29 123.22 152.294 123.22 152.299 cv
123.221 152.303 123.221 152.307 123.221 152.311 cv
123.222 152.315 123.222 152.32 123.222 152.324 cv
123.223 152.331 123.224 152.338 123.224 152.345 cv
123.225 152.349 123.225 152.353 123.225 152.358 cv
123.226 152.363 123.226 152.368 123.227 152.373 cv
123.227 152.377 123.227 152.381 123.228 152.385 cv
123.228 152.389 123.229 152.394 123.229 152.399 cv
123.229 152.403 123.23 152.407 123.23 152.411 cv
123.23 152.415 123.231 152.42 123.231 152.424 cv
123.231 152.428 123.232 152.432 123.232 152.436 cv
123.232 152.441 123.233 152.445 123.233 152.449 cv
123.233 152.454 123.234 152.458 123.234 152.462 cv
123.234 152.466 123.235 152.47 123.235 152.475 cv
123.235 152.479 123.236 152.483 123.236 152.487 cv
123.236 152.492 123.237 152.497 123.237 152.501 cv
123.237 152.505 123.237 152.509 123.238 152.513 cv
123.238 152.521 123.239 152.529 123.239 152.537 cv
123.239 152.539 123.24 152.541 123.24 152.542 cv
123.24 152.549 123.241 152.556 123.241 152.563 cv
123.241 152.566 123.241 152.57 123.242 152.573 cv
123.242 152.578 123.242 152.583 123.243 152.588 cv
123.243 152.592 123.243 152.596 123.243 152.599 cv
123.244 152.604 123.244 152.609 123.244 152.614 cv
123.244 152.618 123.245 152.621 123.245 152.625 cv
123.245 152.63 123.245 152.635 123.246 152.64 cv
123.246 152.644 123.246 152.647 123.246 152.651 cv
123.246 152.656 123.247 152.661 123.247 152.665 cv
123.247 152.669 123.247 152.673 123.247 152.677 cv
123.248 152.682 123.248 152.687 123.248 152.692 cv
123.248 152.695 123.249 152.699 123.249 152.702 cv
123.249 152.711 123.25 152.719 123.25 152.727 cv
123.25 152.729 123.25 152.731 123.25 152.733 cv
123.25 152.74 123.251 152.746 123.251 152.753 cv
123.251 152.756 123.251 152.76 123.251 152.764 cv
123.252 152.769 123.252 152.773 123.252 152.779 cv
123.252 152.782 123.252 152.786 123.252 152.79 cv
123.253 152.795 123.253 152.8 123.253 152.805 cv
123.253 152.808 123.253 152.812 123.253 152.816 cv
123.254 152.821 123.254 152.826 123.254 152.831 cv
123.254 152.834 123.254 152.838 123.254 152.841 cv
123.254 152.847 123.254 152.852 123.255 152.857 cv
123.255 152.86 123.255 152.864 123.255 152.867 cv
123.255 152.873 123.255 152.878 123.255 152.883 cv
123.255 152.886 123.256 152.89 123.256 152.893 cv
123.256 152.911 123.256 152.927 123.257 152.944 cv
123.257 152.948 123.257 152.95 123.257 152.954 cv
123.257 152.959 123.257 152.965 123.257 152.97 cv
123.257 152.974 123.257 152.978 123.257 152.981 cv
123.257 152.986 123.258 152.991 123.258 152.996 cv
123.258 153 123.258 153.003 123.258 153.007 cv
123.258 153.012 123.258 153.018 123.258 153.023 cv
123.258 153.026 123.258 153.03 123.258 153.033 cv
123.258 153.039 123.258 153.044 123.258 153.049 cv
123.258 153.052 123.258 153.056 123.258 153.059 cv
123.258 153.065 123.258 153.071 123.258 153.077 cv
123.258 153.08 123.258 153.082 123.258 153.085 cv
123.258 153.094 123.258 153.102 123.258 153.111 cv
123.258 153.111 li
123.258 157.808 119.451 161.616 114.754 161.616 cv
107.013 150.43 mo
106.998 149.616 li
108.107 147.161 110.346 145.327 113.052 144.777 cv
110.146 145.404 107.822 147.597 107.013 150.43 cv
.137255 .235294 .258824 rgb
f
117.063 143.07 mo
112.445 143.07 li
112.027 143.07 111.688 143.409 111.688 143.826 cv
111.688 146.932 li
111.688 147.349 112.027 147.688 112.445 147.688 cv
117.063 147.688 li
117.481 147.688 117.819 147.349 117.819 146.932 cv
117.819 143.826 li
117.819 143.409 117.481 143.07 117.063 143.07 cv
cp
.231373 .372549 .419608 rgb
f
116.658 143.475 mo
115.749 143.475 113.617 143.042 112.849 143.475 cv
111.882 144.019 111.825 146.264 112.849 146.792 cv
113.335 147.043 116.174 147.042 116.658 146.792 cv
117.388 146.416 117.853 143.475 116.658 143.475 cv
cp
.298039 .478431 .541176 rgb
f
32.1824 187.482 mo
31.7252 180.912 li
31.7254 180.914 li
32.1824 187.482 li
41.5277 165.371 mo
41.5277 165.371 li
35.025 164.318 li
31.9543 155.495 li
35.025 164.318 li
41.5277 165.371 li
174.438 162.083 mo
174.438 162.083 li
170.31 157.355 li
174.438 162.083 li
48.993 137.269 mo
49.0191 137.265 li
49.02 137.265 li
48.993 137.269 li
172.995 97.2812 mo
172.769 95.519 li
172.769 95.519 li
172.995 97.2811 li
172.217 91.2129 mo
172.217 91.2129 li
171.898 88.7284 li
171.898 88.7281 li
172.217 91.2129 li
38.559 79.7743 mo
38.559 79.7743 li
38.5931 79.3395 li
38.559 79.7744 li
161.027 77.975 mo
163.913 72.9902 li
161.978 76.3328 li
161.978 76.3327 li
161.027 77.9748 li
161.027 77.975 li
64.6555 65.0033 mo
66.2289 60.4036 li
66.2288 60.4042 li
64.6555 65.0033 li
.321569 .380392 .443137 rgb
f
36.8551 198.383 mo
32.6218 193.796 li
32.5847 193.263 li
32.3365 189.696 li
32.1824 187.482 li
31.7254 180.914 li
33.2344 193.267 li
37.1925 195.858 li
48.6429 194.209 li
51.5173 177.811 li
45.6272 167.35 li
36.0201 166.667 li
41.5277 165.371 li
35.025 164.318 li
31.9543 155.495 li
35.7789 161.616 li
40.3967 162.308 li
49.7267 160.376 li
51.7058 142.8 li
46.8523 138.088 li
39.0303 138.565 li
48.993 137.269 li
49.02 137.265 li
49.0191 137.265 li
49.02 137.265 li
38.4176 137.265 li
38.4176 137.265 38.4176 137.265 38.4175 137.265 cv
38.4145 137.263 38.3499 137.215 38.2404 137.133 cv
38.2212 137.119 li
38.1382 137.058 38.0317 136.978 37.907 136.886 cv
37.9054 136.885 li
37.9008 136.881 37.8962 136.878 37.8914 136.874 cv
37.8845 136.869 li
37.8829 136.868 37.8814 136.867 37.8798 136.866 cv
37.8419 136.837 li
37.8373 136.834 37.833 136.831 37.8284 136.827 cv
37.8282 136.827 li
37.8172 136.819 37.8062 136.811 37.795 136.803 cv
36.3958 135.763 li
36.3704 135.744 36.345 135.725 36.3197 135.706 cv
36.2768 135.674 36.2335 135.642 36.1904 135.61 cv
36.1575 135.586 36.1246 135.561 36.0915 135.537 cv
33.9863 133.973 li
33.9811 133.968 33.9799 133.967 33.9826 133.967 cv
34.0703 133.967 38.3706 136.156 38.3706 136.156 cv
44.9204 135.826 li
51.2817 133.282 li
53.1194 118.889 li
45.533 110.287 li
34.9307 110.475 li
32.1478 113.696 li
36.2973 107.695 li
42.5481 106.847 li
36.4386 106.847 li
36.4386 106.847 36.4385 106.847 36.4385 106.847 cv
36.4371 106.845 36.3848 106.772 36.3033 106.659 cv
36.1761 106.482 li
35.9275 106.137 35.5398 105.599 35.1698 105.086 cv
35.1566 105.068 li
34.6683 104.39 34.2203 103.768 34.1905 103.727 cv
34.1891 103.725 34.189 103.724 34.1901 103.724 cv
34.2432 103.724 37.1925 105.951 37.1925 105.951 cv
44.779 105.574 li
51.6586 104.632 li
52.2241 92.8518 li
48.0775 85.3595 li
38.7004 82.1553 li
35.5904 83.3177 li
33.3156 86.8608 li
35.3076 82.9564 li
38.559 80.8097 li
42.5481 82.1082 li
38.559 79.7743 li
38.5931 79.3395 li
38.8347 76.2609 li
39.2658 79.476 li
48.5958 80.8097 li
54.8158 78.1424 li
59.3394 75.2285 li
63.8631 72.2128 li
63.8631 66.1843 li
64.6555 68.82 li
64.6555 65.0033 li
66.2288 60.4042 li
65.4887 65.0503 li
69.5176 73.061 li
77.0786 73.4379 li
89.9681 74.5563 li
92.5126 70.4221 li
92.5126 63.4482 li
90.8742 58.7021 li
90.988 58.8962 li
90.988 58.8962 li
93.408 63.0242 li
94.1148 68.2047 li
94.1148 64.2964 li
95.8838 70.6107 li
111.006 72.1185 li
116.544 69.3856 li
115.508 67.1237 li
121.201 69.197 li
124.743 67.5007 li
124.441 61.4483 li
126.063 67.2651 li
125.497 72.4615 li
127.052 68.2047 li
126.534 71.93 li
138.22 73.9091 li
142.781 72.7904 li
144.711 74.4987 146.687 76.1989 148.708 77.8875 cv
146.537 77.2076 li
154.218 82.4381 li
154.297 82.4223 li
155.139 83.0851 155.989 83.7451 156.847 84.4014 cv
157.163 94.2655 li
163.194 104.349 li
168.189 106.046 li
171.016 105.292 li
172.242 99.2602 li
172.106 95.0971 li
172.326 95.238 172.548 95.3788 172.769 95.519 cv
172.995 97.2812 li
171.441 111.088 li
163.665 111.911 li
157.069 116.318 li
156.409 132.528 li
160.838 143.931 li
165.645 144.606 li
168.378 139.784 li
166.87 145.91 li
168.66 153.196 li
172.053 153.196 li
173.844 151.753 li
175.864 141.156 li
174.126 155.16 li
164.655 157.355 li
170.31 157.355 li
174.438 162.083 li
170.168 159.145 li
160.179 162.874 li
158.482 180.275 li
161.498 192.277 li
170.639 193.125 li
174.975 185.021 li
173.372 191.052 li
174.692 191.9 li
175.864 191.429 li
177.322 186.641 li
174.841 198.352 li
152.076 198.357 li
154.901 152.854 li
154.901 152.854 li
151.791 101.619 li
153.487 82.8802 li
144.933 77.5458 li
116.167 77.5458 li
72.769 74.5563 li
56.2632 78.1424 li
53.5347 88.0427 li
55.5842 111.911 li
53.5347 159.145 li
55.5836 198.379 li
36.8551 198.383 li
154.406 183.466 mo
153.417 197.531 li
174.056 197.178 li
174.763 194.704 li
173.278 193.008 li
170.875 194.704 li
160.343 193.078 li
157.94 185.869 li
156.173 190.498 li
154.406 183.466 li
52.8368 160.777 mo
48.7372 165.795 li
46.2634 166.29 li
52.554 176.987 li
52.554 176.987 54.2895 190.049 54.3658 190.049 cv
54.367 190.049 54.3678 190.046 54.3682 190.039 cv
54.3917 189.615 53.5347 175.479 53.5347 175.479 cv
52.8368 160.777 li
154.406 134.483 mo
156.173 153.196 li
154.901 180.912 li
157.94 162.191 li
168.26 158.261 li
161.616 157.355 li
171.653 154.37 li
166.917 154.37 li
165.291 146.98 li
157.799 145.379 li
155.325 138.159 li
154.406 134.483 li
54.3682 125.035 mo
52.766 133.535 li
46.9701 136.474 li
51.0226 136.722 li
51.0226 137.265 li
48.8078 138.324 li
53.3315 141.589 li
54.3682 125.035 li
154.218 87.0087 mo
152.568 101.616 li
154.901 131.114 li
155.867 114.999 li
164.16 110.569 li
170.286 110.569 li
170.663 108.684 li
168.024 108.684 li
160.014 106.187 li
154.901 94.9252 li
154.901 92.3806 li
154.218 87.0087 li
46.7346 110.051 mo
53.5347 117.261 li
54.3682 111.465 li
53.1901 106.187 li
53.8027 111.088 li
52.9545 114.48 li
46.7346 110.051 li
43.4361 82.4852 mo
49.7032 83.9459 li
52.8603 86.2078 li
54.2739 80.883 li
50.3275 82.815 li
43.4361 82.4852 li
65.8422 67.0177 mo
65.4887 72.1421 li
57.5371 77.0898 li
69.5176 74.5563 li
65.8422 67.0177 li
140.27 76.595 mo
140.27 76.595 li
124.013 74.5563 li
124.437 69.3856 li
120.903 71.0111 li
117.44 75.1107 li
114.259 75.1814 li
95.8838 72.4955 li
93.62 71.0111 li
91.2875 74.5563 li
115.178 76.595 li
140.27 76.595 li
172.217 91.2129 mo
172.135 91.1624 172.055 91.1126 171.974 91.062 cv
171.898 88.7284 li
172.217 91.2129 li
157.787 81.421 mo
157.544 81.2423 157.304 81.0642 157.062 80.8849 cv
159.919 77.9616 li
161.899 74.8987 li
158.741 77.3019 li
153.572 78.2389 li
153.154 77.9166 152.74 77.5943 152.327 77.2706 cv
150.12 75.5407 147.964 73.7948 145.857 72.0358 cv
148.21 71.4588 li
157.728 74.5563 li
160.744 72.5897 li
161.309 70.9876 li
158.765 64.8619 li
163.913 72.9902 li
161.027 77.975 li
161.027 77.9748 li
161.027 77.975 li
161.027 77.975 li
157.787 81.421 li
161.027 77.975 mo
161.027 77.9748 li
161.027 77.975 li
.811765 .74902 .721569 rgb
f
152.076 198.357 mo
154.901 152.854 li
154.901 152.854 li
152.076 198.357 li
53.5347 159.145 mo
53.5347 159.145 li
55.5842 111.911 li
53.5347 159.145 li
55.5842 111.911 mo
53.5347 88.0427 li
56.2632 78.1424 li
72.769 74.5563 li
116.167 77.5458 li
144.933 77.5458 li
153.487 82.8802 li
144.933 77.5458 li
116.167 77.5458 li
72.769 74.5563 li
56.2633 78.1424 li
53.5349 88.0427 li
55.5842 111.911 li
151.791 101.619 mo
151.791 101.619 li
153.487 82.8802 li
151.791 101.619 li
.588235 .533333 .517647 rgb
f
40.1847 125.365 mo
32.0564 124.941 li
30.6427 117.508 li
35.3076 111.512 li
44.6377 111.088 li
51.5645 118.889 li
50.9283 122.78 li
46.0513 121.433 li
40.1847 125.365 li
.941176 .898039 .878431 rgb
f
35.7082 102.559 mo
34.2004 102.559 li
32.6924 90.0246 li
35.8967 84.0873 li
38.347 83.3177 li
47.3943 86.2549 li
47.7712 88.6109 li
39.0067 92.1921 li
35.7082 99.166 li
35.7082 102.559 li
f
40.898 78.2207 mo
40.2844 75.6372 li
40.898 69.2433 li
48.2285 62.7847 li
57.5289 62.494 li
60.3706 65.0452 li
54.1058 66.3046 li
47.8409 76.2832 li
40.898 78.2207 li
f
74.6141 68.2126 mo
66.5928 65.3776 li
67.63 60.0185 li
78.7631 58.0477 li
89.343 59.0158 li
89.6888 60.0185 li
86.9918 60.4334 li
83.3961 65.2393 li
74.6141 68.2126 li
f
52.8603 86.2078 mo
49.7032 83.9459 li
43.4361 82.4852 li
50.3275 82.815 li
54.2739 80.883 li
52.8603 86.2078 li
.721569 .666667 .643137 rgb
f
53.5347 117.261 mo
46.7346 110.051 li
52.9545 114.48 li
53.8027 111.088 li
53.1901 106.187 li
54.3682 111.465 li
53.5347 117.261 li
f
53.3315 141.589 mo
48.8078 138.324 li
51.0226 137.265 li
51.0226 136.722 li
46.9701 136.474 li
52.766 133.535 li
54.3682 125.035 li
53.3315 141.589 li
f
54.3658 190.049 mo
54.2895 190.049 52.554 176.987 52.554 176.987 cv
46.2634 166.29 li
48.7372 165.795 li
52.8368 160.777 li
53.5347 175.479 li
53.5347 175.479 54.3917 189.615 54.3682 190.039 cv
54.3678 190.046 54.367 190.049 54.3658 190.049 cv
f
57.5371 77.0898 mo
65.4887 72.1421 li
65.8422 67.0177 li
69.5176 74.5563 li
57.5371 77.0898 li
f
140.27 76.595 mo
115.178 76.595 li
91.2875 74.5563 li
93.62 71.0111 li
95.8838 72.4955 li
114.259 75.1814 li
117.44 75.1107 li
120.903 71.0111 li
124.437 69.3856 li
124.013 74.5563 li
140.27 76.595 li
f
154.218 82.4381 mo
146.537 77.2076 li
148.708 77.8875 li
149.33 78.4073 149.957 78.9258 150.587 79.4433 cv
151.807 80.4423 153.043 81.4354 154.297 82.4223 cv
154.218 82.4381 li
157.062 80.8849 mo
155.885 80.0096 154.721 79.1266 153.572 78.2389 cv
158.741 77.3019 li
161.899 74.8987 li
159.919 77.9616 li
157.062 80.8849 li
f
154.901 131.114 mo
152.568 101.616 li
154.218 87.0087 li
154.901 92.3806 li
154.901 94.9252 li
160.014 106.187 li
168.024 108.684 li
170.663 108.684 li
170.286 110.569 li
164.16 110.569 li
155.867 114.999 li
154.901 131.114 li
f
154.901 180.912 mo
156.173 153.196 li
154.406 134.483 li
155.325 138.159 li
157.799 145.379 li
165.291 146.98 li
166.917 154.37 li
171.653 154.37 li
161.616 157.355 li
168.26 158.261 li
157.94 162.191 li
154.901 180.912 li
f
153.417 197.531 mo
154.406 183.466 li
156.173 190.498 li
157.94 185.869 li
160.343 193.078 li
170.875 194.704 li
173.278 193.008 li
174.763 194.704 li
174.056 197.178 li
153.417 197.531 li
f
35.5198 150.082 mo
31.7252 146.98 li
33.4464 142.109 li
42.1167 139.6 li
45.2267 139.6 li
49.4675 141.589 li
50.3159 143.743 li
45.0381 143.282 li
35.5198 150.082 li
.941176 .898039 .878431 rgb
f
34.6244 190.049 mo
33.6113 189.78 li
32.0799 172.251 li
35.1427 168.104 li
43.9072 168.528 li
39.2894 169.047 li
36.2265 174.701 li
34.6244 190.049 li
f
99.2274 65.6629 mo
96.3531 62.6472 li
98.0965 58.7021 li
113.175 55.6261 li
115.779 56.1916 li
116.757 57.6523 li
115.154 59.2074 li
99.2274 65.6629 li
f
157.846 66.1342 mo
148.681 65.4273 li
138.414 65.587 li
136.839 64.1723 135.298 62.7537 133.789 61.3316 cv
137.43 60.4876 142.366 59.3488 142.485 59.3488 cv
142.485 59.3488 145.406 60.0085 145.877 60.1969 cv
146.348 60.3854 158.129 65.6629 158.129 65.6629 cv
157.846 66.1342 li
133.532 65.6629 mo
129.95 62.2231 li
129.95 62.2231 130.433 62.1106 131.21 61.9302 cv
132.453 63.1678 133.721 64.4047 135.011 65.6399 cv
133.532 65.6629 li
f
167.741 102.7 mo
164.066 101.098 li
158.6 92.8047 li
158.6 92.8047 158.538 87.9046 158.565 85.7028 cv
161.532 87.9292 164.59 90.1114 167.741 92.2343 cv
167.741 102.7 li
165.75 87.0329 mo
163.783 85.7103 161.85 84.3638 159.953 82.9991 cv
161.256 81.6177 163.029 79.9407 163.029 79.9407 cv
164.349 78.3621 li
164.255 83.1919 li
165.75 87.0329 li
f
165.079 143.07 mo
162.111 143.07 li
158.011 132.292 li
158.558 118.062 li
164.443 114.198 li
167.741 113.915 li
165.927 114.551 li
164.372 120.347 li
169.673 130.666 li
168.048 138.088 li
165.079 143.07 li
f
170.098 192.089 mo
162.676 191.311 li
160.485 179.013 li
162.111 163.816 li
169.32 160.494 li
174.409 163.604 li
172.077 163.18 li
169.673 173.005 li
174.409 184.172 li
170.098 192.089 li
f
107.86 197.41 mo
105.282 197.161 li
104.434 196.174 li
103.616 182.259 li
107.587 182.259 li
107.86 197.41 li
107.446 174.478 mo
103.445 174.478 li
103.445 164.318 li
103.445 164.016 103.766 142.657 104.066 122.78 cv
106.515 122.78 li
106.998 149.616 li
106.682 150.317 106.457 151.07 106.341 151.857 cv
106.341 151.858 li
106.34 151.865 106.339 151.873 106.338 151.881 cv
106.338 151.881 li
106.331 151.927 106.325 151.973 106.319 152.019 cv
106.319 152.02 106.319 152.02 106.319 152.021 cv
106.318 152.028 106.317 152.034 106.316 152.041 cv
106.316 152.042 106.316 152.044 106.315 152.045 cv
106.315 152.052 106.314 152.058 106.313 152.065 cv
106.313 152.066 106.313 152.068 106.312 152.069 cv
106.312 152.076 106.311 152.082 106.31 152.088 cv
106.31 152.09 106.31 152.092 106.309 152.094 cv
106.309 152.1 106.308 152.107 106.307 152.113 cv
106.307 152.114 106.307 152.115 106.307 152.115 cv
106.304 152.138 106.302 152.16 106.299 152.182 cv
106.299 152.183 106.299 152.183 106.299 152.184 cv
106.299 152.19 106.298 152.196 106.297 152.202 cv
106.297 152.204 106.297 152.207 106.297 152.209 cv
106.296 152.214 106.295 152.22 106.295 152.225 cv
106.295 152.228 106.294 152.231 106.294 152.234 cv
106.293 152.24 106.293 152.244 106.292 152.25 cv
106.292 152.253 106.292 152.256 106.291 152.259 cv
106.291 152.264 106.29 152.269 106.29 152.275 cv
106.29 152.278 106.289 152.281 106.289 152.284 cv
106.288 152.289 106.288 152.294 106.287 152.299 cv
106.287 152.302 106.287 152.305 106.287 152.308 cv
106.285 152.327 106.283 152.346 106.282 152.365 cv
106.281 152.368 106.281 152.37 106.281 152.372 cv
106.28 152.378 106.28 152.382 106.28 152.387 cv
106.279 152.391 106.279 152.394 106.279 152.398 cv
106.278 152.403 106.278 152.407 106.278 152.412 cv
106.277 152.416 106.277 152.419 106.277 152.423 cv
106.276 152.428 106.276 152.433 106.276 152.437 cv
106.275 152.441 106.275 152.445 106.275 152.449 cv
106.274 152.453 106.274 152.458 106.274 152.462 cv
106.273 152.466 106.273 152.47 106.273 152.474 cv
106.272 152.479 106.272 152.483 106.272 152.488 cv
106.271 152.492 106.271 152.496 106.271 152.5 cv
106.271 152.504 106.27 152.508 106.27 152.513 cv
106.27 152.517 106.269 152.522 106.269 152.527 cv
106.269 152.534 106.268 152.541 106.268 152.548 cv
106.267 152.553 106.267 152.558 106.267 152.563 cv
106.266 152.567 106.266 152.57 106.266 152.574 cv
106.266 152.579 106.265 152.583 106.265 152.588 cv
106.265 152.592 106.265 152.596 106.264 152.6 cv
106.264 152.604 106.264 152.609 106.264 152.614 cv
106.263 152.618 106.263 152.621 106.263 152.625 cv
106.263 152.63 106.262 152.635 106.262 152.64 cv
106.262 152.643 106.262 152.647 106.262 152.651 cv
106.261 152.656 106.261 152.661 106.261 152.666 cv
106.261 152.67 106.26 152.673 106.26 152.676 cv
106.26 152.682 106.26 152.687 106.259 152.693 cv
106.259 152.696 106.259 152.699 106.259 152.702 cv
106.259 152.709 106.258 152.716 106.258 152.722 cv
106.258 152.727 106.258 152.731 106.257 152.735 cv
106.257 152.741 106.257 152.747 106.257 152.753 cv
106.257 152.756 106.256 152.76 106.256 152.763 cv
106.256 152.769 106.256 152.773 106.256 152.779 cv
106.256 152.782 106.255 152.786 106.255 152.79 cv
106.255 152.795 106.255 152.799 106.255 152.804 cv
106.255 152.808 106.254 152.812 106.254 152.816 cv
106.254 152.821 106.254 152.826 106.254 152.831 cv
106.254 152.834 106.254 152.838 106.253 152.841 cv
106.253 152.846 106.253 152.852 106.253 152.857 cv
106.253 152.861 106.253 152.864 106.253 152.867 cv
106.253 152.873 106.252 152.879 106.252 152.885 cv
106.252 152.888 106.252 152.89 106.252 152.893 cv
106.252 152.901 106.252 152.91 106.251 152.918 cv
106.251 152.919 106.251 152.921 106.251 152.922 cv
106.251 152.929 106.251 152.937 106.251 152.944 cv
106.251 152.948 106.251 152.951 106.251 152.954 cv
106.251 152.959 106.251 152.965 106.25 152.97 cv
106.25 152.974 106.25 152.977 106.25 152.981 cv
106.25 152.986 106.25 152.991 106.25 152.996 cv
106.25 153 106.25 153.003 106.25 153.007 cv
106.25 153.012 106.25 153.017 106.25 153.022 cv
106.25 153.026 106.25 153.03 106.25 153.033 cv
106.25 153.039 106.25 153.044 106.25 153.049 cv
106.249 153.052 106.249 153.056 106.249 153.059 cv
106.249 153.065 106.249 153.071 106.249 153.077 cv
106.249 153.079 106.249 153.082 106.249 153.085 cv
106.249 153.094 106.249 153.102 106.249 153.111 cv
106.249 153.111 li
106.249 153.111 li
106.249 153.111 li
106.249 154.466 106.566 155.746 107.129 156.883 cv
107.446 174.478 li
106.375 114.999 mo
104.184 114.999 li
104.398 100.822 104.576 89.1123 104.576 89.1123 cv
105.989 87.6751 li
108.893 87.8427 li
106.115 100.574 li
106.375 114.999 li
.701961 .305882 .172549 rgb
f
126.063 86.3143 mo
126.063 86.0006 126.063 85.8257 126.063 85.8257 cv
131.152 85.8257 li
132.695 86.0862 li
126.063 86.3143 li
.662745 .27451 .141176 rgb
f
103.445 164.318 mo
103.445 122.78 li
104.066 122.78 li
103.766 142.657 103.445 164.016 103.445 164.318 cv
104.184 114.999 mo
103.445 114.999 li
103.445 85.8257 li
114.754 85.8257 li
114.754 86.7033 li
109.1 86.8978 li
108.893 87.8427 li
105.989 87.6751 li
104.576 89.1123 li
104.576 89.1123 104.398 100.822 104.184 114.999 cv
.623529 .247059 .133333 rgb
f
114.754 86.7033 mo
114.754 85.8257 li
126.063 85.8257 li
126.063 86.3143 li
114.754 86.7033 li
.67451 .278431 .156863 rgb
f
126.063 86.3143 mo
126.063 85.8257 li
126.063 85.8257 126.063 86.0006 126.063 86.3143 cv
126.063 86.3143 li
.592157 .219608 .109804 rgb
f
132.695 86.0862 mo
131.152 85.8257 li
137.372 85.8257 li
137.372 85.9253 li
132.695 86.0862 li
f
137.372 85.9253 mo
137.372 85.8257 li
140.27 85.8257 li
137.372 85.9253 li
.623529 .247059 .133333 rgb
f
103.445 198.368 mo
103.445 182.259 li
103.616 182.259 li
104.434 196.174 li
105.282 197.161 li
107.86 197.41 li
107.877 198.367 li
103.445 198.368 li
f
106.491 121.468 mo
103.445 121.433 li
103.445 115.822 li
106.39 115.856 li
106.491 121.468 li
.0941176 .152941 .160784 rgb
f
106.39 115.856 mo
103.445 115.822 li
103.445 114.999 li
106.375 114.999 li
106.39 115.856 li
.121569 .196078 .203922 rgb
f
106.515 122.78 mo
104.066 122.78 li
103.445 122.78 li
103.445 121.433 li
106.491 121.468 li
106.515 122.78 li
.0666667 .105882 .113725 rgb
f
107.563 180.96 mo
103.445 180.912 li
103.445 175.301 li
107.462 175.347 li
107.498 177.333 li
107.305 177.631 107.193 177.987 107.193 178.368 cv
107.193 178.774 107.32 179.151 107.536 179.46 cv
107.563 180.96 li
.0941176 .152941 .160784 rgb
f
107.462 175.347 mo
103.445 175.301 li
103.445 174.478 li
107.446 174.478 li
107.462 175.347 li
.121569 .196078 .203922 rgb
f
107.587 182.259 mo
103.616 182.259 li
103.445 182.259 li
103.445 180.912 li
107.563 180.96 li
107.587 182.259 li
.0666667 .105882 .113725 rgb
f
107.536 179.46 mo
107.32 179.151 107.193 178.774 107.193 178.368 cv
107.193 177.987 107.305 177.631 107.498 177.333 cv
107.536 179.46 li
.121569 .196078 .203922 rgb
f
107.098 155.132 mo
106.843 154.348 106.705 153.511 106.705 152.642 cv
106.705 151.875 106.813 151.133 107.013 150.43 cv
107.098 155.132 li
106.249 153.085 mo
106.249 153.082 106.249 153.079 106.249 153.077 cv
106.249 153.08 106.249 153.082 106.249 153.085 cv
106.249 153.059 mo
106.249 153.056 106.249 153.052 106.25 153.049 cv
106.249 153.052 106.249 153.056 106.249 153.059 cv
106.25 153.033 mo
106.25 153.03 106.25 153.026 106.25 153.022 cv
106.25 153.026 106.25 153.03 106.25 153.033 cv
106.25 153.007 mo
106.25 153.003 106.25 153 106.25 152.996 cv
106.25 153 106.25 153.004 106.25 153.007 cv
106.25 152.981 mo
106.25 152.977 106.25 152.974 106.25 152.97 cv
106.25 152.974 106.25 152.977 106.25 152.981 cv
106.251 152.954 mo
106.251 152.951 106.251 152.948 106.251 152.944 cv
106.251 152.948 106.251 152.95 106.251 152.954 cv
106.251 152.922 mo
106.251 152.921 106.251 152.919 106.251 152.918 cv
106.251 152.919 106.251 152.921 106.251 152.922 cv
106.252 152.893 mo
106.252 152.89 106.252 152.888 106.252 152.885 cv
106.252 152.888 106.252 152.89 106.252 152.893 cv
106.253 152.867 mo
106.253 152.864 106.253 152.861 106.253 152.857 cv
106.253 152.861 106.253 152.864 106.253 152.867 cv
106.253 152.841 mo
106.254 152.838 106.254 152.834 106.254 152.831 cv
106.254 152.834 106.254 152.838 106.253 152.841 cv
106.254 152.816 mo
106.254 152.812 106.255 152.808 106.255 152.804 cv
106.255 152.808 106.254 152.812 106.254 152.816 cv
106.255 152.79 mo
106.255 152.786 106.256 152.782 106.256 152.779 cv
106.256 152.782 106.255 152.786 106.255 152.79 cv
106.256 152.763 mo
106.256 152.76 106.257 152.756 106.257 152.753 cv
106.257 152.756 106.256 152.76 106.256 152.763 cv
106.257 152.735 mo
106.258 152.731 106.258 152.727 106.258 152.722 cv
106.258 152.727 106.258 152.731 106.257 152.735 cv
106.259 152.702 mo
106.259 152.699 106.259 152.696 106.259 152.693 cv
106.259 152.696 106.259 152.699 106.259 152.702 cv
106.26 152.676 mo
106.26 152.673 106.261 152.67 106.261 152.666 cv
106.261 152.67 106.26 152.673 106.26 152.676 cv
106.262 152.651 mo
106.262 152.647 106.262 152.643 106.262 152.64 cv
106.262 152.643 106.262 152.647 106.262 152.651 cv
106.263 152.625 mo
106.263 152.621 106.263 152.618 106.264 152.614 cv
106.263 152.618 106.263 152.621 106.263 152.625 cv
106.264 152.6 mo
106.265 152.596 106.265 152.592 106.265 152.588 cv
106.265 152.592 106.265 152.596 106.264 152.6 cv
106.266 152.574 mo
106.266 152.57 106.266 152.567 106.267 152.563 cv
106.266 152.566 106.266 152.57 106.266 152.574 cv
106.268 152.548 mo
106.268 152.541 106.269 152.534 106.269 152.527 cv
106.269 152.534 106.268 152.541 106.268 152.548 cv
106.27 152.513 mo
106.27 152.508 106.271 152.504 106.271 152.5 cv
106.271 152.504 106.27 152.508 106.27 152.513 cv
106.272 152.488 mo
106.272 152.483 106.272 152.479 106.273 152.474 cv
106.272 152.479 106.272 152.483 106.272 152.488 cv
106.274 152.462 mo
106.274 152.458 106.274 152.453 106.275 152.449 cv
106.274 152.453 106.274 152.457 106.274 152.462 cv
106.276 152.437 mo
106.276 152.433 106.276 152.428 106.277 152.423 cv
106.276 152.428 106.276 152.433 106.276 152.437 cv
106.278 152.412 mo
106.278 152.407 106.278 152.403 106.279 152.398 cv
106.278 152.403 106.278 152.407 106.278 152.412 cv
106.28 152.387 mo
106.28 152.382 106.28 152.378 106.281 152.372 cv
106.28 152.377 106.28 152.383 106.28 152.387 cv
106.282 152.365 mo
106.283 152.346 106.285 152.327 106.287 152.308 cv
106.285 152.327 106.283 152.346 106.282 152.365 cv
106.287 152.299 mo
106.288 152.294 106.288 152.289 106.289 152.284 cv
106.289 152.289 106.288 152.294 106.287 152.299 cv
106.29 152.275 mo
106.29 152.269 106.291 152.264 106.291 152.259 cv
106.291 152.264 106.29 152.27 106.29 152.275 cv
106.292 152.25 mo
106.293 152.244 106.293 152.24 106.294 152.234 cv
106.293 152.239 106.293 152.244 106.292 152.25 cv
106.295 152.225 mo
106.295 152.22 106.296 152.214 106.297 152.209 cv
106.296 152.214 106.295 152.22 106.295 152.225 cv
106.297 152.202 mo
106.298 152.196 106.299 152.19 106.299 152.184 cv
106.299 152.19 106.298 152.196 106.297 152.202 cv
106.299 152.182 mo
106.302 152.16 106.304 152.138 106.307 152.115 cv
106.304 152.137 106.302 152.16 106.299 152.182 cv
106.307 152.113 mo
106.308 152.107 106.309 152.1 106.309 152.094 cv
106.309 152.1 106.308 152.107 106.307 152.113 cv
106.31 152.088 mo
106.311 152.082 106.312 152.076 106.312 152.069 cv
106.312 152.076 106.311 152.082 106.31 152.088 cv
106.313 152.065 mo
106.314 152.058 106.315 152.052 106.315 152.045 cv
106.315 152.052 106.314 152.058 106.313 152.065 cv
106.316 152.041 mo
106.317 152.034 106.318 152.028 106.319 152.021 cv
106.318 152.027 106.317 152.034 106.316 152.041 cv
106.319 152.019 mo
106.325 151.973 106.331 151.927 106.338 151.881 cv
106.331 151.927 106.325 151.973 106.319 152.019 cv
106.338 151.881 mo
106.339 151.873 106.34 151.865 106.341 151.858 cv
106.34 151.865 106.339 151.873 106.338 151.881 cv
106.341 151.857 mo
106.457 151.07 106.682 150.317 106.998 149.616 cv
106.998 149.616 li
106.682 150.318 106.457 151.07 106.341 151.857 cv
f
106.249 153.111 mo
106.249 153.102 106.249 153.094 106.249 153.085 cv
106.249 153.094 106.249 153.102 106.249 153.111 cv
106.249 153.077 mo
106.249 153.071 106.249 153.065 106.249 153.059 cv
106.249 153.065 106.249 153.071 106.249 153.077 cv
106.25 153.049 mo
106.25 153.044 106.25 153.039 106.25 153.033 cv
106.25 153.038 106.25 153.044 106.25 153.049 cv
106.25 153.022 mo
106.25 153.017 106.25 153.012 106.25 153.007 cv
106.25 153.012 106.25 153.017 106.25 153.022 cv
106.25 152.996 mo
106.25 152.991 106.25 152.986 106.25 152.981 cv
106.25 152.986 106.25 152.991 106.25 152.996 cv
106.25 152.97 mo
106.251 152.965 106.251 152.959 106.251 152.954 cv
106.251 152.959 106.251 152.965 106.25 152.97 cv
106.251 152.944 mo
106.251 152.937 106.251 152.929 106.251 152.922 cv
106.251 152.93 106.251 152.937 106.251 152.944 cv
106.251 152.918 mo
106.252 152.91 106.252 152.901 106.252 152.893 cv
106.252 152.901 106.252 152.91 106.251 152.918 cv
106.252 152.885 mo
106.252 152.879 106.253 152.873 106.253 152.867 cv
106.253 152.873 106.252 152.879 106.252 152.885 cv
106.253 152.857 mo
106.253 152.852 106.253 152.846 106.253 152.841 cv
106.253 152.847 106.253 152.852 106.253 152.857 cv
106.254 152.831 mo
106.254 152.826 106.254 152.821 106.254 152.816 cv
106.254 152.821 106.254 152.826 106.254 152.831 cv
106.255 152.804 mo
106.255 152.799 106.255 152.795 106.255 152.79 cv
106.255 152.794 106.255 152.8 106.255 152.804 cv
106.256 152.779 mo
106.256 152.773 106.256 152.769 106.256 152.763 cv
106.256 152.768 106.256 152.774 106.256 152.779 cv
106.257 152.753 mo
106.257 152.747 106.257 152.741 106.257 152.735 cv
106.257 152.741 106.257 152.747 106.257 152.753 cv
106.258 152.722 mo
106.258 152.716 106.259 152.709 106.259 152.702 cv
106.259 152.709 106.258 152.715 106.258 152.722 cv
106.259 152.693 mo
106.26 152.687 106.26 152.682 106.26 152.676 cv
106.26 152.682 106.26 152.687 106.259 152.693 cv
106.261 152.666 mo
106.261 152.661 106.261 152.656 106.262 152.651 cv
106.261 152.656 106.261 152.661 106.261 152.666 cv
106.262 152.64 mo
106.262 152.635 106.263 152.63 106.263 152.625 cv
106.263 152.63 106.262 152.635 106.262 152.64 cv
106.264 152.614 mo
106.264 152.609 106.264 152.604 106.264 152.6 cv
106.264 152.605 106.264 152.609 106.264 152.614 cv
106.265 152.588 mo
106.265 152.583 106.266 152.579 106.266 152.574 cv
106.266 152.578 106.265 152.583 106.265 152.588 cv
106.267 152.563 mo
106.267 152.558 106.267 152.553 106.268 152.548 cv
106.267 152.553 106.267 152.558 106.267 152.563 cv
106.269 152.527 mo
106.269 152.522 106.27 152.517 106.27 152.513 cv
106.27 152.518 106.269 152.522 106.269 152.527 cv
106.271 152.5 mo
106.271 152.496 106.271 152.492 106.272 152.488 cv
106.271 152.492 106.271 152.496 106.271 152.5 cv
106.273 152.474 mo
106.273 152.47 106.273 152.466 106.274 152.462 cv
106.273 152.466 106.273 152.47 106.273 152.474 cv
106.275 152.449 mo
106.275 152.445 106.275 152.441 106.276 152.437 cv
106.275 152.441 106.275 152.445 106.275 152.449 cv
106.277 152.423 mo
106.277 152.419 106.277 152.416 106.278 152.412 cv
106.277 152.416 106.277 152.419 106.277 152.423 cv
106.279 152.398 mo
106.279 152.394 106.279 152.391 106.28 152.387 cv
106.279 152.391 106.279 152.395 106.279 152.398 cv
106.281 152.372 mo
106.281 152.37 106.281 152.368 106.282 152.365 cv
106.281 152.368 106.281 152.37 106.281 152.372 cv
106.287 152.308 mo
106.287 152.305 106.287 152.302 106.287 152.299 cv
106.287 152.302 106.287 152.305 106.287 152.308 cv
106.289 152.284 mo
106.289 152.281 106.29 152.278 106.29 152.275 cv
106.29 152.277 106.289 152.281 106.289 152.284 cv
106.291 152.259 mo
106.292 152.256 106.292 152.253 106.292 152.25 cv
106.292 152.253 106.292 152.256 106.291 152.259 cv
106.294 152.234 mo
106.294 152.231 106.295 152.228 106.295 152.225 cv
106.295 152.228 106.294 152.232 106.294 152.234 cv
106.297 152.209 mo
106.297 152.207 106.297 152.204 106.297 152.202 cv
106.297 152.204 106.297 152.207 106.297 152.209 cv
106.299 152.184 mo
106.299 152.183 106.299 152.183 106.299 152.182 cv
106.299 152.183 106.299 152.183 106.299 152.184 cv
106.307 152.115 mo
106.307 152.115 106.307 152.114 106.307 152.113 cv
106.307 152.114 106.307 152.114 106.307 152.115 cv
106.309 152.094 mo
106.31 152.092 106.31 152.09 106.31 152.088 cv
106.31 152.09 106.31 152.092 106.309 152.094 cv
106.312 152.069 mo
106.313 152.068 106.313 152.066 106.313 152.065 cv
106.313 152.066 106.313 152.068 106.312 152.069 cv
106.315 152.045 mo
106.316 152.044 106.316 152.042 106.316 152.041 cv
106.316 152.042 106.316 152.044 106.315 152.045 cv
106.319 152.021 mo
106.319 152.02 106.319 152.02 106.319 152.019 cv
106.319 152.019 106.319 152.02 106.319 152.021 cv
106.338 151.881 mo
106.338 151.881 li
106.338 151.881 106.338 151.881 106.338 151.881 cv
106.341 151.858 mo
106.341 151.857 li
106.341 151.858 106.341 151.857 106.341 151.858 cv
.623529 .247059 .133333 rgb
f
107.129 156.883 mo
106.566 155.746 106.249 154.466 106.249 153.111 cv
106.249 153.111 li
106.249 153.102 106.249 153.094 106.249 153.085 cv
106.249 153.082 106.249 153.08 106.249 153.077 cv
106.249 153.071 106.249 153.065 106.249 153.059 cv
106.249 153.056 106.249 153.052 106.25 153.049 cv
106.25 153.044 106.25 153.038 106.25 153.033 cv
106.25 153.03 106.25 153.026 106.25 153.022 cv
106.25 153.017 106.25 153.012 106.25 153.007 cv
106.25 153.004 106.25 153 106.25 152.996 cv
106.25 152.991 106.25 152.986 106.25 152.981 cv
106.25 152.977 106.25 152.974 106.25 152.97 cv
106.251 152.965 106.251 152.959 106.251 152.954 cv
106.251 152.95 106.251 152.948 106.251 152.944 cv
106.251 152.937 106.251 152.93 106.251 152.922 cv
106.251 152.921 106.251 152.919 106.251 152.918 cv
106.252 152.91 106.252 152.901 106.252 152.893 cv
106.252 152.89 106.252 152.888 106.252 152.885 cv
106.252 152.879 106.253 152.873 106.253 152.867 cv
106.253 152.864 106.253 152.861 106.253 152.857 cv
106.253 152.852 106.253 152.847 106.253 152.841 cv
106.254 152.838 106.254 152.834 106.254 152.831 cv
106.254 152.826 106.254 152.821 106.254 152.816 cv
106.254 152.812 106.255 152.808 106.255 152.804 cv
106.255 152.8 106.255 152.794 106.255 152.79 cv
106.255 152.786 106.256 152.782 106.256 152.779 cv
106.256 152.774 106.256 152.768 106.256 152.763 cv
106.256 152.76 106.257 152.756 106.257 152.753 cv
106.257 152.747 106.257 152.741 106.257 152.735 cv
106.258 152.731 106.258 152.727 106.258 152.722 cv
106.258 152.715 106.259 152.709 106.259 152.702 cv
106.259 152.699 106.259 152.696 106.259 152.693 cv
106.26 152.687 106.26 152.682 106.26 152.676 cv
106.26 152.673 106.261 152.67 106.261 152.666 cv
106.261 152.661 106.261 152.656 106.262 152.651 cv
106.262 152.647 106.262 152.643 106.262 152.64 cv
106.262 152.635 106.263 152.63 106.263 152.625 cv
106.263 152.621 106.263 152.618 106.264 152.614 cv
106.264 152.609 106.264 152.605 106.264 152.6 cv
106.265 152.596 106.265 152.592 106.265 152.588 cv
106.265 152.583 106.266 152.578 106.266 152.574 cv
106.266 152.57 106.266 152.566 106.267 152.563 cv
106.267 152.558 106.267 152.553 106.268 152.548 cv
106.268 152.541 106.269 152.534 106.269 152.527 cv
106.269 152.522 106.27 152.518 106.27 152.513 cv
106.27 152.508 106.271 152.504 106.271 152.5 cv
106.271 152.496 106.271 152.492 106.272 152.488 cv
106.272 152.483 106.272 152.479 106.273 152.474 cv
106.273 152.47 106.273 152.466 106.274 152.462 cv
106.274 152.457 106.274 152.453 106.275 152.449 cv
106.275 152.445 106.275 152.441 106.276 152.437 cv
106.276 152.433 106.276 152.428 106.277 152.423 cv
106.277 152.419 106.277 152.416 106.278 152.412 cv
106.278 152.407 106.278 152.403 106.279 152.398 cv
106.279 152.395 106.279 152.391 106.28 152.387 cv
106.28 152.383 106.28 152.377 106.281 152.372 cv
106.281 152.37 106.281 152.368 106.282 152.365 cv
106.283 152.346 106.285 152.327 106.287 152.308 cv
106.287 152.305 106.287 152.302 106.287 152.299 cv
106.288 152.294 106.289 152.289 106.289 152.284 cv
106.289 152.281 106.29 152.277 106.29 152.275 cv
106.29 152.27 106.291 152.264 106.291 152.259 cv
106.292 152.256 106.292 152.253 106.292 152.25 cv
106.293 152.244 106.293 152.239 106.294 152.234 cv
106.294 152.232 106.295 152.228 106.295 152.225 cv
106.295 152.22 106.296 152.214 106.297 152.209 cv
106.297 152.207 106.297 152.204 106.297 152.202 cv
106.298 152.196 106.299 152.19 106.299 152.184 cv
106.299 152.183 106.299 152.183 106.299 152.182 cv
106.302 152.16 106.304 152.137 106.307 152.115 cv
106.307 152.114 106.307 152.114 106.307 152.113 cv
106.308 152.107 106.309 152.1 106.309 152.094 cv
106.31 152.092 106.31 152.09 106.31 152.088 cv
106.311 152.082 106.312 152.076 106.312 152.069 cv
106.313 152.068 106.313 152.066 106.313 152.065 cv
106.314 152.058 106.315 152.052 106.315 152.045 cv
106.316 152.044 106.316 152.042 106.316 152.041 cv
106.317 152.034 106.318 152.027 106.319 152.021 cv
106.319 152.02 106.319 152.019 106.319 152.019 cv
106.325 151.973 106.331 151.927 106.338 151.881 cv
106.338 151.881 106.338 151.881 106.338 151.881 cv
106.339 151.873 106.34 151.865 106.341 151.858 cv
106.341 151.857 106.341 151.858 106.341 151.857 cv
106.457 151.07 106.682 150.318 106.998 149.616 cv
107.013 150.43 li
106.813 151.133 106.705 151.875 106.705 152.642 cv
106.705 153.511 106.843 154.348 107.098 155.132 cv
107.129 156.883 li
.109804 .156863 .156863 rgb
f
306.081 320.784 mo
219.928 403.361 li
219.928 421.276 li
232.308 421.276 li
240.219 403.361 li
334.251 320.784 li
306.081 320.784 li
.447059 .533333 .619608 rgb
f
318.117 320.784 mo
231.965 403.361 li
231.965 421.276 li
244.344 421.276 li
252.256 403.361 li
346.288 320.784 li
318.117 320.784 li
.266667 .321569 .380392 rgb
f
379.289 336.035 mo
325.04 336.035 li
327.783 320.784 li
379.289 320.784 li
379.289 336.035 li
.960784 .521569 .341176 rgb
f
371.713 351.06 mo
306.389 351.06 li
309.132 336.035 li
371.713 336.035 li
371.713 351.06 li
.839216 .411765 .235294 rgb
f
366.72 367.531 mo
290.999 367.531 li
293.741 351.06 li
366.72 351.06 li
366.72 367.531 li
.890196 .462745 .286275 rgb
f
361.543 385.446 mo
271.581 385.446 li
274.324 367.531 li
361.543 367.531 li
361.543 385.446 li
.960784 .521569 .341176 rgb
f
352.843 403.361 mo
252.256 403.361 li
254.998 385.446 li
352.843 385.446 li
352.843 403.361 li
.839216 .411765 .235294 rgb
f
343.453 421.276 mo
236.181 421.276 li
238.924 403.361 li
343.453 403.361 li
343.453 421.276 li
.890196 .462745 .286275 rgb
f
377.758 320.784 mo
341.923 403.361 li
341.923 421.276 li
354.303 421.276 li
354.303 403.361 li
390.138 320.784 li
377.758 320.784 li
.447059 .533333 .619608 rgb
f
394.885 320.784 mo
394.885 450 li
354.303 450 li
354.303 403.361 li
390.138 320.784 li
394.885 320.784 li
.266667 .321569 .380392 rgb
f
201.438 198.346 mo
298.585 291.919 li
298.585 309.834 li
286.205 309.834 li
278.294 291.919 li
184.262 209.341 li
201.438 198.346 li
.447059 .533333 .619608 rgb
f
200.396 209.341 mo
286.549 291.919 li
286.549 309.834 li
274.169 309.834 li
266.258 291.919 li
172.226 209.341 li
200.396 209.341 li
.266667 .321569 .380392 rgb
f
139.225 224.592 mo
193.473 224.592 li
190.73 209.341 li
139.225 209.341 li
139.225 224.592 li
.960784 .521569 .341176 rgb
f
146.8 239.618 mo
212.124 239.618 li
209.381 224.592 li
146.8 224.592 li
146.8 239.618 li
.839216 .411765 .235294 rgb
f
151.793 256.088 mo
227.515 256.088 li
224.772 239.618 li
151.793 239.618 li
151.793 256.088 li
.890196 .462745 .286275 rgb
f
156.97 274.003 mo
246.932 274.003 li
244.189 256.088 li
156.97 256.088 li
156.97 274.003 li
.960784 .521569 .341176 rgb
f
165.671 291.919 mo
266.258 291.919 li
263.515 274.003 li
165.671 274.003 li
165.671 291.919 li
.839216 .411765 .235294 rgb
f
175.06 309.834 mo
282.332 309.834 li
279.589 291.919 li
175.06 291.919 li
175.06 309.834 li
.890196 .462745 .286275 rgb
f
140.755 209.341 mo
176.591 291.919 li
176.591 309.834 li
164.211 309.834 li
164.211 291.919 li
128.375 209.341 li
140.755 209.341 li
.447059 .533333 .619608 rgb
f
123.628 209.341 mo
123.628 450 li
164.211 450 li
164.211 291.919 li
128.375 209.341 li
123.628 209.341 li
.266667 .321569 .380392 rgb
f
450 320.784 mo
164.211 320.784 li
164.211 309.834 li
450 309.834 li
450 320.784 li
.447059 .533333 .619608 rgb
f
354.303 450 mo
0 450 li
0 421.276 li
354.303 421.276 li
354.303 450 li
f
212.124 209.341 mo
0 209.341 li
0 198.391 li
201.438 198.346 li
212.124 209.341 li
f
64.6046 256.637 mo
37.0756 259.708 li
34.5756 268.98 li
39.3043 283.124 li
74.0839 285.811 li
82.4855 277.671 li
81.1454 262.395 li
74.0839 256.637 li
64.6046 256.637 li
cp
.403922 .482353 .560784 rgb
f
39.4871 287.214 mo
25.3355 288.442 li
23.7011 299.344 li
26.0784 311.474 li
48.814 313.317 li
60.0291 308.952 li
60.0291 294.584 li
55.5354 287.828 li
39.4871 287.214 li
.309804 .372549 .439216 rgb
f
190.005 378.238 mo
213.557 375.696 li
215.696 368.02 li
211.651 356.31 li
181.895 354.086 li
174.707 360.824 li
175.854 373.471 li
181.895 378.238 li
190.005 378.238 li
.403922 .482353 .560784 rgb
f
211.494 351.174 mo
223.602 350.157 li
225 341.132 li
222.966 331.089 li
203.515 329.564 li
193.92 333.178 li
193.92 345.073 li
197.764 350.666 li
211.494 351.174 li
cp
.309804 .372549 .439216 rgb
f
83.7031 326.039 mo
61.7436 329.886 li
60.5846 343.099 li
82.0589 346.498 li
98.754 341.998 li
95.6508 330.712 li
83.7031 326.039 li
.403922 .482353 .560784 rgb
f
72.1271 347.779 mo
59.2083 346.498 li
41.0954 353.697 li
41.0954 361.542 li
53.7478 364.535 li
71.0616 364.535 li
77.188 362.918 li
79.8178 355.517 li
77.7207 348.742 li
72.1271 347.779 li
.309804 .372549 .439216 rgb
f
429.879 394.561 mo
415.113 398.899 li
414.334 413.798 li
428.774 417.63 li
440 412.556 li
437.913 399.83 li
429.879 394.561 li
f
422.095 419.074 mo
413.409 417.63 li
401.229 425.748 li
401.229 434.594 li
409.737 437.969 li
421.379 437.969 li
425.499 436.146 li
427.267 427.8 li
425.857 420.161 li
422.095 419.074 li
.403922 .482353 .560784 rgb
f
98.4077 389.354 mo
83.6626 396.363 li
81.8932 410.077 li
86.0219 414.039 li
103.421 414.039 li
107.845 406.725 li
105.78 394.403 li
98.4077 389.354 li
f
418.278 345.949 mo
404.684 349.501 li
403.053 356.452 li
406.859 358.46 li
422.9 358.46 li
426.978 354.753 li
425.074 348.508 li
418.278 345.949 li
f
37.7325 385.446 mo
24.5785 388.998 li
23 395.949 li
26.6832 397.957 li
42.2049 397.957 li
46.1511 394.25 li
44.3095 388.005 li
37.7325 385.446 li
.309804 .372549 .439216 rgb
f
207.057 399.381 mo
196.888 404.058 li
195.668 413.21 li
198.515 415.854 li
210.514 415.854 li
213.564 410.973 li
212.141 402.751 li
207.057 399.381 li
cp
.403922 .482353 .560784 rgb
f
92.4529 223.869 mo
82.6133 228.546 li
81.4325 237.698 li
84.1876 240.342 li
95.7983 240.342 li
98.7502 235.461 li
97.3727 227.239 li
92.4529 223.869 li
cp
.309804 .372549 .439216 rgb
f
255.426 369.336 mo
280.517 345.287 li
258.371 345.773 li
250.142 351.174 li
247.095 362.687 li
249.685 367.531 li
255.426 369.336 li
f
420.347 307.639 mo
421.883 283.529 li
421.883 283.528 li
416.898 280.69 li
414.973 280.285 li
422.239 277.953 li
424.016 250.063 li
420.477 247.697 li
415.007 247.089 li
420.883 246.549 li
424.385 244.269 li
426.392 212.782 li
424.26 209.335 li
419.667 208.254 li
424.192 208.119 li
426.74 207.316 li
427.231 199.609 li
418.857 178.537 li
412.317 177.64 li
409.604 180.563 li
408.118 184.953 li
408.664 181.373 li
408.664 177.139 li
378.354 172.982 li
376.307 176.983 li
375.496 180.631 li
375.496 176.781 li
374.484 172.451 li
371.579 172.053 li
348.21 175.258 li
347.197 181.103 li
348.21 184.278 li
346.859 181.306 li
342.763 176.005 li
324.301 178.537 li
318.798 192.383 li
318.798 192.383 li
319.168 194.679 li
321.735 197.38 li
323.153 197.921 li
321.87 197.921 li
315.926 199.609 li
317.67 226.972 li
317.67 226.972 li
322.613 229.327 li
329.569 229.732 li
322.207 230.61 li
318.034 232.69 li
319.709 258.961 li
320.114 260.462 li
324.301 261.881 li
331.663 261.881 li
322.883 263.029 li
320.05 264.312 li
320.05 264.312 li
321.387 285.3 li
324.234 289.031 li
328.556 289.774 li
324.031 289.774 li
321.715 290.451 li
322.813 307.672 li
325.314 309.834 li
335.648 309.834 li
371.579 309.834 li
413.352 309.834 li
420.347 307.639 li
.909804 .843137 .811765 rgb
f
420.347 307.639 mo
420.599 303.682 li
420.599 303.682 li
420.347 307.639 li
420.347 307.639 li
.321569 .380392 .443137 rgb
f
328.556 289.774 mo
328.556 289.774 li
324.234 289.031 li
322.522 286.788 li
324.234 289.031 li
328.556 289.774 li
414.973 280.285 mo
414.973 280.285 li
422.239 277.953 li
423.435 259.179 li
423.435 259.178 li
422.239 277.953 li
414.973 280.285 li
320.93 263.913 mo
322.883 263.029 li
320.93 263.913 li
320.93 263.913 li
331.663 261.881 mo
324.301 261.881 li
320.771 260.685 li
320.772 260.685 li
324.301 261.881 li
331.663 261.881 li
415.007 247.089 mo
415.007 247.089 li
420.883 246.549 li
424.385 244.269 li
425.699 223.655 li
425.699 223.654 li
425.318 229.629 li
424.385 244.269 li
420.883 246.549 li
415.007 247.089 li
317.144 218.718 mo
315.926 199.609 li
317.144 218.718 li
317.144 218.718 li
375.496 176.781 mo
374.735 173.527 li
374.735 173.527 li
375.496 176.781 li
f
335.648 309.834 mo
335.648 309.834 li
325.314 309.834 li
322.813 307.672 li
322.287 299.425 li
323.389 306.727 li
326.631 307.943 li
331.798 304.629 li
331.494 292.341 li
329.063 290.923 li
324.909 289.774 li
328.556 289.774 li
324.234 289.031 li
322.522 286.788 li
324.504 288.086 li
330.38 286.788 li
331.697 272.991 li
329.468 278.968 li
331.393 270.357 li
328.961 265.494 li
323.896 263.67 li
320.93 263.913 li
322.883 263.029 li
331.663 261.881 li
324.301 261.881 li
320.772 260.685 li
324.2 261.138 li
330.481 259.247 li
331.325 254.147 li
330.38 255.768 li
331.646 244.979 li
329.569 237.887 li
325.568 232.163 li
321.971 231.454 li
318.034 232.69 li
322.207 230.61 li
329.569 229.732 li
333.081 224.531 li
332.879 203.121 li
323.153 200.42 li
318.034 201.568 li
317.144 218.718 li
315.926 199.609 li
321.87 197.921 li
323.153 197.921 li
321.735 197.38 li
319.168 194.679 li
323.423 196.772 li
335.648 193.801 li
341.119 188.735 li
334.5 192.518 li
341.389 186.912 li
343.01 180.225 li
341.726 176.983 li
335.033 177.065 li
342.763 176.005 li
346.859 181.306 li
348.21 184.278 li
353.681 186.642 li
369.89 184.21 li
360.502 184.143 li
372.93 181.981 li
374.483 178.537 li
374.735 173.527 li
375.496 176.781 li
375.496 180.631 li
376.307 176.983 li
378.075 173.528 li
377.049 177.051 li
381.642 186.642 li
398.122 190.626 li
405.484 185.628 li
407.172 181.238 li
407.172 177.591 li
395.124 175.282 li
408.664 177.139 li
408.664 181.373 li
408.118 184.953 li
408.118 184.953 li
408.118 184.953 li
409.101 182.049 li
409.604 180.563 li
411.751 178.249 li
410.211 180.901 li
410.009 190.289 li
418.181 203.661 li
423.719 204.404 li
425.745 202.851 li
426.218 198.934 li
423.373 189.901 li
427.231 199.609 li
426.74 207.316 li
424.192 208.119 li
419.667 208.254 li
413.791 211.834 li
415.615 237.904 li
417.236 239.525 li
416.56 225.477 li
418.114 240.2 li
422.166 242.429 li
423.584 242.092 li
425.699 223.655 li
424.385 244.269 li
420.883 246.549 li
415.007 247.089 li
409.874 249.183 li
408.996 260.057 li
411.495 275.456 li
415.547 277.28 li
420.612 276.807 li
421.491 275.186 li
423.435 259.179 li
422.239 277.953 li
414.973 280.285 li
411.63 285.654 li
414.129 305.781 li
416.628 306.727 li
418.857 306.457 li
420.207 291.193 li
419.802 303.823 li
420.599 303.682 li
420.347 307.639 li
413.352 309.833 li
407.51 309.833 li
407.51 199.609 li
335.648 199.609 li
335.648 309.834 li
408.32 297.541 mo
408.32 309.091 li
413.116 309.327 li
417.438 307.841 li
415.547 307.841 li
413.048 306.018 li
411.528 294.772 li
411.056 299.331 li
409.232 303.586 li
408.32 297.541 li
331.038 289.656 mo
333.267 292.037 li
333.571 303.586 li
333.014 306.119 li
327.29 309.057 li
332.811 308.804 li
334.837 306.676 li
334.533 292.189 li
331.038 289.656 li
408.996 267.824 mo
408.996 293.016 li
409.941 285.722 li
413.251 280.184 li
416.56 278.495 li
413.723 278.495 li
410.482 276.537 li
408.996 267.824 li
330.278 263.265 mo
326.175 263.518 li
328.353 263.873 li
330.076 264.684 li
332.963 270.306 li
331.95 283.426 li
334.297 270.255 li
333.976 263.873 li
330.278 263.265 li
333.959 249.521 mo
332.676 259.854 li
328.894 260.732 li
334.297 261.07 li
333.959 249.521 li
408.489 232.467 mo
408.489 253.438 li
409.198 247.562 li
414.466 245.435 li
420.646 245.435 li
423.078 243.712 li
421.355 243.712 li
413.859 239.559 li
412.947 230.441 li
410.313 239.457 li
408.489 232.467 li
334.297 225.274 mo
331.258 230.475 li
326.665 231.15 li
330.481 236.216 li
333.216 244.793 li
332.001 234.054 li
334.297 225.274 li
409.874 198.258 mo
409.874 228.854 li
412.17 210.956 li
418.451 207.511 li
422.909 207.038 li
423.854 206.16 li
417.371 205.282 li
413.048 198.258 li
411.562 202.041 li
409.874 198.258 li
327.07 200.251 mo
334.094 202.581 li
334.466 219.668 li
334.702 200.251 li
327.07 200.251 li
355.606 198.579 mo
355.606 198.579 li
341.676 197.718 li
339.7 194.578 li
342.334 190.12 li
335.648 195.388 li
326.429 197.718 li
324.605 198.579 li
355.606 198.579 li
397.987 197.853 mo
397.987 197.853 li
372.187 195.422 li
365.027 188.06 li
367.256 191.504 li
357.531 190.12 li
347.872 187.114 li
359.827 195.962 li
368.877 197.583 li
397.987 197.853 li
408.185 195.185 mo
408.185 195.185 li
401.701 193.26 li
407.51 187.486 li
399.27 192.484 li
379.717 187.891 li
394.914 193.564 li
408.185 195.185 li
.811765 .74902 .721569 rgb
f
355.606 198.579 mo
324.605 198.579 li
326.429 197.718 li
335.648 195.388 li
342.334 190.12 li
339.7 194.578 li
341.676 197.718 li
355.606 198.579 li
.721569 .666667 .643137 rgb
f
334.466 219.668 mo
334.094 202.581 li
327.07 200.251 li
334.702 200.251 li
334.466 219.668 li
f
333.216 244.793 mo
330.481 236.216 li
326.665 231.15 li
331.258 230.475 li
334.297 225.274 li
332.001 234.054 li
333.216 244.793 li
f
334.297 261.07 mo
328.894 260.732 li
332.676 259.854 li
333.959 249.521 li
334.297 261.07 li
f
331.95 283.426 mo
332.963 270.306 li
330.076 264.684 li
328.353 263.873 li
326.175 263.518 li
330.278 263.265 li
333.976 263.873 li
334.297 270.255 li
331.95 283.426 li
f
327.29 309.057 mo
333.014 306.119 li
333.571 303.586 li
333.267 292.037 li
331.038 289.656 li
334.533 292.189 li
334.837 306.676 li
332.811 308.804 li
327.29 309.057 li
f
397.987 197.853 mo
368.877 197.583 li
359.827 195.962 li
347.872 187.114 li
357.531 190.12 li
367.256 191.504 li
365.027 188.06 li
372.187 195.422 li
397.987 197.853 li
f
408.185 195.185 mo
394.914 193.564 li
379.717 187.891 li
399.27 192.484 li
407.51 187.486 li
401.701 193.26 li
408.185 195.185 li
f
409.874 228.854 mo
409.874 198.258 li
411.562 202.041 li
413.048 198.258 li
417.371 205.282 li
423.854 206.16 li
422.909 207.038 li
418.451 207.511 li
412.17 210.956 li
409.874 228.854 li
f
408.489 253.438 mo
408.489 232.467 li
410.313 239.457 li
412.947 230.441 li
413.859 239.559 li
421.355 243.712 li
423.078 243.712 li
420.646 245.435 li
414.466 245.435 li
409.198 247.562 li
408.489 253.438 li
f
408.996 293.016 mo
408.996 267.824 li
410.482 276.537 li
413.723 278.495 li
416.56 278.495 li
413.251 280.184 li
409.941 285.722 li
408.996 293.016 li
f
413.116 309.327 mo
408.32 309.091 li
408.32 297.541 li
409.232 303.586 li
411.056 299.331 li
411.528 294.772 li
413.048 306.018 li
415.547 307.841 li
417.438 307.841 li
413.116 309.327 li
f
323.761 195.185 mo
320.924 193.733 li
320.519 191.91 li
325.584 179.753 li
326.665 179.347 li
340.578 178.199 li
340.578 178.942 li
334.702 181.306 li
332.338 189.816 li
323.761 195.185 li
.941176 .898039 .878431 rgb
f
328.894 227.773 mo
322.41 227.3 li
318.966 225.274 li
318.56 219.398 li
319.303 203.526 li
322.883 202.513 li
322.41 205.418 li
323.896 209.96 li
330.886 212.982 li
331.595 223.653 li
328.894 227.773 li
f
324.436 259.854 mo
321.465 258.706 li
319.484 234.136 li
321.937 233.109 li
323.828 238.579 li
329.839 245.333 li
328.894 257.896 li
324.436 259.854 li
f
353.478 185.105 mo
349.578 183.535 li
348.615 180.901 li
349.831 176.139 li
371.579 172.745 li
373.74 173.049 li
373.487 174.113 li
370.042 175.075 li
362.393 181.357 li
358.746 184.396 li
353.478 185.105 li
f
325.973 280.133 mo
322.174 280.133 li
321.059 265.038 li
323.541 264.633 li
327.796 266.254 li
329.62 270.965 li
325.973 280.133 li
f
324.681 286.87 mo
322.427 284.768 li
322.174 281.07 li
326.023 280.918 li
327.29 281.475 li
327.467 286.085 li
324.681 286.87 li
f
325.179 306.085 mo
324.2 306.085 li
322.849 299.357 li
322.376 290.99 li
324.2 290.619 li
326.175 290.619 li
329.704 292.24 li
329.704 292.645 li
328.421 292.983 li
325.99 298.926 li
325.179 306.085 li
f
404.538 185.105 mo
403.728 184.497 li
404.183 180.85 li
403.12 179.989 li
385.34 178.013 li
380.376 180.597 li
378.248 176.848 li
379.261 173.961 li
392.204 175.785 li
406.159 178.165 li
406.159 181.205 li
404.538 185.105 li
f
424.749 202.632 mo
423.854 202.632 li
423.854 199.609 li
422.267 195.996 li
414.72 193.26 li
411.123 188.803 li
411.123 181.154 li
412.744 178.875 li
418.189 179.533 li
425.256 198.782 li
424.749 202.632 li
f
423.078 240.42 mo
422.419 240.42 li
421.811 236.773 li
421.406 225.375 li
416.239 219.044 li
415.176 212.256 li
420.241 209.419 li
423.078 210.179 li
425.053 213.556 li
423.078 240.42 li
f
419.532 275.996 mo
418.789 275.659 li
418.789 274.308 li
417.438 269.918 li
412.879 267.824 li
410.482 259.517 li
410.887 250.129 li
415.783 248.643 li
419.397 248.643 li
422.504 251.142 li
420.41 273.903 li
419.532 275.996 li
f
417.438 305.663 mo
416.493 305.663 li
414.872 304.751 li
412.879 286.06 li
415.277 281.501 li
416.493 281.501 li
420.748 284.084 li
417.438 291.226 li
417.438 305.663 li
f
343.347 299.357 mo
399.81 297.691 li
399.81 309.834 li
343.347 309.834 li
343.347 299.357 li
.121569 .231373 .270588 rgb
f
354.176 300.182 mo
398.723 298.886 li
398.723 301.377 li
377.601 300.132 li
354.176 300.182 li
.152941 .294118 .341176 rgb
f
344.996 304.366 mo
345.369 308.028 li
386.543 308.476 li
344.996 309.057 li
344.996 304.366 li
.0862745 .160784 .188235 rgb
f
343.347 209.96 mo
399.81 209.96 li
399.81 205.62 li
343.347 205.62 li
343.347 209.96 li
.121569 .231373 .270588 rgb
f
343.347 209.419 mo
398.648 209.017 li
399.81 206.551 li
399.81 209.96 li
343.347 209.96 li
343.347 209.419 li
.152941 .294118 .341176 rgb
f
357.463 205.62 mo
343.347 205.62 li
343.347 309.834 li
357.463 309.834 li
357.463 205.62 li
.658824 .301961 .156863 rgb
f
371.579 205.62 mo
357.463 205.62 li
357.463 309.834 li
371.579 309.834 li
371.579 205.62 li
.729412 .352941 .196078 rgb
f
385.695 205.62 mo
371.579 205.62 li
371.579 309.834 li
385.695 309.834 li
385.695 205.62 li
.607843 .262745 .117647 rgb
f
399.81 205.62 mo
385.695 205.62 li
385.695 309.834 li
399.81 309.834 li
399.81 205.62 li
.658824 .301961 .156863 rgb
f
357.463 223.234 mo
356.316 209.426 li
355.242 208.41 li
357.463 208.243 li
357.463 223.234 li
.588235 .243137 .117647 rgb
f
357.463 248.82 mo
357.463 223.234 li
357.463 208.243 li
359.344 208.102 li
357.463 248.82 li
371.578 220.753 mo
371.558 220.753 370.729 208.509 370.645 207.255 cv
371.579 207.185 li
371.579 220.747 li
371.579 220.751 371.579 220.753 371.578 220.753 cv
.65098 .282353 .14902 rgb
f
371.579 220.747 mo
371.579 207.185 li
371.579 210.999 371.579 220.486 371.579 220.747 cv
371.579 220.747 li
.541176 .211765 .0901961 rgb
f
385.695 309.834 mo
371.579 309.834 li
371.579 265.664 li
373.696 307.781 li
379.519 309.087 li
385.695 309.087 li
385.695 309.834 li
f
385.695 260.049 mo
384.812 206.482 li
383.369 206.301 li
385.695 206.127 li
385.695 260.049 li
f
399.81 281.604 mo
398.222 209.099 li
396.811 207.672 li
389.047 207.672 li
387.106 208.576 li
385.695 260.049 li
385.695 206.127 li
392.449 205.62 li
390.659 205.62 li
385.695 205.62 li
399.81 205.62 li
399.81 281.604 li
.588235 .243137 .117647 rgb
f
357.463 309.834 mo
347.687 309.834 li
347.697 308.842 li
357.463 309.543 li
357.463 309.834 li
f
361.521 309.834 mo
357.463 309.834 li
357.463 309.543 li
361.521 309.834 li
.65098 .282353 .14902 rgb
f
335.648 199.609 mo
340.105 204.202 li
343.347 205.62 li
343.347 309.834 li
335.648 309.834 li
335.648 199.609 li
.890196 .462745 .286275 rgb
f
407.51 199.609 mo
403.052 204.202 li
399.81 205.62 li
399.81 309.834 li
407.51 309.834 li
407.51 199.609 li
.960784 .521569 .341176 rgb
f
343.347 205.62 mo
399.81 205.62 li
403.052 204.202 li
407.51 199.609 li
335.648 199.609 li
340.105 204.202 li
343.347 205.62 li
.788235 .352941 .172549 rgb
f
356.602 230.373 mo
356.602 228.727 355.602 227.315 354.176 226.711 cv
354.113 225.237 352.908 224.059 351.418 224.059 cv
351.237 224.059 351.06 224.078 350.888 224.112 cv
350.324 223.031 349.206 222.286 347.902 222.286 cv
343.347 222.286 li
343.347 238.461 li
347.902 238.461 li
349.206 238.461 350.324 237.716 350.888 236.635 cv
351.06 236.668 351.237 236.688 351.418 236.688 cv
352.908 236.688 354.113 235.51 354.176 234.036 cv
355.602 233.432 356.602 232.02 356.602 230.373 cv
.121569 .231373 .270588 rgb
f
356.602 284.928 mo
356.602 283.282 355.602 281.87 354.176 281.266 cv
354.113 279.792 352.908 278.613 351.418 278.613 cv
351.237 278.613 351.06 278.634 350.888 278.667 cv
350.324 277.586 349.206 276.841 347.902 276.841 cv
343.347 276.841 li
343.347 293.016 li
347.902 293.016 li
349.206 293.016 350.324 292.271 350.888 291.19 cv
351.06 291.223 351.237 291.243 351.418 291.243 cv
352.908 291.243 354.113 290.065 354.176 288.591 cv
355.602 287.987 356.602 286.575 356.602 284.928 cv
f
394.677 251.074 mo
390.22 251.074 li
390.895 280.42 li
393.951 280.42 li
394.677 251.074 li
.960784 .521569 .341176 rgb
f
394.964 281.501 mo
391.908 281.501 li
391.883 280.42 li
393.951 280.42 li
394.002 278.365 li
394.651 252.155 li
395.69 252.155 li
394.964 281.501 li
.517647 .2 .0941176 rgb
f
393.951 280.42 mo
391.883 280.42 li
391.883 280.42 li
393.951 280.42 li
394.002 278.365 li
393.951 280.42 li
.756863 .345098 .203922 rgb
f
352.094 230.373 mo
352.094 230.886 351.678 231.302 351.165 231.302 cv
350.652 231.302 350.236 230.886 350.236 230.373 cv
350.236 229.861 350.652 229.445 351.165 229.445 cv
351.678 229.445 352.094 229.861 352.094 230.373 cv
cp
.0862745 .160784 .188235 rgb
f
347.687 227.283 mo
347.687 227.796 347.271 228.212 346.758 228.212 cv
346.245 228.212 345.829 227.796 345.829 227.283 cv
345.829 226.771 346.245 226.355 346.758 226.355 cv
347.271 226.355 347.687 226.771 347.687 227.283 cv
f
347.687 233.463 mo
347.687 233.976 347.271 234.392 346.758 234.392 cv
346.245 234.392 345.829 233.976 345.829 233.463 cv
345.829 232.95 346.245 232.535 346.758 232.535 cv
347.271 232.535 347.687 232.95 347.687 233.463 cv
f
352.094 284.928 mo
352.094 285.441 351.678 285.857 351.165 285.857 cv
350.652 285.857 350.236 285.441 350.236 284.928 cv
350.236 284.416 350.652 284 351.165 284 cv
351.678 284 352.094 284.416 352.094 284.928 cv
cp
f
347.687 281.838 mo
347.687 282.351 347.271 282.767 346.758 282.767 cv
346.245 282.767 345.829 282.351 345.829 281.838 cv
345.829 281.326 346.245 280.91 346.758 280.91 cv
347.271 280.91 347.687 281.326 347.687 281.838 cv
f
347.687 288.018 mo
347.687 288.531 347.271 288.947 346.758 288.947 cv
346.245 288.947 345.829 288.531 345.829 288.018 cv
345.829 287.505 346.245 287.09 346.758 287.09 cv
347.271 287.09 347.687 287.505 347.687 288.018 cv
f
339.501 309.834 mo
335.648 309.834 li
335.648 199.609 li
340.105 204.202 li
339.501 309.834 li
.792157 .372549 .219608 rgb
f
340.105 204.202 mo
340.105 204.202 li
335.648 199.609 li
407.51 199.609 li
404.691 202.513 li
364.15 202.615 li
340.105 204.202 li
.701961 .282353 .129412 rgb
f
402.647 309.834 mo
399.81 309.834 li
399.81 211.226 li
402.647 309.834 li
.854902 .419608 .258824 rgb
f
375.691 283.019 mo
374.23 281.883 372.431 281.266 370.58 281.266 cv
354.176 281.266 li
355.602 281.87 356.602 283.282 356.602 284.928 cv
356.602 286.575 355.602 287.987 354.176 288.591 cv
370.58 288.591 li
372.431 288.591 374.23 287.974 375.691 286.838 cv
378.147 284.928 li
375.691 283.019 li
cp
.152941 .294118 .341176 rgb
f
375.691 228.464 mo
374.23 227.328 372.431 226.711 370.58 226.711 cv
354.176 226.711 li
355.602 227.315 356.602 228.727 356.602 230.373 cv
356.602 232.02 355.602 233.432 354.176 234.036 cv
370.58 234.036 li
372.431 234.036 374.23 233.419 375.691 232.283 cv
378.147 230.373 li
375.691 228.464 li
cp
f
362.066 229.69 mo
361.689 229.037 360.854 228.813 360.2 229.19 cv
359.547 229.567 359.323 230.403 359.7 231.057 cv
360.077 231.71 360.913 231.934 361.566 231.557 cv
362.22 231.179 362.444 230.344 362.066 229.69 cv
cp
.0862745 .160784 .188235 rgb
f
360.764 229.346 mo
360.595 229.444 360.152 229.592 360.056 229.755 cv
359.934 229.96 360.165 230.384 360.412 230.372 cv
360.529 230.367 361.057 230.062 361.121 229.963 cv
361.216 229.815 360.987 229.218 360.764 229.346 cv
cp
.121569 .231373 .270588 rgb
f
372.214 229.69 mo
372.592 230.344 372.368 231.179 371.714 231.557 cv
371.061 231.934 370.225 231.71 369.848 231.057 cv
369.47 230.403 369.694 229.567 370.348 229.19 cv
371.001 228.813 371.837 229.037 372.214 229.69 cv
cp
.0862745 .160784 .188235 rgb
f
370.912 229.346 mo
370.743 229.444 370.3 229.592 370.204 229.755 cv
370.082 229.96 370.313 230.384 370.56 230.372 cv
370.677 230.367 371.205 230.062 371.268 229.963 cv
371.364 229.815 371.134 229.218 370.912 229.346 cv
cp
.121569 .231373 .270588 rgb
f
362.066 284.245 mo
361.689 283.592 360.854 283.368 360.2 283.745 cv
359.547 284.122 359.323 284.958 359.7 285.612 cv
360.077 286.265 360.913 286.489 361.566 286.112 cv
362.22 285.734 362.444 284.899 362.066 284.245 cv
cp
.0862745 .160784 .188235 rgb
f
360.764 283.901 mo
360.595 283.999 360.152 284.147 360.056 284.31 cv
359.934 284.515 360.165 284.939 360.412 284.927 cv
360.529 284.922 361.057 284.617 361.121 284.518 cv
361.216 284.37 360.987 283.773 360.764 283.901 cv
cp
.121569 .231373 .270588 rgb
f
372.214 284.245 mo
372.592 284.899 372.368 285.734 371.714 286.112 cv
371.061 286.489 370.225 286.265 369.848 285.612 cv
369.47 284.958 369.694 284.122 370.348 283.745 cv
371.001 283.368 371.837 283.592 372.214 284.245 cv
cp
.0862745 .160784 .188235 rgb
f
370.912 283.901 mo
370.743 283.999 370.3 284.147 370.204 284.31 cv
370.082 284.515 370.313 284.939 370.56 284.927 cv
370.677 284.922 371.205 284.617 371.268 284.518 cv
371.364 284.37 371.134 283.773 370.912 283.901 cv
cp
.121569 .231373 .270588 rgb
f
347.697 308.842 mo
345.787 308.705 li
345.196 293.016 li
347.858 293.016 li
347.697 308.842 li
348.022 276.843 mo
347.982 276.841 347.942 276.841 347.902 276.841 cv
344.587 276.841 li
343.797 255.865 li
343.91 250.321 344.032 244.296 344.151 238.461 cv
347.902 238.461 li
348.076 238.461 348.246 238.448 348.412 238.423 cv
348.022 276.843 li
.517647 .2 .0941176 rgb
f
343.797 255.865 mo
343.347 243.915 li
343.347 238.461 li
344.151 238.461 li
344.032 244.296 343.91 250.321 343.797 255.865 cv
.462745 .160784 .0705882 rgb
f
348.575 222.354 mo
348.358 222.309 348.133 222.286 347.902 222.286 cv
344.481 222.286 li
344.645 214.262 344.759 208.663 344.759 208.663 cv
346.475 207.369 li
346.945 207.35 li
354.464 207.672 li
355.242 208.41 li
353.788 208.519 li
348.615 218.407 li
348.575 222.354 li
.517647 .2 .0941176 rgb
f
359.344 208.102 mo
359.345 208.068 li
360.404 206.955 li
364.482 206.656 li
368.769 206.487 li
370.638 207.152 li
370.638 207.152 370.64 207.187 370.645 207.255 cv
359.344 208.102 li
.576471 .235294 .117647 rgb
f
371.579 207.185 mo
371.579 206.875 371.579 206.602 371.579 206.375 cv
380.988 206.003 li
383.369 206.301 li
371.579 207.185 li
.478431 .172549 .0705882 rgb
f
344.481 222.286 mo
343.347 222.286 li
343.347 217.473 li
344.588 207.444 li
346.475 207.369 li
344.759 208.663 li
344.759 208.663 344.645 214.262 344.481 222.286 cv
355.242 208.41 mo
354.464 207.672 li
346.945 207.35 li
357.463 206.934 li
357.463 208.243 li
355.242 208.41 li
.462745 .160784 .0705882 rgb
f
357.463 208.243 mo
357.463 206.934 li
364.482 206.656 li
360.404 206.955 li
359.345 208.068 li
359.344 208.102 li
357.463 208.243 li
370.645 207.255 mo
370.64 207.187 370.638 207.152 370.638 207.152 cv
368.769 206.487 li
371.579 206.375 li
371.579 207.185 li
370.645 207.255 li
.513725 .188235 .0901961 rgb
f
371.579 207.185 mo
371.579 206.375 li
371.579 206.602 371.579 206.875 371.579 207.185 cv
371.579 207.185 li
.427451 .141176 .054902 rgb
f
383.369 206.301 mo
380.988 206.003 li
385.695 205.817 li
385.695 206.127 li
383.369 206.301 li
f
385.695 206.127 mo
385.695 205.817 li
390.659 205.62 li
392.449 205.62 li
385.695 206.127 li
.462745 .160784 .0705882 rgb
f
347.687 309.834 mo
345.829 309.834 li
345.787 308.705 li
347.697 308.842 li
347.687 309.834 li
f
347.902 238.461 mo
344.151 238.461 li
343.347 238.461 li
343.347 222.286 li
344.481 222.286 li
347.902 222.286 li
348.133 222.286 348.358 222.309 348.575 222.354 cv
348.412 238.423 li
348.246 238.448 348.076 238.461 347.902 238.461 cv
346.758 232.535 mo
346.245 232.535 345.829 232.95 345.829 233.463 cv
345.829 233.976 346.245 234.392 346.758 234.392 cv
347.271 234.392 347.687 233.976 347.687 233.463 cv
347.687 232.95 347.271 232.535 346.758 232.535 cv
346.758 226.355 mo
346.245 226.355 345.829 226.771 345.829 227.283 cv
345.829 227.796 346.245 228.212 346.758 228.212 cv
347.271 228.212 347.687 227.796 347.687 227.283 cv
347.687 226.771 347.271 226.355 346.758 226.355 cv
.0941176 .152941 .160784 rgb
f
347.858 293.016 mo
345.196 293.016 li
344.587 276.841 li
347.902 276.841 li
347.942 276.841 347.982 276.841 348.022 276.843 cv
347.858 293.016 li
346.758 287.09 mo
346.245 287.09 345.829 287.505 345.829 288.018 cv
345.829 288.531 346.245 288.947 346.758 288.947 cv
347.271 288.947 347.687 288.531 347.687 288.018 cv
347.687 287.505 347.271 287.09 346.758 287.09 cv
346.758 280.91 mo
346.245 280.91 345.829 281.326 345.829 281.838 cv
345.829 282.351 346.245 282.767 346.758 282.767 cv
347.271 282.767 347.687 282.351 347.687 281.838 cv
347.687 281.326 347.271 280.91 346.758 280.91 cv
f
346.758 228.212 mo
346.245 228.212 345.829 227.796 345.829 227.283 cv
345.829 226.771 346.245 226.355 346.758 226.355 cv
347.271 226.355 347.687 226.771 347.687 227.283 cv
347.687 227.796 347.271 228.212 346.758 228.212 cv
.0666667 .105882 .113725 rgb
f
346.758 234.392 mo
346.245 234.392 345.829 233.976 345.829 233.463 cv
345.829 232.95 346.245 232.535 346.758 232.535 cv
347.271 232.535 347.687 232.95 347.687 233.463 cv
347.687 233.976 347.271 234.392 346.758 234.392 cv
f
346.758 282.767 mo
346.245 282.767 345.829 282.351 345.829 281.838 cv
345.829 281.326 346.245 280.91 346.758 280.91 cv
347.271 280.91 347.687 281.326 347.687 281.838 cv
347.687 282.351 347.271 282.767 346.758 282.767 cv
f
346.758 288.947 mo
346.245 288.947 345.829 288.531 345.829 288.018 cv
345.829 287.505 346.245 287.09 346.758 287.09 cv
347.271 287.09 347.687 287.505 347.687 288.018 cv
347.687 288.531 347.271 288.947 346.758 288.947 cv
f
345.787 308.705 mo
345.641 308.695 li
344.582 307.781 li
343.412 293.016 li
345.196 293.016 li
345.787 308.705 li
.462745 .160784 .0705882 rgb
f
345.829 309.834 mo
343.347 309.834 li
343.347 293.016 li
343.412 293.016 li
344.582 307.781 li
345.641 308.695 li
345.787 308.705 li
345.829 309.834 li
.415686 .129412 .054902 rgb
f
344.587 276.841 mo
343.374 276.841 li
343.437 273.638 343.602 265.474 343.797 255.865 cv
344.587 276.841 li
.462745 .160784 .0705882 rgb
f
343.374 276.841 mo
343.347 276.841 li
343.347 243.915 li
343.797 255.865 li
343.602 265.474 343.437 273.638 343.374 276.841 cv
.415686 .129412 .054902 rgb
f
345.196 293.016 mo
343.412 293.016 li
343.347 293.016 li
343.347 276.841 li
343.374 276.841 li
344.587 276.841 li
345.196 293.016 li
.0862745 .121569 .121569 rgb
f
346.475 207.369 mo
346.523 207.332 li
346.945 207.35 li
346.475 207.369 li
.462745 .160784 .0705882 rgb
f
364.482 206.656 mo
368.432 206.367 li
368.769 206.487 li
364.482 206.656 li
.513725 .188235 .0901961 rgb
f
371.579 206.375 mo
371.579 205.897 371.579 205.62 371.579 205.62 cv
377.931 205.62 li
380.988 206.003 li
371.579 206.375 li
.427451 .141176 .054902 rgb
f
343.347 217.473 mo
343.347 205.62 li
357.463 205.62 li
357.463 206.934 li
346.945 207.35 li
346.523 207.332 li
346.475 207.369 li
344.588 207.444 li
343.347 217.473 li
.415686 .129412 .054902 rgb
f
357.463 206.934 mo
357.463 205.62 li
371.579 205.62 li
371.579 206.375 li
368.769 206.487 li
368.432 206.367 li
364.482 206.656 li
357.463 206.934 li
.458824 .14902 .0666667 rgb
f
371.579 206.375 mo
371.579 205.62 li
371.579 205.62 371.579 205.897 371.579 206.375 cv
371.579 206.375 li
.380392 .109804 .0392157 rgb
f
380.988 206.003 mo
377.931 205.62 li
385.695 205.62 li
385.695 205.817 li
380.988 206.003 li
f
385.695 205.817 mo
385.695 205.62 li
390.659 205.62 li
385.695 205.817 li
.415686 .129412 .054902 rgb
f
405 270.69 mo
403.66 207.79 li
405 205.62 li
405 270.69 li
.854902 .419608 .258824 rgb
f
405 307.495 mo
405 282.049 li
405.67 289.404 li
405 307.495 li
f
341.783 303.569 mo
341.135 296.944 li
341.783 286.083 li
341.783 303.569 li
.792157 .372549 .219608 rgb
f
255.727 168.524 mo
283.256 165.453 li
285.756 156.181 li
281.027 142.037 li
246.247 139.35 li
237.846 147.489 li
239.186 162.766 li
246.247 168.524 li
255.727 168.524 li
cp
.309804 .372549 .439216 rgb
f
300.963 132.951 mo
315.115 131.994 li
316.749 123.498 li
314.372 114.045 li
291.636 112.609 li
280.421 116.011 li
280.421 127.207 li
284.915 132.472 li
300.963 132.951 li
.403922 .482353 .560784 rgb
f
245.787 102.596 mo
270.727 98.2259 li
272.044 83.2193 li
247.654 79.3589 li
228.692 84.4699 li
232.217 97.288 li
245.787 102.596 li
cp
f
258.934 77.9045 mo
273.607 79.3588 li
294.178 71.1828 li
294.178 62.2727 li
279.808 58.8731 li
260.144 58.8731 li
253.186 60.7095 li
250.199 69.116 li
252.581 76.8103 li
258.934 77.9045 li
.309804 .372549 .439216 rgb
f
219.279 47.9944 mo
242.191 40.985 li
244.94 27.271 li
238.525 23.3092 li
211.49 23.3092 li
204.616 30.6233 li
207.824 42.9446 li
219.279 47.9944 li
.403922 .482353 .560784 rgb
f
303.855 23.3093 mo
290.701 28.9541 li
289.123 39.9982 li
292.806 43.1887 li
308.328 43.1887 li
312.274 37.2986 li
310.432 27.376 li
303.855 23.3093 li
f
242.821 204.766 mo
252.661 200.088 li
253.841 190.937 li
251.086 188.293 li
239.476 188.293 li
236.524 193.174 li
237.901 201.396 li
242.821 204.766 li
cp
.309804 .372549 .439216 rgb
f
351.844 119.187 mo
374.662 112.483 li
375.867 89.4596 li
353.553 83.5369 li
336.204 91.3782 li
339.429 111.044 li
351.844 119.187 li
f
373.568 83.8568 mo
386.992 86.0881 li
405.813 73.5443 li
405.813 59.8742 li
392.666 54.6586 li
374.675 54.6586 li
368.309 57.4759 li
365.576 70.3734 li
367.755 82.1781 li
373.568 83.8568 li
.403922 .482353 .560784 rgb
f
408.101 156.732 mo
427.589 151.638 li
429.928 141.673 li
424.471 138.794 li
401.475 138.794 li
395.628 144.109 li
398.356 153.062 li
408.101 156.732 li
.309804 .372549 .439216 rgb
f
409.436 31.7835 mo
427.628 28.5961 li
428.588 17.6506 li
410.798 14.8348 li
396.968 18.5627 li
399.539 27.9121 li
409.436 31.7835 li
f
308.199 263.829 mo
300.658 267.065 li
299.753 273.396 li
301.865 275.225 li
310.763 275.225 li
313.025 271.849 li
311.97 266.16 li
308.199 263.829 li
cp
f
354.426 142.683 mo
346.471 146.464 li
345.517 153.862 li
347.744 155.999 li
357.13 155.999 li
359.517 152.054 li
358.403 145.407 li
354.426 142.683 li
.403922 .482353 .560784 rgb
f
150.026 41.1345 mo
172.845 37.0345 li
174.049 22.9553 li
151.735 19.3334 li
134.386 24.1285 li
137.611 36.1546 li
150.026 41.1345 li
.309804 .372549 .439216 rgb
f
126.785 30.2339 mo
113.631 35.8787 li
112.053 46.9228 li
115.736 50.1133 li
131.258 50.1133 li
135.204 44.2231 li
133.362 34.3005 li
126.785 30.2339 li
.403922 .482353 .560784 rgb
f
33.3518 40.0025 mo
58.7917 35.5451 li
60.1345 20.2381 li
35.2566 16.3003 li
15.9153 21.5137 li
19.5104 34.5884 li
33.3518 40.0025 li
cp
.309804 .372549 .439216 rgb
f
17.8244 116.121 mo
9.86991 119.903 li
8.91537 127.301 li
11.1426 129.438 li
20.5289 129.438 li
22.9153 125.493 li
21.8016 118.846 li
17.8244 116.121 li
cp
.403922 .482353 .560784 rgb
f
15.2127 151.519 mo
25.0523 146.841 li
26.233 137.69 li
23.478 135.046 li
11.8673 135.046 li
8.91534 139.927 li
10.2929 148.149 li
15.2127 151.519 li
.309804 .372549 .439216 rgb
f
214.417 168.653 mo
194.928 173.747 li
192.59 183.712 li
198.047 186.591 li
221.043 186.591 li
226.89 181.276 li
224.161 172.323 li
214.417 168.653 li
cp
.403922 .482353 .560784 rgb
f
399.004 104.004 mo
411.275 100.145 li
412.747 92.5939 li
409.312 90.4125 li
394.833 90.4125 li
391.151 94.4397 li
392.869 101.224 li
399.004 104.004 li
cp
f
0 427.8 mo
300.45 429.966 li
302.549 434.667 li
26.233 435.638 li
23.7011 437.969 li
334.251 437.969 li
331.595 443.831 li
40.2318 445.5 li
37.9936 447.5 li
354.176 447.5 li
354.303 450 li
0 450 li
0 427.8 li
f
345.829 432 mo
313.025 432 li
313.025 429 li
345.829 426.333 li
345.829 432 li
cp
f
368.607 25.523 mo
368.607 70.4659 li
413.818 70.4659 li
413.818 25.523 li
368.607 25.523 li
.580392 .235294 .121569 rgb
f
372.434 29.3503 mo
372.434 66.6385 li
409.991 66.6385 li
409.991 29.3503 li
372.434 29.3503 li
.290196 .113725 .054902 rgb
f
408.077 64.7248 mo
374.348 64.7248 li
374.348 31.2641 li
408.077 31.2641 li
408.077 64.7248 li
.4 .803922 .929412 rgb
f
368.607 25.5229 mo
372.434 29.3503 li
409.991 29.3503 li
413.818 25.5229 li
368.607 25.5229 li
cp
.4 .156863 .0745098 rgb
f
413.898 70.4659 mo
410.064 66.6385 li
372.441 66.6385 li
368.607 70.4659 li
413.898 70.4659 li
.760784 .364706 .235294 rgb
f
413.818 25.5229 mo
368.607 25.5229 li
368.607 22.6523 li
413.818 22.6523 li
413.818 25.5229 li
cp
.580392 .235294 .121569 rgb
f
413.818 73.3365 mo
368.607 73.3365 li
368.607 70.4659 li
413.818 70.4659 li
413.818 73.3365 li
f
372.833 78.4796 mo
368.607 78.4796 li
368.607 73.3365 li
372.833 73.3365 li
372.833 78.4796 li
cp
.290196 .113725 .054902 rgb
f
413.818 78.4796 mo
409.592 78.4796 li
409.592 73.3365 li
413.818 73.3365 li
413.818 78.4796 li
cp
f
372.833 22.6523 mo
368.607 22.6523 li
368.607 17.5093 li
372.833 17.5093 li
372.833 22.6523 li
cp
f
413.818 22.6523 mo
409.592 22.6523 li
409.592 17.5093 li
413.818 17.5093 li
413.818 22.6523 li
cp
f
374.348 64.7249 mo
374.348 64.7249 li
374.348 64.7248 li
374.348 64.7249 li
408.077 31.2641 mo
374.348 31.2641 li
374.348 31.264 li
408.077 31.264 li
.258824 .0901961 .0431373 rgb
f
374.348 64.7248 mo
374.348 64.7248 li
374.348 31.264 li
408.077 31.2641 li
379.274 36.1899 li
374.348 64.7249 li
.356863 .647059 .705882 rgb
f
398.845 62.2993 mo
391.252 62.2993 li
406.114 40.4685 li
406.114 56.4899 li
403.736 58.4346 401.314 60.3727 398.845 62.2993 cv
.631373 .898039 .964706 rgb
f
301.945 25.523 mo
301.945 70.4659 li
347.156 70.4659 li
347.156 25.523 li
301.945 25.523 li
.580392 .235294 .121569 rgb
f
305.772 29.3503 mo
305.772 66.6385 li
343.329 66.6385 li
343.329 29.3503 li
305.772 29.3503 li
.290196 .113725 .054902 rgb
f
341.415 64.7248 mo
307.686 64.7248 li
307.686 31.2641 li
341.415 31.2641 li
341.415 64.7248 li
.4 .803922 .929412 rgb
f
301.945 25.5229 mo
305.772 29.3503 li
343.329 29.3503 li
347.156 25.5229 li
301.945 25.5229 li
cp
.4 .156863 .0745098 rgb
f
347.236 70.4659 mo
343.402 66.6385 li
305.779 66.6385 li
301.945 70.4659 li
347.236 70.4659 li
cp
.760784 .364706 .235294 rgb
f
347.156 25.5229 mo
301.945 25.5229 li
301.945 22.6523 li
347.156 22.6523 li
347.156 25.5229 li
cp
.580392 .235294 .121569 rgb
f
347.156 73.3365 mo
301.945 73.3365 li
301.945 70.4659 li
347.156 70.4659 li
347.156 73.3365 li
cp
f
306.171 78.4796 mo
301.945 78.4796 li
301.945 73.3365 li
306.171 73.3365 li
306.171 78.4796 li
cp
.290196 .113725 .054902 rgb
f
347.156 78.4796 mo
342.93 78.4796 li
342.93 73.3365 li
347.156 73.3365 li
347.156 78.4796 li
cp
f
306.171 22.6523 mo
301.945 22.6523 li
301.945 17.5093 li
306.171 17.5093 li
306.171 22.6523 li
cp
f
347.156 22.6523 mo
342.93 22.6523 li
342.93 17.5093 li
347.156 17.5093 li
347.156 22.6523 li
cp
f
307.686 64.7249 mo
307.686 64.7249 li
307.686 64.7248 li
307.686 64.7249 li
341.415 31.2641 mo
307.686 31.2641 li
307.686 31.264 li
341.415 31.264 li
.258824 .0901961 .0431373 rgb
f
307.686 64.7248 mo
307.686 64.7248 li
307.686 31.264 li
341.415 31.2641 li
312.612 36.1899 li
307.686 64.7249 li
.356863 .647059 .705882 rgb
f
339.452 62.2993 mo
324.591 62.2993 li
339.452 40.4685 li
339.452 62.2993 li
.631373 .898039 .964706 rgb
f
235.283 25.523 mo
235.283 70.4659 li
280.495 70.4659 li
280.495 25.523 li
235.283 25.523 li
.580392 .235294 .121569 rgb
f
239.111 29.3503 mo
239.111 66.6385 li
276.667 66.6385 li
276.667 29.3503 li
239.111 29.3503 li
.290196 .113725 .054902 rgb
f
274.754 64.7248 mo
241.024 64.7248 li
241.024 31.2641 li
274.754 31.2641 li
274.754 64.7248 li
.4 .803922 .929412 rgb
f
235.283 25.5229 mo
239.111 29.3503 li
276.667 29.3503 li
280.495 25.5229 li
235.283 25.5229 li
cp
.4 .156863 .0745098 rgb
f
280.574 70.4659 mo
276.74 66.6385 li
239.118 66.6385 li
235.283 70.4659 li
280.574 70.4659 li
cp
.760784 .364706 .235294 rgb
f
280.495 25.5229 mo
235.283 25.5229 li
235.283 22.6523 li
280.495 22.6523 li
280.495 25.5229 li
cp
.580392 .235294 .121569 rgb
f
280.495 73.3365 mo
235.283 73.3365 li
235.283 70.4659 li
280.495 70.4659 li
280.495 73.3365 li
cp
f
239.51 78.4796 mo
235.283 78.4796 li
235.283 73.3365 li
239.51 73.3365 li
239.51 78.4796 li
cp
.290196 .113725 .054902 rgb
f
280.495 78.4796 mo
276.269 78.4796 li
276.269 73.3365 li
280.495 73.3365 li
280.495 78.4796 li
cp
f
239.51 22.6523 mo
235.283 22.6523 li
235.283 17.5093 li
239.51 17.5093 li
239.51 22.6523 li
cp
f
280.495 22.6523 mo
276.269 22.6523 li
276.269 17.5093 li
280.495 17.5093 li
280.495 22.6523 li
cp
f
241.024 64.7249 mo
241.024 64.7249 li
241.024 64.7248 li
241.024 64.7249 li
274.754 31.2641 mo
241.024 31.2641 li
241.024 31.264 li
274.754 31.264 li
.258824 .0901961 .0431373 rgb
f
241.024 64.7248 mo
241.024 64.7248 li
241.024 31.264 li
274.754 31.2641 li
245.95 36.1899 li
241.024 64.7249 li
.356863 .647059 .705882 rgb
f
272.79 62.2993 mo
257.929 62.2993 li
272.79 40.4685 li
272.79 62.2993 li
.631373 .898039 .964706 rgb
f
212.587 125.026 mo
190.454 125.026 li
189.654 118.743 li
213.387 118.743 li
212.587 125.026 li
.760784 .364706 .235294 rgb
f
201.521 125.026 mo
192.929 125.026 li
195.149 133.662 li
197.921 140.133 li
200.386 153.762 li
201.521 155.009 li
202.656 153.762 li
205.121 140.133 li
207.892 133.662 li
210.112 125.026 li
201.521 125.026 li
.521569 .211765 .109804 rgb
f
191.271 118.743 mo
192.471 116.476 li
210.521 116.976 li
211.421 118.743 li
191.271 118.743 li
cp
.909804 .843137 .811765 rgb
f
201.521 155.009 mo
202.321 152.876 li
202.995 145.562 li
204.152 145.486 li
202.656 153.762 li
201.521 155.009 li
205.203 139.941 mo
203.52 139.863 li
203.621 138.776 li
205.921 130.776 li
203.921 128.176 li
193.351 126.668 li
192.929 125.026 li
210.112 125.026 li
207.892 133.662 li
205.203 139.941 li
.411765 .141176 .0666667 rgb
f
192.998 105.376 mo
192.198 95.6765 201.998 87.3765 201.698 83.2766 cv
201.398 79.1767 202.148 81.9767 204.123 85.7765 cv
206.098 89.5765 212.598 100.81 208.298 110.276 cv
203.998 119.743 193.798 115.076 192.998 105.376 cv
.960784 .521569 .341176 rgb
f
202.187 86.3432 mo
202.187 86.3432 206.934 92.3908 207.854 100.743 cv
208.774 109.095 202.521 112.943 198.454 109.943 cv
194.387 106.943 194.921 101.676 197.254 97.3431 cv
199.587 93.0098 199.104 97.8098 201.346 98.9431 cv
203.587 100.076 207.054 95.743 202.187 86.3432 cv
.960784 .745098 .341176 rgb
f
197.439 104.427 mo
197.01 104.248 196.581 104.069 196.153 103.888 cv
195.663 101.885 197.471 98.6489 197.471 98.6489 cv
197.797 98.1847 197.991 97.9922 198.096 97.9922 cv
198.393 97.9922 197.982 99.5334 197.871 100.826 cv
197.784 101.837 197.714 103.532 197.439 104.427 cv
.972549 .835294 .572549 rgb
f
200.923 116.71 mo
200.371 113.876 li
200.923 109.876 li
200.647 107.176 li
201.121 107.176 li
201.696 109.876 li
201.521 113.826 li
203.021 116.768 li
200.923 116.71 li
.152941 .294118 .341176 rgb
f
206.391 139.996 mo
196.587 139.543 li
198.201 145.876 li
205.321 145.409 li
206.391 139.996 li
.960784 .521569 .341176 rgb
f
201.187 145.142 mo
198.621 145.142 li
197.521 140.376 li
200.987 140.376 li
201.187 145.142 li
.972549 .690196 .572549 rgb
f
304.312 221.393 mo
282.179 221.393 li
281.379 215.11 li
305.112 215.11 li
304.312 221.393 li
.760784 .364706 .235294 rgb
f
293.246 221.393 mo
284.654 221.393 li
286.874 230.03 li
289.646 236.501 li
292.111 250.13 li
293.246 251.376 li
294.38 250.13 li
296.846 236.501 li
299.617 230.03 li
301.837 221.393 li
293.246 221.393 li
.521569 .211765 .109804 rgb
f
282.996 215.11 mo
284.196 212.844 li
302.246 213.344 li
303.146 215.11 li
282.996 215.11 li
cp
.909804 .843137 .811765 rgb
f
285.076 223.036 mo
285.076 223.036 li
284.654 221.393 li
285.076 223.036 li
.286274 .282353 .298039 rgb
f
293.246 251.376 mo
294.046 249.243 li
294.72 241.929 li
295.878 241.853 li
294.38 250.13 li
293.246 251.376 li
296.928 236.309 mo
295.246 236.231 li
295.346 235.143 li
297.646 227.144 li
295.646 224.544 li
285.076 223.036 li
284.654 221.393 li
301.837 221.393 li
299.617 230.03 li
296.928 236.309 li
.411765 .141176 .0666667 rgb
f
284.723 201.744 mo
283.923 192.044 293.723 183.744 293.423 179.644 cv
293.123 175.544 293.873 178.344 295.848 182.144 cv
297.823 185.944 304.323 197.177 300.023 206.644 cv
295.723 216.11 285.523 211.444 284.723 201.744 cv
.960784 .521569 .341176 rgb
f
293.912 182.711 mo
293.912 182.711 298.659 188.758 299.579 197.111 cv
300.499 205.463 294.246 209.31 290.179 206.31 cv
286.113 203.31 286.646 198.044 288.979 193.711 cv
291.312 189.377 290.829 194.177 293.071 195.311 cv
295.312 196.444 298.779 192.111 293.912 182.711 cv
.960784 .745098 .341176 rgb
f
288.713 201.389 mo
288.558 201.389 288.371 201.241 288.146 200.894 cv
286.946 199.044 289.196 195.017 289.196 195.017 cv
289.522 194.552 289.716 194.36 289.821 194.36 cv
290.118 194.36 289.707 195.901 289.596 197.194 cv
289.474 198.615 289.385 201.39 288.713 201.389 cv
.972549 .835294 .572549 rgb
f
292.648 213.078 mo
292.096 210.244 li
292.648 206.244 li
292.372 203.544 li
292.846 203.544 li
293.421 206.244 li
293.246 210.194 li
294.746 213.136 li
292.648 213.078 li
cp
.152941 .294118 .341176 rgb
f
298.116 236.363 mo
288.313 235.91 li
289.927 242.243 li
297.046 241.777 li
298.116 236.363 li
.960784 .521569 .341176 rgb
f
292.912 241.51 mo
290.346 241.51 li
289.246 236.743 li
292.712 236.743 li
292.912 241.51 li
.972549 .690196 .572549 rgb
f
371.14 336.035 mo
367.898 336.035 li
372.5 327.333 li
371.713 322.333 li
341.135 320.784 li
377.758 320.784 li
371.14 336.035 li
.756863 .345098 .203922 rgb
f
364.619 351.06 mo
357.463 351.06 li
364.521 343.548 li
365.769 339.333 li
314.5 336.035 li
367.898 336.035 li
371.14 336.035 li
364.619 351.06 li
.662745 .27451 .141176 rgb
f
357.472 367.531 mo
352.165 367.531 li
356.602 364.667 li
358.333 357.312 li
356.602 352.205 li
324.661 351.174 li
357.463 351.06 li
364.619 351.06 li
357.472 367.531 li
.701961 .305882 .172549 rgb
f
349.697 385.446 mo
289.126 385.446 li
345.829 384 li
350.405 376.488 li
350.405 369.336 li
274.324 367.531 li
352.165 367.531 li
357.472 367.531 li
349.697 385.446 li
.756863 .345098 .203922 rgb
f
343.65 399.38 mo
344.588 392.667 li
343.347 388.167 li
262.667 385.446 li
289.126 385.446 li
349.697 385.446 li
343.65 399.38 li
.662745 .27451 .141176 rgb
f
343.65 399.381 mo
343.65 399.38 li
349.697 385.446 li
357.472 367.531 li
364.619 351.06 li
371.14 336.035 li
377.758 320.784 li
343.65 399.381 li
.352941 .352941 .372549 rgb
f
426.978 450 mo
394.885 450 li
394.885 320.784 li
403.8 353.267 li
403.053 356.452 li
404.949 357.453 li
416.234 398.57 li
415.113 398.899 li
414.334 413.798 li
420.892 415.538 li
421.851 419.034 li
413.409 417.63 li
401.229 425.748 li
401.229 434.594 li
409.737 437.969 li
421.379 437.969 li
425.169 436.292 li
426.978 450 li
.286274 .282353 .298039 rgb
f
394.885 450 mo
354.303 450 li
354.303 403.361 li
390.138 320.784 li
394.885 320.784 li
394.885 450 li
.211765 .211765 .227451 rgb
f
420.892 415.538 mo
414.334 413.798 li
415.113 398.899 li
416.234 398.57 li
420.892 415.538 li
.243137 .247059 .262745 rgb
f
421.379 437.969 mo
409.737 437.969 li
401.229 434.594 li
401.229 425.748 li
413.409 417.63 li
421.851 419.034 li
423.854 426.333 li
425.169 436.292 li
421.379 437.969 li
.317647 .321569 .337255 rgb
f
404.949 357.453 mo
403.053 356.452 li
403.8 353.267 li
404.949 357.453 li
f
285.25 421.276 mo
236.181 421.276 li
238.924 403.361 li
329.427 403.361 li
248.5 406.096 li
241.424 408.682 li
239.75 416.686 li
240 419.25 li
285.25 421.276 li
.701961 .305882 .172549 rgb
f
341.923 421.276 mo
308.875 421.276 li
338.5 419.75 li
340.25 416.875 li
341.923 409.75 li
341.923 421.276 li
f
37.659 385.466 mo
37.659 378.526 li
37.7288 378.534 li
37.7288 385.447 li
37.659 385.466 li
.286274 .282353 .298039 rgb
f
37.659 387.784 mo
37.659 385.466 li
37.7288 385.447 li
37.7288 387.731 li
37.659 387.784 li
.243137 .247059 .262745 rgb
f
0 421.276 mo
0 421.276 li
0 378.347 li
2.00004 364.535 li
12.8544 364.535 li
14.5469 359.959 li
18.2461 355.517 li
20.4734 322.203 li
19.9744 319.061 li
20.5431 312.622 li
30.7535 311.853 li
30.7535 316.96 li
33.6238 316.96 li
33.6238 355.384 li
30.7535 355.384 li
30.7535 355.384 li
30.7535 364.535 li
9.08004 364.535 li
9.08004 373.687 li
11.9503 373.687 li
11.9503 412.111 li
9.08004 412.11 li
9.08004 412.111 li
9.08004 421.262 li
12.8544 421.262 li
44.9262 421.262 li
44.9262 421.27 li
0 421.276 li
44.9262 412.111 mo
12.8544 412.111 li
12.8544 412.11 li
20.4734 412.111 li
20.5431 412.11 li
20.5431 412.111 li
29.0662 412.111 li
29.136 412.11 li
29.136 412.111 li
37.659 412.111 li
37.7288 412.11 li
37.7288 412.111 li
44.9262 412.111 li
37.7288 408.9 mo
37.659 408.891 li
37.659 408.064 li
37.7288 407.991 li
37.7288 408.9 li
42.1468 343.928 mo
42.1468 320.007 li
42.2166 320.014 li
42.2166 343.876 li
42.1468 343.928 li
.286274 .282353 .298039 rgb
f
44.9262 355.384 mo
41.0954 355.384 li
42.1468 355.384 li
42.2166 355.384 li
42.2166 355.384 li
44.9262 355.384 li
.243137 .247059 .262745 rgb
f
20.4734 400.655 mo
20.4734 376.734 li
20.5431 376.741 li
20.5431 400.602 li
20.4734 400.655 li
29.0662 387.786 mo
29.0662 377.63 li
29.136 377.637 li
29.136 387.768 li
29.0662 387.786 li
.286274 .282353 .298039 rgb
f
29.0662 394.219 mo
29.0662 387.786 li
29.136 387.768 li
29.136 394.167 li
29.0662 394.219 li
.243137 .247059 .262745 rgb
f
20.4734 412.111 mo
11.9503 412.111 li
11.9503 373.687 li
20.4734 373.687 li
20.4734 412.111 li
.521569 .211765 .109804 rgb
f
29.0662 412.111 mo
20.5431 412.111 li
20.5431 373.687 li
29.0662 373.687 li
29.0662 412.111 li
.580392 .235294 .121569 rgb
f
37.659 412.111 mo
29.136 412.111 li
29.136 373.687 li
37.659 373.687 li
37.659 412.111 li
.760784 .364706 .235294 rgb
f
46.2517 412.111 mo
37.7288 412.111 li
37.7288 373.687 li
46.2517 373.687 li
46.2517 412.111 li
.580392 .235294 .121569 rgb
f
54.8446 412.111 mo
46.3216 412.111 li
46.3216 373.687 li
54.8446 373.687 li
54.8446 412.111 li
.760784 .364706 .235294 rgb
f
63.4374 412.111 mo
54.9144 412.111 li
54.9144 373.687 li
63.4374 373.687 li
63.4374 412.111 li
.521569 .211765 .109804 rgb
f
65.7159 373.687 mo
9.08004 373.687 li
9.08004 364.535 li
65.7159 364.535 li
65.7159 373.687 li
.760784 .364706 .235294 rgb
f
65.7159 421.262 mo
9.08004 421.262 li
9.08004 412.111 li
65.7159 412.111 li
65.7159 421.262 li
f
63.4374 373.687 mo
63.4377 375.6 li
19.9744 412.11 li
11.9503 412.111 li
11.9504 409.699 li
54.8357 373.675 li
63.4374 373.687 li
f
46.3216 412.11 mo
46.2517 412.11 li
46.2517 409.99 li
46.3216 409.999 li
46.3216 412.111 li
.270588 .317647 .333333 rgb
f
37.7288 412.11 mo
37.659 412.11 li
37.659 408.891 li
37.7288 408.9 li
37.7288 412.111 li
29.136 412.11 mo
29.0662 412.11 li
29.0662 404.473 li
29.136 404.414 li
29.136 412.111 li
20.5431 412.11 mo
20.4734 412.11 li
20.4734 411.691 li
20.5431 411.633 li
20.5431 412.111 li
.215686 .211765 .2 rgb
f
20.4734 412.11 mo
19.9744 412.11 li
20.4734 411.691 li
20.4734 412.111 li
.392157 .156863 .0745098 rgb
f
29.0662 412.11 mo
20.5431 412.11 li
20.5431 411.633 li
29.0662 404.473 li
29.0662 412.111 li
.435294 .176471 .0823529 rgb
f
37.659 408.064 mo
37.659 397.957 li
37.7288 397.957 li
37.7288 407.991 li
37.659 408.064 li
.215686 .211765 .2 rgb
f
37.7288 397.957 mo
37.659 397.957 li
37.659 397.255 li
37.7288 397.196 li
37.7288 397.957 li
.180392 .184314 .176471 rgb
f
46.2517 399.115 mo
46.2517 390.037 li
46.3216 389.978 li
46.3216 399.042 li
46.2517 399.115 li
.270588 .317647 .333333 rgb
f
37.659 412.11 mo
29.136 412.11 li
29.136 404.414 li
37.659 397.255 li
37.659 397.957 li
37.659 408.064 li
36.9516 408.801 li
37.659 408.891 li
37.659 412.111 li
.568627 .270588 .156863 rgb
f
46.2517 412.11 mo
37.7288 412.11 li
37.7288 408.9 li
46.2517 409.99 li
46.2517 412.111 li
37.7288 407.991 mo
37.7288 397.957 li
37.7288 397.196 li
46.2517 390.037 li
46.2517 399.115 li
37.7288 407.991 li
.435294 .176471 .0823529 rgb
f
47.18 412.11 mo
46.3216 412.11 li
46.3216 409.999 li
50.0504 410.476 li
50.0504 412.11 li
47.18 412.11 li
46.3216 399.042 mo
46.3216 389.978 li
50.0504 386.846 li
50.0504 395.158 li
46.3216 399.042 li
.568627 .270588 .156863 rgb
f
37.659 388.104 mo
37.659 387.784 li
37.7288 387.731 li
37.7288 388.045 li
37.659 388.104 li
.180392 .184314 .176471 rgb
f
20.4734 402.54 mo
20.4734 400.655 li
20.5431 400.602 li
20.5431 402.481 li
20.4734 402.54 li
.215686 .211765 .2 rgb
f
29.0662 395.322 mo
29.0662 394.219 li
29.136 394.167 li
29.136 395.263 li
29.0662 395.322 li
.180392 .184314 .176471 rgb
f
15.7246 406.529 mo
15.7246 404.211 li
20.4734 400.655 li
20.4734 402.54 li
15.7246 406.529 li
.392157 .156863 .0745098 rgb
f
20.5431 402.481 mo
20.5431 400.602 li
29.0662 394.219 li
29.0662 395.322 li
20.5431 402.481 li
.435294 .176471 .0823529 rgb
f
29.136 395.263 mo
29.136 394.167 li
37.659 387.784 li
37.659 388.104 li
29.136 395.263 li
.568627 .270588 .156863 rgb
f
37.7288 388.045 mo
37.7288 387.731 li
41.1722 385.152 li
37.7288 388.045 li
.435294 .176471 .0823529 rgb
f
15.7246 406.529 mo
15.7246 406.529 li
20.4734 402.54 li
20.5431 402.481 li
29.0662 395.322 li
29.136 395.263 li
37.659 388.104 li
37.7288 388.045 li
41.1722 385.152 li
41.1722 385.152 li
15.7246 406.529 li
.568627 .270588 .156863 rgb
f
17.229 379.364 mo
17.229 379.926 16.7737 380.381 16.2119 380.381 cv
15.6501 380.381 15.1947 379.926 15.1947 379.364 cv
15.1947 378.802 15.6501 378.347 16.2119 378.347 cv
16.7737 378.347 17.229 378.802 17.229 379.364 cv
.2 .27451 .301961 rgb
f
60.2628 407.665 mo
60.2628 408.227 59.8075 408.682 59.2457 408.682 cv
58.6839 408.682 58.2285 408.227 58.2285 407.665 cv
58.2285 407.103 58.6839 406.648 59.2457 406.648 cv
59.8075 406.648 60.2628 407.103 60.2628 407.665 cv
f
18.2462 409.699 mo
18.2462 410.261 17.7908 410.717 17.229 410.717 cv
16.6673 410.717 16.2119 410.261 16.2119 409.699 cv
16.2119 409.138 16.6673 408.682 17.229 408.682 cv
17.7908 408.682 18.2462 409.138 18.2462 409.699 cv
cp
f
38.7459 392.899 mo
38.7459 393.46 38.2905 393.916 37.7288 393.916 cv
37.167 393.916 36.7116 393.46 36.7116 392.899 cv
36.7116 392.337 37.167 391.881 37.7288 391.881 cv
38.2905 391.881 38.7459 392.337 38.7459 392.899 cv
cp
f
59.2457 376.098 mo
59.2457 376.659 58.7902 377.115 58.2285 377.115 cv
57.6667 377.115 57.2114 376.659 57.2114 376.098 cv
57.2114 375.536 57.6667 375.081 58.2285 375.081 cv
58.7902 375.081 59.2457 375.536 59.2457 376.098 cv
f
46.3216 379.43 mo
46.2517 379.423 li
46.2517 373.687 li
46.3216 373.687 li
46.3216 379.43 li
.270588 .317647 .333333 rgb
f
37.7288 378.534 mo
37.659 378.526 li
37.659 373.687 li
37.7288 373.687 li
37.7288 378.534 li
.215686 .211765 .2 rgb
f
29.136 377.637 mo
29.0662 377.63 li
29.0662 373.687 li
29.136 373.687 li
29.136 377.637 li
20.5431 376.741 mo
20.4734 376.734 li
20.4734 373.687 li
20.5431 373.687 li
20.5431 376.741 li
f
20.4734 376.734 mo
15.7246 376.238 li
15.7246 375.845 li
15.7246 373.687 li
20.4734 373.687 li
20.4734 376.734 li
.392157 .156863 .0745098 rgb
f
29.0662 377.63 mo
20.5431 376.741 li
20.5431 373.687 li
29.0662 373.687 li
29.0662 377.63 li
.435294 .176471 .0823529 rgb
f
37.659 378.526 mo
29.136 377.637 li
29.136 373.687 li
37.659 373.687 li
37.659 378.526 li
.568627 .270588 .156863 rgb
f
46.2517 379.423 mo
37.7288 378.534 li
37.7288 373.687 li
46.2517 373.687 li
46.2517 379.423 li
.435294 .176471 .0823529 rgb
f
47.8008 379.584 mo
46.3216 379.43 li
46.3216 373.687 li
47.18 373.687 li
50.0504 373.687 li
50.0504 375.845 li
50.0504 377.694 li
47.8008 379.584 li
.568627 .270588 .156863 rgb
f
50.0504 379.819 mo
47.8008 379.584 li
50.0504 377.694 li
50.0504 379.819 li
f
14.5469 417.833 mo
14.5469 413.602 li
41.3634 413.602 li
14.5469 417.833 li
.831372 .505882 .317647 rgb
f
23.0862 404.325 mo
19.9744 404.325 li
44.9262 383.277 li
23.0862 404.325 li
f
11.9503 412.111 mo
9.08004 412.111 li
9.08004 412.11 li
11.9503 412.11 li
11.9503 412.111 li
.215686 .211765 .2 rgb
f
12.8544 412.111 mo
11.9503 412.111 li
12.8544 412.111 li
12.8544 412.11 li
11.9503 412.111 mo
11.9503 412.111 li
11.9503 412.11 li
11.9503 375.845 li
15.7246 376.238 li
15.7246 378.471 li
15.4089 378.644 15.1947 378.979 15.1947 379.364 cv
15.1947 379.749 15.4089 380.085 15.7246 380.257 cv
15.7246 404.211 li
11.9504 407.038 li
11.9504 409.699 li
11.9503 412.111 li
.392157 .156863 .0745098 rgb
f
12.8544 421.262 mo
9.08004 421.262 li
9.08004 412.11 li
11.9503 412.111 li
12.8544 412.111 li
12.8544 421.262 li
.568627 .270588 .156863 rgb
f
11.9503 412.111 mo
11.9503 412.111 li
11.9504 409.699 li
15.7246 406.529 li
15.7246 412.11 li
12.8544 412.11 li
11.9503 412.111 li
f
11.9504 409.699 mo
11.9504 407.038 li
15.7246 404.211 li
15.7246 406.529 li
11.9504 409.699 li
.294118 .117647 .0509804 rgb
f
15.7246 380.257 mo
15.4089 380.085 15.1947 379.749 15.1947 379.364 cv
15.1947 378.979 15.4089 378.644 15.7246 378.471 cv
15.7246 380.257 li
.14902 .203922 .2 rgb
f
15.7246 373.687 mo
11.9503 373.687 li
11.9503 373.686 li
9.08004 373.686 li
9.08004 364.535 li
12.8544 364.535 li
12.8544 373.686 li
15.7246 373.686 li
15.7246 373.687 li
.568627 .270588 .156863 rgb
f
15.7246 376.238 mo
11.9503 375.845 li
11.9503 373.687 li
15.7246 373.687 li
15.7246 375.845 li
15.7246 376.238 li
.294118 .117647 .0509804 rgb
f
64.5159 412.111 mo
55.9929 412.111 li
55.9929 373.687 li
64.5159 373.687 li
64.5159 412.111 li
.521569 .211765 .109804 rgb
f
73.1087 412.111 mo
64.5856 412.111 li
64.5856 373.687 li
73.1087 373.687 li
73.1087 412.111 li
.580392 .235294 .121569 rgb
f
81.7016 412.111 mo
73.1785 412.111 li
73.1785 373.687 li
81.7016 373.687 li
81.7016 412.111 li
.760784 .364706 .235294 rgb
f
90.2944 412.111 mo
81.7713 412.111 li
81.7713 373.687 li
90.2944 373.687 li
90.2944 412.111 li
.580392 .235294 .121569 rgb
f
98.8872 412.111 mo
90.3641 412.111 li
90.3641 373.687 li
98.8872 373.687 li
98.8872 412.111 li
.760784 .364706 .235294 rgb
f
107.48 412.111 mo
98.9569 412.111 li
98.9569 373.687 li
107.48 373.687 li
107.48 412.111 li
.521569 .211765 .109804 rgb
f
109.758 373.687 mo
53.1226 373.687 li
53.1226 364.535 li
109.758 364.535 li
109.758 373.687 li
.760784 .364706 .235294 rgb
f
109.758 421.262 mo
53.1226 421.262 li
53.1226 412.111 li
109.758 412.111 li
109.758 421.262 li
f
107.48 373.687 mo
107.48 375.6 li
64.0169 412.11 li
55.9929 412.111 li
55.9929 409.699 li
98.8783 373.675 li
107.48 373.687 li
f
98.9569 412.111 mo
98.8872 412.111 li
98.8872 411.089 li
98.9569 411.098 li
98.9569 412.111 li
90.3641 412.11 mo
90.2944 412.11 li
90.2944 409.99 li
90.3641 409.999 li
90.3641 412.111 li
.301961 .360784 .372549 rgb
f
81.7713 412.11 mo
81.7016 412.11 li
81.7016 408.891 li
81.7713 408.9 li
81.7713 412.111 li
73.1785 412.11 mo
73.1087 412.11 li
73.1087 404.473 li
73.1785 404.414 li
73.1785 412.111 li
64.5856 412.11 mo
64.5159 412.11 li
64.5159 411.691 li
64.5856 411.633 li
64.5856 412.111 li
81.7016 408.064 mo
81.7016 397.255 li
81.7713 397.196 li
81.7713 407.991 li
81.7016 408.064 li
90.2944 393.21 mo
90.2944 390.037 li
90.3641 389.978 li
90.3641 393.177 li
90.2944 393.21 li
.270588 .317647 .333333 rgb
f
90.2944 399.115 mo
90.2944 393.21 li
90.3641 393.177 li
90.3641 399.042 li
90.2944 399.115 li
.301961 .360784 .372549 rgb
f
64.5159 412.11 mo
64.0169 412.11 li
64.5159 411.691 li
64.5159 412.111 li
.392157 .156863 .0745098 rgb
f
73.1087 412.11 mo
64.5856 412.11 li
64.5856 411.633 li
73.1087 404.473 li
73.1087 412.111 li
.435294 .176471 .0823529 rgb
f
81.7016 412.11 mo
73.1785 412.11 li
73.1785 404.414 li
81.7016 397.255 li
81.7016 408.064 li
80.9941 408.801 li
81.7016 408.891 li
81.7016 412.111 li
.568627 .270588 .156863 rgb
f
90.2944 412.11 mo
81.7713 412.11 li
81.7713 408.9 li
90.2944 409.99 li
90.2944 412.111 li
81.7713 407.991 mo
81.7713 397.196 li
90.2944 390.037 li
90.2944 393.21 li
90.2944 399.115 li
81.7713 407.991 li
.435294 .176471 .0823529 rgb
f
98.9569 389.73 mo
98.8872 389.682 li
98.8872 382.819 li
98.9569 382.76 li
98.9569 389.73 li
.270588 .317647 .333333 rgb
f
98.8872 390.165 mo
98.8872 389.682 li
98.9569 389.73 li
98.9569 390.092 li
98.8872 390.165 li
.301961 .360784 .372549 rgb
f
107.48 381.216 mo
107.48 381.215 li
107.48 381.215 li
107.48 381.215 mo
107.48 381.215 li
107.48 375.6 li
107.48 375.6 li
107.48 381.215 li
.270588 .317647 .333333 rgb
f
98.8872 412.111 mo
90.3641 412.11 li
90.3641 409.999 li
98.8872 411.089 li
98.8872 412.111 li
90.3641 399.042 mo
90.3641 393.177 li
90.3641 389.978 li
98.8872 382.819 li
98.8872 389.682 li
98.8872 390.165 li
90.3641 399.042 li
.568627 .270588 .156863 rgb
f
103.706 412.111 mo
98.9569 412.111 li
98.9569 411.098 li
103.706 411.706 li
103.706 412.111 li
98.9569 390.092 mo
98.9569 389.73 li
98.9569 382.76 li
101.534 380.595 li
103.706 380.822 li
103.706 385.147 li
98.9569 390.092 li
.392157 .156863 .0745098 rgb
f
64.5159 402.54 mo
64.5159 400.655 li
64.5856 400.602 li
64.5856 402.481 li
64.5159 402.54 li
73.1087 395.322 mo
73.1087 394.219 li
73.1785 394.167 li
73.1785 395.263 li
73.1087 395.322 li
81.7016 388.104 mo
81.7016 387.784 li
81.7713 387.731 li
81.7713 388.045 li
81.7016 388.104 li
.270588 .317647 .333333 rgb
f
59.7673 406.529 mo
59.7673 404.211 li
64.5159 400.655 li
64.5159 402.54 li
59.7673 406.529 li
.392157 .156863 .0745098 rgb
f
64.5856 402.481 mo
64.5856 400.602 li
73.1087 394.219 li
73.1087 395.322 li
64.5856 402.481 li
.435294 .176471 .0823529 rgb
f
73.1785 395.263 mo
73.1785 394.167 li
81.7016 387.784 li
81.7016 388.104 li
73.1785 395.263 li
.568627 .270588 .156863 rgb
f
81.7713 388.045 mo
81.7713 387.731 li
85.2147 385.152 li
81.7713 388.045 li
.435294 .176471 .0823529 rgb
f
61.2716 379.364 mo
61.2716 379.926 60.8162 380.381 60.2544 380.381 cv
59.6927 380.381 59.2372 379.926 59.2372 379.364 cv
59.2372 378.802 59.6927 378.347 60.2544 378.347 cv
60.8162 378.347 61.2716 378.802 61.2716 379.364 cv
.2 .27451 .301961 rgb
f
104.305 407.665 mo
104.305 408.227 103.85 408.682 103.288 408.682 cv
102.727 408.682 102.271 408.227 102.271 407.665 cv
102.271 407.103 102.727 406.648 103.288 406.648 cv
103.85 406.648 104.305 407.103 104.305 407.665 cv
f
62.2887 409.699 mo
62.2887 410.261 61.8333 410.717 61.2716 410.717 cv
60.7098 410.717 60.2544 410.261 60.2544 409.699 cv
60.2544 409.138 60.7098 408.682 61.2716 408.682 cv
61.8333 408.682 62.2887 409.138 62.2887 409.699 cv
cp
f
82.7885 392.899 mo
82.7885 393.46 82.3331 393.916 81.7713 393.916 cv
81.2096 393.916 80.7542 393.46 80.7542 392.899 cv
80.7542 392.337 81.2096 391.881 81.7713 391.881 cv
82.3331 391.881 82.7885 392.337 82.7885 392.899 cv
cp
f
103.288 376.098 mo
103.288 376.659 102.833 377.115 102.271 377.115 cv
101.709 377.115 101.254 376.659 101.254 376.098 cv
101.254 375.536 101.709 375.081 102.271 375.081 cv
102.833 375.081 103.288 375.536 103.288 376.098 cv
f
107.48 375.6 mo
107.48 373.687 li
107.48 375.6 li
107.48 375.6 li
.568627 .270588 .156863 rgb
f
107.48 381.215 mo
107.48 381.215 li
107.48 375.6 li
107.48 375.6 li
107.48 381.215 li
.203922 .235294 .223529 rgb
f
90.3641 379.43 mo
90.2944 379.423 li
90.2944 373.687 li
90.3641 373.687 li
90.3641 379.43 li
81.7713 378.534 mo
81.7016 378.526 li
81.7016 373.687 li
81.7713 373.687 li
81.7713 378.534 li
73.1785 377.637 mo
73.1087 377.63 li
73.1087 373.687 li
73.1785 373.687 li
73.1785 377.637 li
64.5856 376.741 mo
64.5159 376.734 li
64.5159 373.687 li
64.5856 373.687 li
64.5856 376.741 li
.270588 .317647 .333333 rgb
f
64.5159 376.734 mo
59.7673 376.238 li
59.7673 375.845 li
59.7673 373.687 li
64.5159 373.687 li
64.5159 376.734 li
.392157 .156863 .0745098 rgb
f
73.1087 377.63 mo
64.5856 376.741 li
64.5856 373.687 li
73.1087 373.687 li
73.1087 377.63 li
.435294 .176471 .0823529 rgb
f
81.7016 378.526 mo
73.1785 377.637 li
73.1785 373.687 li
81.7016 373.687 li
81.7016 378.526 li
.568627 .270588 .156863 rgb
f
90.2944 379.423 mo
81.7713 378.534 li
81.7713 373.687 li
90.2944 373.687 li
90.2944 379.423 li
.435294 .176471 .0823529 rgb
f
91.8434 379.584 mo
90.3641 379.43 li
90.3641 373.687 li
98.8642 373.687 li
91.8434 379.584 li
.568627 .270588 .156863 rgb
f
101.534 380.595 mo
91.8434 379.584 li
98.8642 373.687 li
105.984 373.687 li
103.706 373.687 li
103.706 378.771 li
101.534 380.595 li
102.271 375.081 mo
101.709 375.081 101.254 375.536 101.254 376.098 cv
101.254 376.659 101.709 377.115 102.271 377.115 cv
102.833 377.115 103.288 376.659 103.288 376.098 cv
103.288 375.536 102.833 375.081 102.271 375.081 cv
f
103.706 380.822 mo
101.534 380.595 li
103.706 378.771 li
103.706 380.822 li
.294118 .117647 .0509804 rgb
f
102.271 377.115 mo
101.709 377.115 101.254 376.659 101.254 376.098 cv
101.254 375.536 101.709 375.081 102.271 375.081 cv
102.833 375.081 103.288 375.536 103.288 376.098 cv
103.288 376.659 102.833 377.115 102.271 377.115 cv
.14902 .203922 .2 rgb
f
58.5894 417.833 mo
58.5894 413.602 li
85.406 413.602 li
58.5894 417.833 li
.831372 .505882 .317647 rgb
f
67.1287 404.325 mo
64.0169 404.325 li
88.9687 383.277 li
67.1287 404.325 li
f
55.9929 412.111 mo
53.1226 412.111 li
53.1226 412.11 li
54.8446 412.111 li
54.9144 412.111 li
54.9144 412.111 li
55.9929 412.111 li
.270588 .317647 .333333 rgb
f
54.8446 412.111 mo
53.1226 412.111 li
53.1226 412.11 li
54.8446 412.111 li
54.8446 412.111 li
.568627 .270588 .156863 rgb
f
55.9929 412.111 mo
54.9144 412.111 li
55.9929 412.111 li
55.9929 412.111 li
.392157 .156863 .0745098 rgb
f
54.9144 412.111 mo
54.8446 412.111 li
54.8446 412.111 li
54.9144 412.11 li
54.9144 412.111 li
.203922 .235294 .223529 rgb
f
54.8446 412.111 mo
53.1226 412.111 li
53.1226 412.11 li
54.8446 412.11 li
54.8446 412.111 li
.427451 .2 .105882 rgb
f
55.9929 412.111 mo
54.9144 412.111 li
54.9144 412.111 li
55.9929 412.11 li
55.9929 412.111 li
.294118 .117647 .0509804 rgb
f
56.8969 412.111 mo
55.9929 412.111 li
56.8969 412.111 li
56.8969 412.11 li
55.9929 409.699 mo
59.7673 406.529 li
55.9929 409.699 li
55.9929 407.038 mo
55.9929 375.845 li
59.7673 376.238 li
59.7673 378.471 li
59.4514 378.644 59.2372 378.979 59.2372 379.364 cv
59.2372 379.749 59.4514 380.085 59.7673 380.257 cv
59.7673 404.211 li
55.9929 407.038 li
.392157 .156863 .0745098 rgb
f
56.8969 421.262 mo
53.1226 421.262 li
53.1226 412.11 li
55.9929 412.111 li
56.8969 412.111 li
56.8969 421.262 li
.568627 .270588 .156863 rgb
f
55.9929 412.111 mo
55.9929 412.111 li
55.9929 412.11 li
55.9929 409.699 li
59.7673 406.529 li
59.7673 412.11 li
56.8969 412.11 li
55.9929 412.111 li
f
55.9929 409.699 mo
55.9929 407.038 li
59.7673 404.211 li
59.7673 406.529 li
55.9929 409.699 li
.294118 .117647 .0509804 rgb
f
59.7673 380.257 mo
59.4514 380.085 59.2372 379.749 59.2372 379.364 cv
59.2372 378.979 59.4514 378.644 59.7673 378.471 cv
59.7673 380.257 li
.14902 .203922 .2 rgb
f
59.7673 373.687 mo
55.9929 373.687 li
55.9929 373.686 li
53.1226 373.686 li
53.1226 366.403 li
56.8969 366.719 li
56.8969 373.686 li
59.7673 373.686 li
59.7673 373.687 li
.568627 .270588 .156863 rgb
f
59.7673 376.238 mo
55.9929 375.845 li
55.9929 373.687 li
59.7673 373.687 li
59.7673 375.845 li
59.7673 376.238 li
.294118 .117647 .0509804 rgb
f
107.48 412.111 mo
106.871 412.111 li
103.706 411.706 li
103.706 409.952 li
103.706 408.593 li
104.059 408.434 104.305 408.078 104.305 407.665 cv
104.305 407.252 104.059 406.897 103.706 406.737 cv
103.706 385.147 li
107.48 381.215 li
107.48 412.111 li
106.871 412.111 mo
103.706 412.111 li
106.871 412.111 li
.392157 .156863 .0745098 rgb
f
109.758 421.262 mo
105.984 421.262 li
105.984 412.111 li
103.706 412.111 li
106.871 412.111 li
107.48 412.111 li
109.758 412.111 li
109.758 421.262 li
.568627 .270588 .156863 rgb
f
106.871 412.111 mo
103.706 412.111 li
103.706 411.706 li
106.871 412.111 li
103.706 385.147 mo
103.706 380.822 li
107.48 381.215 li
107.48 381.216 li
103.706 385.147 li
.294118 .117647 .0509804 rgb
f
109.758 373.687 mo
107.48 373.687 li
105.984 373.685 li
105.984 370.819 li
109.758 371.134 li
109.758 373.687 li
.568627 .270588 .156863 rgb
f
107.48 373.687 mo
107.48 373.687 li
105.984 373.687 li
105.984 373.685 li
107.48 373.687 li
f
103.706 408.593 mo
103.706 406.737 li
104.059 406.897 104.305 407.252 104.305 407.665 cv
104.305 408.078 104.059 408.434 103.706 408.593 cv
.14902 .203922 .2 rgb
f
103.706 378.771 mo
103.706 373.687 li
105.984 373.687 li
107.48 373.687 li
107.48 375.6 li
103.706 378.771 li
.427451 .2 .105882 rgb
f
107.48 381.215 mo
103.706 380.822 li
103.706 378.771 li
107.48 375.6 li
107.48 381.215 li
.219608 .0862745 .0352941 rgb
f
42.1468 355.384 mo
33.6238 355.384 li
33.6238 316.96 li
42.1468 316.96 li
42.1468 355.384 li
.521569 .211765 .109804 rgb
f
50.7396 355.384 mo
42.2166 355.384 li
42.2166 316.96 li
50.7396 316.96 li
50.7396 355.384 li
.580392 .235294 .121569 rgb
f
59.3324 355.384 mo
50.8095 355.384 li
50.8095 316.96 li
59.3324 316.96 li
59.3324 355.384 li
.760784 .364706 .235294 rgb
f
67.9252 355.384 mo
59.4023 355.384 li
59.4023 316.96 li
67.9252 316.96 li
67.9252 355.384 li
.580392 .235294 .121569 rgb
f
76.5181 355.384 mo
67.9951 355.384 li
67.9951 316.96 li
76.5181 316.96 li
76.5181 355.384 li
.760784 .364706 .235294 rgb
f
85.1109 355.384 mo
76.5879 355.384 li
76.5879 316.96 li
85.1109 316.96 li
85.1109 355.384 li
.521569 .211765 .109804 rgb
f
87.3893 316.96 mo
30.7535 316.96 li
30.7535 307.808 li
87.3893 307.808 li
87.3893 316.96 li
.760784 .364706 .235294 rgb
f
87.3893 364.535 mo
30.7535 364.535 li
30.7535 355.384 li
87.3893 355.384 li
87.3893 364.535 li
f
85.1109 316.96 mo
85.1112 318.873 li
41.6477 355.384 li
33.6238 355.384 li
33.6238 352.973 li
76.5092 316.948 li
85.1109 316.96 li
f
76.5879 355.384 mo
76.5181 355.384 li
76.5181 354.363 li
76.5879 354.372 li
76.5879 355.384 li
67.9951 355.384 mo
67.9252 355.384 li
67.9252 353.264 li
67.9951 353.273 li
67.9951 355.384 li
59.4023 355.384 mo
59.3324 355.384 li
59.3324 352.165 li
59.4023 352.174 li
59.4023 355.384 li
.231373 .278431 .294118 rgb
f
50.7396 349.864 mo
50.7396 347.746 li
50.8095 347.688 li
50.8095 349.836 li
50.7396 349.864 li
.270588 .317647 .333333 rgb
f
50.8095 355.384 mo
50.7396 355.384 li
50.7396 349.864 li
50.8095 349.836 li
50.8095 355.384 li
.231373 .278431 .294118 rgb
f
42.2166 355.384 mo
42.1468 355.384 li
42.1468 354.964 li
42.2166 354.906 li
42.2166 355.384 li
.180392 .184314 .176471 rgb
f
59.4023 346.517 mo
59.3324 346.51 li
59.3324 340.528 li
59.4023 340.469 li
59.4023 346.517 li
.270588 .317647 .333333 rgb
f
59.3324 351.337 mo
59.3324 346.51 li
59.4023 346.517 li
59.4023 351.265 li
59.3324 351.337 li
.231373 .278431 .294118 rgb
f
67.9252 342.388 mo
67.9252 333.31 li
67.9951 333.251 li
67.9951 342.315 li
67.9252 342.388 li
.301961 .360784 .372549 rgb
f
76.5181 327.298 mo
76.5181 326.092 li
76.5879 326.033 li
76.5879 327.285 li
76.5181 327.298 li
.270588 .317647 .333333 rgb
f
76.5181 333.438 mo
76.5181 327.298 li
76.5879 327.285 li
76.5879 333.366 li
76.5181 333.438 li
.301961 .360784 .372549 rgb
f
42.1468 355.384 mo
41.6477 355.384 li
42.1468 354.964 li
42.1468 355.384 li
.392157 .156863 .0745098 rgb
f
50.7396 355.384 mo
42.2166 355.384 li
42.2166 354.906 li
50.7396 347.746 li
50.7396 349.864 li
50.7396 355.384 li
.435294 .176471 .0823529 rgb
f
59.3324 355.384 mo
50.8095 355.384 li
50.8095 349.836 li
50.8095 347.688 li
59.3324 340.528 li
59.3324 346.51 li
59.3324 351.337 li
58.6251 352.074 li
59.3324 352.165 li
59.3324 355.384 li
.568627 .270588 .156863 rgb
f
67.9252 355.384 mo
59.4023 355.384 li
59.4023 352.174 li
67.9252 353.264 li
67.9252 355.384 li
59.4023 351.265 mo
59.4023 346.517 li
59.4023 340.469 li
67.9252 333.31 li
67.9252 342.388 li
59.4023 351.265 li
.435294 .176471 .0823529 rgb
f
76.5181 355.384 mo
67.9951 355.384 li
67.9951 353.273 li
76.5181 354.363 li
76.5181 355.384 li
67.9951 342.315 mo
67.9951 333.251 li
76.5181 326.092 li
76.5181 327.298 li
76.5181 333.438 li
67.9951 342.315 li
.568627 .270588 .156863 rgb
f
81.3366 355.384 mo
76.5879 355.384 li
76.5879 354.372 li
81.3366 354.979 li
81.3366 355.384 li
76.5879 333.366 mo
76.5879 327.285 li
76.5879 326.033 li
79.1651 323.868 li
81.3366 324.095 li
81.3366 328.42 li
76.5879 333.366 li
.392157 .156863 .0745098 rgb
f
85.1109 324.489 mo
85.1109 324.488 li
85.1112 324.488 li
85.1112 324.488 mo
85.1112 324.488 li
85.111 318.874 li
85.1112 318.873 li
85.1112 324.488 li
.270588 .317647 .333333 rgb
f
42.1468 345.813 mo
42.1468 343.928 li
42.2166 343.876 li
42.2166 345.754 li
42.1468 345.813 li
.215686 .211765 .2 rgb
f
50.7396 338.595 mo
50.7396 337.492 li
50.8095 337.44 li
50.8095 338.536 li
50.7396 338.595 li
59.3324 331.377 mo
59.3324 331.057 li
59.4023 331.005 li
59.4023 331.318 li
59.3324 331.377 li
.270588 .317647 .333333 rgb
f
37.3981 349.802 mo
37.3981 347.484 li
42.1468 343.928 li
42.1468 345.813 li
37.3981 349.802 li
.392157 .156863 .0745098 rgb
f
42.2166 345.754 mo
42.2166 343.876 li
50.7396 337.492 li
50.7396 338.595 li
42.2166 345.754 li
.435294 .176471 .0823529 rgb
f
50.8095 338.536 mo
50.8095 337.44 li
59.3324 331.057 li
59.3324 331.377 li
50.8095 338.536 li
.568627 .270588 .156863 rgb
f
59.4023 331.318 mo
59.4023 331.005 li
62.8457 328.426 li
59.4023 331.318 li
.435294 .176471 .0823529 rgb
f
37.3981 349.802 mo
37.3981 349.802 li
42.1468 345.813 li
42.2166 345.754 li
50.7396 338.595 li
50.8095 338.536 li
59.3324 331.377 li
59.4023 331.318 li
62.8454 328.426 li
62.8457 328.426 li
37.3981 349.802 li
.568627 .270588 .156863 rgb
f
38.9025 322.637 mo
38.9025 323.199 38.447 323.654 37.8854 323.654 cv
37.3236 323.654 36.8681 323.199 36.8681 322.637 cv
36.8681 322.075 37.3236 321.62 37.8854 321.62 cv
38.447 321.62 38.9025 322.075 38.9025 322.637 cv
.2 .27451 .301961 rgb
f
81.9363 350.938 mo
81.9363 351.5 81.4809 351.955 80.9192 351.955 cv
80.3574 351.955 79.9019 351.5 79.9019 350.938 cv
79.9019 350.377 80.3574 349.921 80.9192 349.921 cv
81.4809 349.921 81.9363 350.377 81.9363 350.938 cv
f
39.9196 352.973 mo
39.9196 353.534 39.4643 353.99 38.9025 353.99 cv
38.3407 353.99 37.8854 353.534 37.8854 352.973 cv
37.8854 352.411 38.3407 351.955 38.9025 351.955 cv
39.4643 351.955 39.9196 352.411 39.9196 352.973 cv
f
60.4194 336.172 mo
60.4194 336.734 59.964 337.189 59.4022 337.189 cv
58.8405 337.189 58.3851 336.734 58.3851 336.172 cv
58.3851 335.61 58.8405 335.155 59.4022 335.155 cv
59.964 335.155 60.4194 335.61 60.4194 336.172 cv
cp
f
80.9192 319.371 mo
80.9192 319.933 80.4637 320.388 79.9019 320.388 cv
79.3402 320.388 78.8848 319.933 78.8848 319.371 cv
78.8848 318.809 79.3402 318.354 79.9019 318.354 cv
80.4637 318.354 80.9192 318.809 80.9192 319.371 cv
f
67.9951 322.703 mo
67.9252 322.696 li
67.9252 316.96 li
67.9951 316.96 li
67.9951 322.703 li
59.4023 321.807 mo
59.3324 321.8 li
59.3324 316.96 li
59.4023 316.96 li
59.4023 321.807 li
50.8095 320.91 mo
50.7396 320.903 li
50.7396 316.96 li
50.8095 316.96 li
50.8095 320.91 li
.270588 .317647 .333333 rgb
f
42.2166 320.014 mo
42.1468 320.007 li
42.1468 316.96 li
42.2166 316.96 li
42.2166 320.014 li
.215686 .211765 .2 rgb
f
42.1468 320.007 mo
37.3981 319.512 li
37.3981 319.118 li
37.3981 316.96 li
34.5279 316.96 li
42.1468 316.96 li
42.1468 320.007 li
.392157 .156863 .0745098 rgb
f
50.7396 320.903 mo
42.2166 320.014 li
42.2166 316.96 li
50.7396 316.96 li
50.7396 320.903 li
.435294 .176471 .0823529 rgb
f
59.3324 321.8 mo
50.8095 320.91 li
50.8095 316.96 li
59.3324 316.96 li
59.3324 321.8 li
.568627 .270588 .156863 rgb
f
67.9252 322.696 mo
59.4023 321.807 li
59.4023 316.96 li
67.9252 316.96 li
67.9252 322.696 li
.435294 .176471 .0823529 rgb
f
69.4743 322.857 mo
67.9951 322.703 li
67.9951 316.96 li
76.4952 316.96 li
69.4743 322.857 li
.568627 .270588 .156863 rgb
f
79.1651 323.868 mo
69.4743 322.857 li
76.4952 316.96 li
83.615 316.96 li
83.615 316.96 li
81.3366 316.96 li
81.3366 322.044 li
79.1651 323.868 li
79.9019 318.354 mo
79.3402 318.354 78.8848 318.809 78.8848 319.371 cv
78.8848 319.933 79.3402 320.388 79.9019 320.388 cv
80.4637 320.388 80.9192 319.933 80.9192 319.371 cv
80.9192 318.809 80.4637 318.354 79.9019 318.354 cv
85.1109 318.874 mo
85.1109 316.96 li
85.111 318.874 li
85.1112 318.873 li
f
85.1112 324.488 mo
85.1112 324.488 li
85.1109 318.874 li
85.1112 318.873 li
85.1112 324.488 li
.203922 .235294 .223529 rgb
f
81.3366 324.095 mo
79.1651 323.868 li
81.3366 322.044 li
81.3366 324.095 li
.294118 .117647 .0509804 rgb
f
79.9019 320.388 mo
79.3402 320.388 78.8848 319.933 78.8848 319.371 cv
78.8848 318.809 79.3402 318.354 79.9019 318.354 cv
80.4637 318.354 80.9192 318.809 80.9192 319.371 cv
80.9192 319.933 80.4637 320.388 79.9019 320.388 cv
.14902 .203922 .2 rgb
f
36.2202 361.107 mo
36.2202 356.875 li
63.0369 356.875 li
36.2202 361.107 li
.831372 .505882 .317647 rgb
f
44.7595 347.599 mo
41.6477 347.599 li
66.5997 326.55 li
44.7595 347.599 li
f
33.6238 355.384 mo
30.7535 355.384 li
30.7535 355.384 li
33.6238 355.384 li
33.6238 355.384 li
.215686 .211765 .2 rgb
f
34.5279 355.384 mo
33.6238 355.384 li
34.5279 355.384 li
34.5279 355.384 li
.392157 .156863 .0745098 rgb
f
30.7535 364.535 mo
30.7535 364.535 li
30.7535 355.384 li
33.6238 355.384 li
34.5279 355.384 li
34.5279 364.535 li
30.7535 364.535 li
30.7549 364.535 li
.568627 .270588 .156863 rgb
f
33.6238 350.311 mo
33.6238 319.118 li
37.3981 319.512 li
37.3981 321.744 li
37.0823 321.917 36.8681 322.252 36.8681 322.637 cv
36.8681 323.023 37.0823 323.358 37.3981 323.53 cv
37.3981 347.484 li
33.6238 350.311 li
.392157 .156863 .0745098 rgb
f
34.5279 316.96 mo
30.7535 316.96 li
30.7535 307.808 li
34.5279 307.808 li
34.5279 316.96 li
.568627 .270588 .156863 rgb
f
33.6238 355.384 mo
33.6238 355.384 li
33.6238 355.384 li
33.6238 352.973 li
37.3981 349.802 li
37.3981 355.384 li
34.5279 355.384 li
33.6238 355.384 li
f
33.6238 352.973 mo
33.6238 350.311 li
37.3981 347.484 li
37.3981 349.802 li
33.6238 352.973 li
.294118 .117647 .0509804 rgb
f
37.3981 323.53 mo
37.0823 323.358 36.8681 323.023 36.8681 322.637 cv
36.8681 322.252 37.0823 321.917 37.3981 321.744 cv
37.3981 323.53 li
.14902 .203922 .2 rgb
f
37.3981 319.512 mo
33.6238 319.118 li
33.6238 316.96 li
34.5279 316.96 li
37.3981 316.96 li
37.3981 319.118 li
37.3981 319.512 li
.294118 .117647 .0509804 rgb
f
85.1109 355.384 mo
84.5018 355.384 li
81.3366 354.979 li
81.3366 353.226 li
81.3366 351.866 li
81.6901 351.707 81.9363 351.351 81.9363 350.938 cv
81.9363 350.525 81.6901 350.17 81.3366 350.01 cv
81.3366 328.42 li
85.1112 324.488 li
85.1109 355.384 li
84.5018 355.384 mo
81.3366 355.384 li
84.5018 355.384 li
.392157 .156863 .0745098 rgb
f
87.3893 364.535 mo
83.615 364.535 li
83.615 355.384 li
81.3366 355.384 li
84.5018 355.384 li
85.1109 355.384 li
87.3893 355.384 li
87.3893 364.535 li
.568627 .270588 .156863 rgb
f
87.3893 316.96 mo
85.1109 316.96 li
85.1109 316.96 li
87.3893 316.96 li
87.3893 307.808 li
87.3893 316.96 li
.270588 .317647 .333333 rgb
f
87.3893 316.96 mo
85.1109 316.96 li
83.615 316.958 li
83.615 307.808 li
87.3893 307.808 li
87.3893 316.96 li
.568627 .270588 .156863 rgb
f
85.1109 316.96 mo
85.1109 316.96 li
85.1109 316.96 li
83.615 316.96 li
83.615 316.958 li
85.1109 316.96 li
85.1109 316.96 li
f
84.5018 355.384 mo
81.3366 355.384 li
81.3366 354.979 li
84.5018 355.384 li
.294118 .117647 .0509804 rgb
f
81.3366 328.42 mo
81.3366 324.095 li
85.1112 324.488 li
85.1109 324.489 li
81.3366 328.42 li
f
81.3366 351.866 mo
81.3366 350.01 li
81.6901 350.17 81.9363 350.525 81.9363 350.938 cv
81.9363 351.351 81.6901 351.707 81.3366 351.866 cv
.14902 .203922 .2 rgb
f
81.3366 322.044 mo
81.3366 316.96 li
83.615 316.96 li
85.1109 316.96 li
85.1109 316.96 li
85.1109 318.874 li
81.3366 322.044 li
.427451 .2 .105882 rgb
f
85.1112 324.488 mo
81.3366 324.095 li
81.3366 322.044 li
85.1112 318.873 li
85.1109 324.488 li
.219608 .0862745 .0352941 rgb
f
54.9144 411.098 mo
54.8446 411.089 li
54.8446 390.165 li
54.9144 390.092 li
54.9144 411.098 li
.156863 .184314 .192157 rgb
f
53.1226 412.111 mo
47.18 412.111 li
47.18 412.11 li
53.1226 412.111 li
53.1226 412.11 li
54.8446 411.089 mo
50.0504 410.476 li
50.0504 409.699 li
50.0504 407.038 li
50.0504 395.158 li
54.8446 390.165 li
54.8446 411.089 li
.329412 .156863 .0901961 rgb
f
55.9929 411.236 mo
54.9144 411.098 li
54.9144 390.092 li
55.9929 388.969 li
55.9929 411.236 li
.223529 .0901961 .0431373 rgb
f
53.1226 421.262 mo
47.18 421.262 li
47.18 412.11 li
53.1226 412.111 li
53.1226 412.11 li
53.1226 412.111 li
53.1226 421.262 li
.329412 .156863 .0901961 rgb
f
50.0504 386.846 mo
50.0504 379.819 li
55.9929 380.439 li
55.9929 381.854 li
50.0504 386.846 li
f
54.9144 412.11 mo
54.8446 412.11 li
54.8446 411.089 li
54.9144 411.098 li
54.9144 412.111 li
.117647 .137255 .129412 rgb
f
54.8446 390.165 mo
54.8446 382.819 li
54.9144 382.76 li
54.9144 390.092 li
54.8446 390.165 li
f
53.1226 412.111 mo
47.18 412.11 li
47.18 412.11 li
50.0504 412.11 li
50.0504 410.476 li
54.8446 411.089 li
54.8446 412.111 li
53.1226 412.11 li
50.0504 395.158 mo
50.0504 386.846 li
54.8446 382.819 li
54.8446 390.165 li
50.0504 395.158 li
.247059 .113725 .0588235 rgb
f
55.9929 412.11 mo
54.9144 412.11 li
54.9144 411.098 li
55.9929 411.236 li
55.9929 412.111 li
54.9144 390.092 mo
54.9144 382.76 li
55.9929 381.854 li
55.9929 388.969 li
54.9144 390.092 li
.168627 .0666667 .027451 rgb
f
53.1226 373.687 mo
47.18 373.687 li
47.18 373.686 li
47.18 365.907 li
30.7549 364.535 li
34.5279 364.535 li
53.1226 364.535 li
53.1226 373.687 li
.329412 .156863 .0901961 rgb
f
50.0504 377.694 mo
50.0504 375.845 li
50.0504 373.687 li
47.18 373.687 li
53.1226 373.687 li
54.8216 373.687 li
50.0504 377.694 li
.247059 .113725 .0588235 rgb
f
55.9929 380.439 mo
50.0504 379.819 li
50.0504 377.694 li
54.8216 373.687 li
55.9929 373.687 li
55.9929 380.439 li
f
53.1226 373.687 mo
53.1226 373.687 li
53.1226 364.535 li
53.1226 373.686 li
53.1226 373.687 li
.329412 .156863 .0901961 rgb
f
109.758 371.134 mo
109.758 371.134 li
109.758 364.535 li
87.3893 364.535 li
109.759 364.535 li
109.758 371.134 li
.156863 .184314 .192157 rgb
f
105.984 370.819 mo
56.8969 366.719 li
56.8969 364.535 li
83.615 364.535 li
87.3893 364.535 li
109.758 364.535 li
105.984 364.535 li
105.984 370.819 li
.329412 .156863 .0901961 rgb
f
54.9144 412.11 mo
54.8446 412.11 li
54.8446 412.111 li
54.9144 412.11 li
54.9144 412.111 li
.0862745 .101961 .0862745 rgb
f
53.1226 412.111 mo
53.1226 412.111 li
53.1226 412.11 li
54.8446 412.11 li
54.8446 412.111 li
53.1226 412.11 li
.184314 .0862745 .0392157 rgb
f
55.9929 412.11 mo
54.9144 412.11 li
54.9144 412.111 li
55.9929 412.11 li
55.9929 412.111 li
.12549 .0509804 .0196078 rgb
f
53.1226 421.262 mo
53.1226 421.262 li
53.1226 412.11 li
53.1226 412.111 li
53.1226 421.262 li
.247059 .113725 .0588235 rgb
f
53.1226 373.686 mo
53.1226 373.686 li
53.1226 364.535 li
56.8969 364.535 li
56.8969 366.719 li
53.1226 366.403 li
53.1226 373.686 li
f
109.758 371.134 mo
105.984 370.819 li
105.984 364.535 li
109.758 364.535 li
109.758 371.134 li
f
83.615 364.535 mo
56.8969 364.535 li
53.1226 364.535 li
34.5279 364.535 li
83.615 364.535 li
83.615 364.535 li
.329412 .156863 .0901961 rgb
f
34.5279 364.535 mo
30.7535 364.535 li
30.7535 364.535 li
34.5279 364.535 li
34.5279 364.535 li
.247059 .113725 .0588235 rgb
f
87.3893 364.535 mo
83.615 364.535 li
87.3893 364.535 li
87.3893 364.535 li
f
286.549 309.834 mo
282.332 309.834 li
279.589 291.919 li
266.258 291.919 li
263.515 274.003 li
245.858 274.003 li
246.932 274.003 li
244.189 256.088 li
225.457 256.088 li
227.515 256.088 li
224.772 239.618 li
206.703 239.618 li
212.124 239.618 li
209.381 224.592 li
189.593 224.592 li
193.473 224.592 li
190.734 209.361 li
200.396 209.341 li
286.549 291.919 li
286.549 309.834 li
.211765 .211765 .227451 rgb
f
193.473 224.592 mo
189.593 224.592 li
187 224.592 li
183.625 209.375 li
190.734 209.361 li
193.473 224.592 li
.756863 .345098 .203922 rgb
f
212.124 239.618 mo
206.703 239.618 li
204 239.618 li
200.673 224.807 li
204 224.592 li
200.625 224.592 li
187 224.592 li
189.593 224.592 li
209.381 224.592 li
212.124 239.618 li
.662745 .27451 .141176 rgb
f
227.515 256.088 mo
225.457 256.088 li
216.5 256.088 li
213.5 239.618 li
204 239.618 li
206.703 239.618 li
224.772 239.618 li
227.515 256.088 li
.701961 .305882 .172549 rgb
f
246.932 274.003 mo
245.858 274.003 li
234.375 274.003 li
230.814 256.406 li
244.176 256.088 li
230.75 256.088 li
216.5 256.088 li
225.457 256.088 li
244.189 256.088 li
246.932 274.003 li
.756863 .345098 .203922 rgb
f
266.258 291.919 mo
254 291.919 li
250.044 274.199 li
255.834 274.003 li
250 274.003 li
234.375 274.003 li
245.858 274.003 li
263.515 274.003 li
266.258 291.919 li
.662745 .27451 .141176 rgb
f
282.332 309.834 mo
282.319 309.834 li
279.576 291.919 li
263.928 291.919 li
254 291.919 li
266.258 291.919 li
279.589 291.919 li
282.332 309.834 li
.701961 .305882 .172549 rgb
f
266.857 308.329 mo
264.383 294.463 li
270 294.653 li
277.077 297.24 li
278.75 305.244 li
278.5 307.808 li
266.857 308.329 li
f
146.27 322.203 mo
124.137 322.203 li
123.337 315.92 li
147.07 315.92 li
146.27 322.203 li
.760784 .364706 .235294 rgb
f
135.204 322.203 mo
126.612 322.203 li
128.832 330.839 li
131.604 337.31 li
134.069 350.939 li
135.204 352.186 li
136.339 350.939 li
138.804 337.31 li
141.576 330.839 li
143.796 322.203 li
135.204 322.203 li
.521569 .211765 .109804 rgb
f
124.954 315.92 mo
126.154 313.653 li
144.204 314.153 li
145.104 315.92 li
124.954 315.92 li
cp
.909804 .843137 .811765 rgb
f
135.204 352.186 mo
136.004 350.053 li
136.678 342.738 li
137.836 342.663 li
136.339 350.939 li
135.204 352.186 li
138.886 337.118 mo
137.204 337.04 li
137.304 335.953 li
139.604 327.953 li
137.604 325.353 li
127.035 323.845 li
126.612 322.203 li
143.796 322.203 li
141.576 330.839 li
138.886 337.118 li
.411765 .141176 .0666667 rgb
f
126.681 302.553 mo
125.882 292.853 135.681 284.553 135.381 280.453 cv
135.081 276.354 135.831 279.153 137.806 282.953 cv
139.781 286.753 146.281 297.987 141.981 307.453 cv
137.681 316.92 127.482 312.253 126.681 302.553 cv
.960784 .521569 .341176 rgb
f
135.871 283.52 mo
135.871 283.52 140.617 289.568 141.537 297.92 cv
142.457 306.272 136.204 310.12 132.137 307.12 cv
128.071 304.12 128.604 298.853 130.937 294.52 cv
133.271 290.187 132.787 294.987 135.029 296.12 cv
137.271 297.253 140.737 292.92 135.871 283.52 cv
.960784 .745098 .341176 rgb
f
130.671 302.199 mo
130.516 302.199 130.329 302.05 130.104 301.703 cv
128.904 299.853 131.154 295.826 131.154 295.826 cv
131.481 295.362 131.674 295.169 131.779 295.169 cv
132.076 295.169 131.665 296.71 131.554 298.003 cv
131.432 299.425 131.343 302.199 130.671 302.199 cv
.972549 .835294 .572549 rgb
f
134.606 313.887 mo
134.054 311.053 li
134.606 307.053 li
134.33 304.353 li
134.804 304.353 li
135.38 307.053 li
135.204 311.003 li
136.704 313.945 li
134.606 313.887 li
cp
.152941 .294118 .341176 rgb
f
140.074 337.173 mo
130.271 336.719 li
131.885 343.053 li
139.004 342.586 li
140.074 337.173 li
.960784 .521569 .341176 rgb
f
134.871 342.319 mo
132.304 342.319 li
131.204 337.553 li
134.671 337.553 li
134.871 342.319 li
.972549 .690196 .572549 rgb
f
123.628 421.267 mo
109.758 421.262 li
109.759 419.157 li
123.628 416.312 li
123.628 421.267 li
.286274 .282353 .298039 rgb
f
144.5 421.276 mo
144.5 421.276 li
123.628 421.267 li
123.628 416.312 li
123.628 380.381 li
124.954 418.5 li
144.5 421.276 li
.211765 .211765 .227451 rgb
f
408.118 184.953 mo
408.664 181.373 li
408.664 177.139 li
395.124 175.282 li
395.125 175.282 li
384.289 173.796 li
384.706 172.982 li
401.477 175.282 li
401.476 175.282 li
415.017 177.139 li
415.017 178.01 li
412.317 177.64 li
409.604 180.563 li
409.101 182.049 li
408.118 184.953 li
.286274 .282353 .298039 rgb
f
415.017 178.01 mo
412.317 177.64 li
415.017 178.01 li
415.017 178.01 li
.717647 .556863 .486274 rgb
f
408.118 184.953 mo
408.118 184.953 li
409.101 182.049 li
408.118 184.953 li
.639216 .498039 .431373 rgb
f
348.21 184.277 mo
346.859 181.306 li
343.371 176.793 li
348.056 176.15 li
347.197 181.103 li
348.21 184.277 li
.286274 .282353 .298039 rgb
f
348.21 184.278 mo
348.21 184.277 li
347.197 181.103 li
348.21 184.278 li
347.197 181.103 mo
347.197 181.103 li
348.055 176.15 li
348.056 176.15 li
347.197 181.103 li
.717647 .556863 .486274 rgb
f
413.862 309.834 mo
413.352 309.834 li
420.347 307.639 li
420.347 307.639 li
420.599 303.682 li
421.789 285.019 li
421.883 283.529 li
421.883 283.528 li
421.883 283.528 li
416.898 280.69 li
414.973 280.285 li
422.239 277.953 li
422.239 277.953 li
424.016 250.063 li
420.477 247.697 li
415.007 247.089 li
420.883 246.549 li
424.385 244.269 li
425.318 229.629 li
425.699 223.653 li
425.699 223.654 li
426.392 212.782 li
426.392 212.782 li
424.26 209.335 li
419.667 208.254 li
424.192 208.119 li
426.74 207.316 li
427.231 199.609 li
418.857 178.537 li
417.952 178.413 li
418.669 177.64 li
425.209 178.537 li
433.583 199.609 li
433.092 207.316 li
430.544 208.119 li
426.019 208.254 li
430.612 209.335 li
432.744 212.782 li
432.744 212.782 li
430.737 244.269 li
427.235 246.549 li
421.359 247.089 li
426.829 247.697 li
430.368 250.063 li
428.591 277.953 li
428.591 277.953 li
421.325 280.285 li
423.25 280.69 li
428.236 283.528 li
428.236 283.528 li
426.951 303.682 li
426.699 307.639 li
419.704 309.833 li
413.862 309.833 li
413.862 309.833 li
413.862 309.834 li
.286274 .282353 .298039 rgb
f
413.862 309.834 mo
408.999 309.834 li
407.51 309.834 li
407.51 309.834 li
413.352 309.834 li
413.862 309.834 li
.352941 .352941 .372549 rgb
f
407.51 309.834 mo
407.51 309.834 li
407.51 309.833 li
407.51 309.833 li
407.51 309.834 li
421.789 285.019 mo
421.883 283.528 li
421.883 283.529 li
421.789 285.019 li
416.898 280.69 mo
416.898 280.69 li
414.973 280.285 li
416.898 280.69 li
424.016 250.063 mo
424.016 250.063 li
415.007 247.089 mo
415.007 247.089 li
419.667 208.254 mo
419.667 208.254 li
427.231 199.609 mo
427.231 199.609 li
418.857 178.537 li
417.952 178.413 li
417.952 178.413 li
418.857 178.537 li
427.231 199.609 li
.717647 .556863 .486274 rgb
f
425.318 229.629 mo
425.699 223.654 li
425.699 223.653 li
425.318 229.629 li
.254902 .25098 .266667 rgb
f
413.352 309.834 mo
407.51 309.834 li
407.51 309.833 li
413.352 309.833 li
420.347 307.639 li
420.347 307.639 li
413.352 309.834 li
424.192 208.119 mo
426.74 207.316 li
427.231 199.609 li
426.74 207.316 li
424.192 208.119 li
427.231 199.609 mo
427.231 199.609 li
.639216 .498039 .431373 rgb
f
375.496 180.631 mo
375.496 176.781 li
374.501 172.523 li
377.931 172.053 li
380.836 172.451 li
381.046 173.351 li
378.354 172.982 li
378.075 173.528 li
378.075 173.527 li
376.307 176.983 li
375.496 180.631 li
.286274 .282353 .298039 rgb
f
378.075 173.528 mo
378.075 173.528 li
378.354 172.982 li
381.046 173.351 li
381.046 173.351 li
378.354 172.982 li
378.075 173.528 li
.717647 .556863 .486274 rgb
f
376.307 176.983 mo
378.075 173.527 li
378.075 173.528 li
376.307 176.983 li
.254902 .25098 .266667 rgb
f
197.135 395.938 mo
189.485 395.938 183.284 389.922 183.284 382.502 cv
183.284 382.196 183.296 381.894 183.318 381.594 cv
183.82 388.787 189.814 394.466 197.135 394.466 cv
204.455 394.466 210.45 388.787 210.952 381.595 cv
210.974 381.894 210.986 382.196 210.986 382.502 cv
210.986 389.922 204.785 395.938 197.135 395.938 cv
186.177 381.574 mo
186.15 381.258 186.136 380.938 186.136 380.615 cv
186.136 379.799 186.225 379.004 186.394 378.238 cv
187.052 378.238 li
186.585 379.274 186.282 380.396 186.177 381.574 cv
208.092 381.573 mo
207.925 379.696 207.256 377.959 206.215 376.488 cv
207.286 376.373 li
207.832 377.678 208.134 379.112 208.134 380.615 cv
208.134 380.938 208.12 381.257 208.092 381.573 cv
.286274 .282353 .298039 rgb
f
187.052 378.238 mo
186.394 378.238 li
187.48 373.306 191.877 369.617 197.135 369.617 cv
201.706 369.617 205.625 372.405 207.286 376.373 cv
206.215 376.488 li
205.167 375.007 203.743 373.795 202.077 372.98 cv
201.959 373.52 201.488 373.934 200.896 373.934 cv
193.374 373.934 li
192.782 373.934 192.311 373.52 192.193 372.98 cv
189.91 374.097 188.081 375.959 187.052 378.238 cv
202.119 367.688 mo
200.572 367.091 198.892 366.764 197.135 366.764 cv
195.378 366.764 193.698 367.091 192.151 367.688 cv
192.225 367.096 192.745 366.638 193.374 366.638 cv
200.896 366.638 li
201.525 366.638 202.045 367.096 202.119 367.688 cv
.317647 .321569 .337255 rgb
f
125.497 72.4615 mo
126.063 67.2651 li
124.317 61.0014 li
129.005 59.7094 li
129.431 60.1435 129.859 60.5768 130.291 61.0108 cv
126.063 62.176 li
127.052 68.2047 li
125.497 72.4615 li
132.738 60.3363 mo
132.288 59.9079 131.841 59.4788 131.397 59.0501 cv
136.226 57.7192 li
138.566 58.7302 li
132.738 60.3363 li
.286274 .282353 .298039 rgb
f
161.027 77.975 mo
161.027 77.975 li
161.027 77.9748 li
161.027 77.975 li
.639216 .498039 .431373 rgb
f
161.027 77.9748 mo
161.978 76.3328 li
162.542 76.6666 li
161.027 77.9748 li
.286274 .282353 .298039 rgb
f
161.027 77.9748 mo
161.027 77.9748 li
162.542 76.6666 li
162.542 76.6666 li
161.027 77.9748 li
.717647 .556863 .486274 rgb
f
161.027 77.9748 mo
161.978 76.3327 li
161.978 76.3328 li
161.027 77.9748 li
.254902 .25098 .266667 rgb
f
94.1148 68.2047 mo
93.408 63.0242 li
90.988 58.8962 li
91.7823 57.7192 li
107.323 54.6586 li
109.339 55.4447 li
97.7902 57.7192 li
94.1148 63.1656 li
94.1148 68.2047 li
.286274 .282353 .298039 rgb
f
94.1148 68.2047 mo
93.408 63.0242 li
90.988 58.8962 li
90.988 58.8962 li
93.408 63.0242 li
94.1148 68.2047 li
94.1148 63.1656 li
94.1148 64.2964 li
94.1148 64.2965 li
94.1148 68.2047 li
.717647 .556863 .486274 rgb
f
30.8483 198.384 mo
26.6139 193.796 li
26.3285 189.696 li
25.7173 180.912 li
25.7173 180.912 li
25.0588 171.45 li
28.3102 167.067 li
35.5198 165.371 li
29.017 164.318 li
25.9463 155.495 li
25.9464 155.495 li
24.352 150.914 li
24.9338 146.898 li
25.0523 146.841 li
25.7869 141.148 li
32.6924 138.565 li
43.0111 137.265 li
49.019 137.265 li
38.7004 138.565 li
31.7736 141.156 li
30.3599 150.914 li
31.9543 155.495 li
31.9543 155.495 li
35.025 164.318 li
41.5277 165.371 li
36.0201 166.667 li
34.3181 167.067 li
31.0668 171.45 li
31.7252 180.912 li
31.7252 180.912 li
32.5487 192.745 li
32.6218 193.796 li
36.8551 198.383 li
30.8483 198.384 li
.286274 .282353 .298039 rgb
f
32.6218 193.796 mo
32.5487 192.745 li
32.5847 193.263 li
32.6218 193.796 li
31.0668 171.45 mo
31.0668 171.45 li
34.3181 167.067 li
36.0201 166.667 li
36.0201 166.667 li
34.3181 167.067 li
31.0668 171.45 li
30.3599 150.914 mo
30.3599 150.914 li
31.7736 141.156 li
38.7004 138.565 li
31.7736 141.156 li
30.3599 150.914 li
49.019 137.265 mo
43.0111 137.265 li
43.012 137.265 li
49.0199 137.265 li
49.019 137.265 li
.717647 .556863 .486274 rgb
f
32.5487 192.745 mo
31.7252 180.912 li
32.1824 187.482 li
32.5487 192.745 li
36.0201 166.667 mo
36.0201 166.667 li
41.5277 165.371 li
36.0201 166.667 li
41.5277 165.371 mo
35.025 164.318 li
31.9543 155.495 li
35.025 164.318 li
41.5277 165.371 li
.254902 .25098 .266667 rgb
f
32.5847 193.263 mo
32.5487 192.745 li
32.1824 187.482 li
32.3365 189.696 li
32.5847 193.263 li
36.0201 166.667 mo
36.0201 166.667 li
41.5277 165.371 li
36.0201 166.667 li
.639216 .498039 .431373 rgb
f
36.8627 198.391 mo
30.8547 198.391 li
30.8483 198.384 li
36.8551 198.383 li
36.8627 198.391 li
.352941 .352941 .372549 rgb
f
24.9338 146.898 mo
25.7656 141.156 li
25.7869 141.148 li
25.0523 146.841 li
24.9338 146.898 li
.243137 .247059 .262745 rgb
f
38.4176 137.265 mo
32.4098 137.265 li
32.4098 137.265 32.3448 137.217 32.2324 137.133 cv
32.2086 137.116 li
32.1322 137.059 32.0326 136.985 31.921 136.902 cv
30.3879 135.763 li
30.2863 135.687 30.1853 135.612 30.0836 135.537 cv
25.907 132.434 li
23.5039 117.508 li
26.14 113.695 li
26.1398 113.696 li
30.2893 107.695 li
36.5401 106.847 li
42.5481 106.847 li
36.2972 107.695 li
32.1478 113.695 li
32.1478 113.695 li
29.5118 117.508 li
31.915 132.434 li
38.4176 137.265 li
.286274 .282353 .298039 rgb
f
38.4176 137.265 mo
38.4176 137.265 li
31.915 132.434 li
33.9863 133.973 li
33.9869 133.973 33.9875 133.973 33.9883 133.974 cv
34.0907 134.05 35.1393 134.829 36.1904 135.61 cv
36.2336 135.642 36.2766 135.674 36.3197 135.706 cv
36.8655 136.112 37.4013 136.51 37.795 136.803 cv
37.8282 136.827 li
37.8284 136.827 li
37.8419 136.837 li
37.8546 136.847 37.8674 136.856 37.8798 136.866 cv
37.8845 136.869 li
37.8869 136.871 37.8891 136.872 37.8914 136.874 cv
37.9054 136.885 li
37.9059 136.885 37.9065 136.885 37.907 136.886 cv
37.9288 136.902 li
38.0405 136.985 38.1402 137.059 38.2164 137.116 cv
38.2212 137.119 li
38.3433 137.21 38.4143 137.263 38.4175 137.265 cv
38.4176 137.265 38.4176 137.265 38.4176 137.265 cv
32.1478 113.696 mo
32.1478 113.695 li
36.2972 107.695 li
42.5481 106.847 li
36.2972 107.695 li
32.1478 113.696 li
.717647 .556863 .486274 rgb
f
38.4175 137.265 mo
38.4143 137.263 38.3433 137.21 38.2212 137.119 cv
38.2404 137.133 li
38.3499 137.215 38.4145 137.263 38.4175 137.265 cv
37.907 136.886 mo
37.9065 136.885 37.9059 136.885 37.9054 136.885 cv
37.907 136.886 li
37.8914 136.874 mo
37.8891 136.872 37.8869 136.871 37.8845 136.869 cv
37.8914 136.874 li
37.8798 136.866 mo
37.8674 136.856 37.8546 136.847 37.8419 136.837 cv
37.8798 136.866 li
37.8284 136.827 mo
37.8282 136.827 li
37.8284 136.827 li
37.795 136.803 mo
37.4013 136.51 36.8655 136.112 36.3197 135.706 cv
36.345 135.725 36.3704 135.744 36.3958 135.763 cv
37.795 136.803 li
36.1904 135.61 mo
35.1393 134.829 34.0907 134.05 33.9883 133.974 cv
33.9875 133.973 33.9869 133.973 33.9863 133.973 cv
36.0915 135.537 li
36.1246 135.561 36.1575 135.586 36.1904 135.61 cv
32.1478 113.696 mo
32.1478 113.696 li
36.2972 107.695 li
42.5481 106.847 li
36.2973 107.695 li
32.1478 113.696 li
.639216 .498039 .431373 rgb
f
36.4386 106.847 mo
30.4307 106.847 li
30.4307 106.847 30.378 106.774 30.2954 106.659 cv
30.1681 106.482 li
29.9195 106.137 29.5319 105.599 29.1618 105.086 cv
29.1171 105.024 li
28.6413 104.363 28.2116 103.767 28.1825 103.727 cv
28.1826 103.727 li
27.1793 102.335 li
25.7656 89.8832 li
29.2998 82.9564 li
32.5511 80.8097 li
36.5401 82.1082 li
32.5511 79.7744 li
32.5511 79.7743 li
32.5972 79.187 li
33.3993 68.9614 li
41.881 61.3277 li
47.8889 61.3277 li
39.4072 68.9614 li
38.5968 79.2931 li
38.559 79.7743 li
38.559 79.7744 li
42.5481 82.1082 li
38.559 80.8097 li
35.3076 82.9564 li
33.3156 86.8608 li
31.7736 89.8832 li
33.1872 102.335 li
35.0936 104.98 li
35.1041 104.995 35.1145 105.009 35.125 105.024 cv
35.1283 105.028 li
36.4293 106.834 li
36.4298 106.835 36.4304 106.835 36.4309 106.836 cv
36.4321 106.838 li
36.4332 106.839 36.4342 106.841 36.435 106.842 cv
36.435 106.842 li
36.4367 106.844 36.4378 106.846 36.4383 106.846 cv
36.4385 106.847 li
36.4385 106.847 36.4385 106.847 36.4385 106.847 cv
36.4386 106.847 li
36.4386 106.847 li
.286274 .282353 .298039 rgb
f
36.4386 106.847 mo
36.4386 106.847 li
36.4385 106.847 36.4385 106.847 36.4385 106.847 cv
36.4385 106.847 36.4386 106.847 36.4386 106.847 cv
36.4385 106.847 mo
36.4383 106.846 li
36.4383 106.846 36.4384 106.847 36.4385 106.847 cv
36.435 106.842 mo
36.435 106.842 li
36.435 106.842 li
36.4321 106.838 mo
36.4309 106.836 li
36.4313 106.837 36.4317 106.837 36.4321 106.838 cv
36.4293 106.834 mo
35.1283 105.028 li
35.1566 105.068 li
35.7243 105.856 36.3465 106.719 36.4293 106.834 cv
35.0936 104.98 mo
33.1872 102.335 li
34.1905 103.727 li
34.219 103.767 34.6304 104.337 35.0936 104.98 cv
31.7736 89.8832 mo
31.7736 89.8832 li
33.3156 86.8608 li
33.3156 86.8608 li
31.7736 89.8832 li
38.559 79.7744 mo
38.559 79.7744 li
38.5968 79.2931 mo
39.4072 68.9614 li
38.6051 79.187 li
38.5968 79.2931 li
.717647 .556863 .486274 rgb
f
36.4385 106.847 mo
36.4385 106.847 36.4385 106.847 36.4385 106.847 cv
36.4386 106.847 li
36.4383 106.846 mo
36.4378 106.846 36.4367 106.844 36.435 106.842 cv
36.4383 106.846 li
36.435 106.842 mo
36.4342 106.841 36.4332 106.839 36.4321 106.838 cv
36.435 106.842 li
36.4309 106.836 mo
36.4304 106.835 36.4298 106.835 36.4293 106.834 cv
36.4309 106.836 li
33.3156 86.8608 mo
35.3076 82.9564 li
33.3156 86.8608 li
33.3156 86.8608 li
38.559 79.7743 mo
38.559 79.7743 li
.254902 .25098 .266667 rgb
f
36.4385 106.847 mo
36.4385 106.847 36.4385 106.847 36.4385 106.847 cv
36.4385 106.847 li
36.4384 106.847 36.4383 106.846 36.4383 106.846 cv
36.435 106.842 li
36.435 106.842 li
36.4321 106.838 li
36.4317 106.837 36.4313 106.837 36.4309 106.836 cv
36.4293 106.834 li
36.3465 106.719 35.7243 105.856 35.1566 105.068 cv
35.1698 105.086 li
35.5398 105.599 35.9275 106.137 36.1761 106.482 cv
36.3033 106.659 li
36.3848 106.772 36.4371 106.845 36.4385 106.847 cv
33.3156 86.8608 mo
35.3076 82.9564 li
38.559 80.8097 li
42.5481 82.1082 li
38.559 80.8097 li
35.3076 82.9564 li
33.3156 86.8608 li
33.3156 86.8608 li
.639216 .498039 .431373 rgb
f
64.6555 68.82 mo
63.8631 66.1841 li
63.863 66.184 li
63.863 66.184 li
61.453 63.8842 li
59.6266 62.1413 li
60.221 60.4036 li
60.2209 60.4038 li
60.8237 58.6419 li
73.0148 56.6749 li
76.8317 57.0285 li
66.8316 58.6419 li
66.2289 60.4038 li
66.2289 60.4036 li
64.6555 65.0033 li
64.6555 68.82 li
.286274 .282353 .298039 rgb
f
64.6555 68.82 mo
63.8631 66.1841 li
63.8631 66.1843 li
63.863 66.184 li
63.8631 66.1841 li
64.6555 68.82 li
64.6555 65.0033 li
64.6555 68.82 li
63.863 66.1841 mo
61.453 63.8842 li
63.8631 66.1841 li
63.863 66.1841 li
.717647 .556863 .486274 rgb
f
64.6555 68.82 mo
63.8631 66.1843 li
63.8631 66.1841 li
64.6555 68.82 li
64.6555 65.0033 li
64.6555 68.82 li
.639216 .498039 .431373 rgb
f
197.135 391.614 mo
191.061 391.614 186.136 386.69 186.136 380.615 cv
186.136 374.541 191.061 369.617 197.135 369.617 cv
203.209 369.617 208.134 374.541 208.134 380.615 cv
208.134 386.69 203.209 391.614 197.135 391.614 cv
197.135 366.764 mo
189.485 366.764 183.284 372.966 183.284 380.615 cv
183.284 388.265 189.485 394.466 197.135 394.466 cv
204.785 394.466 210.986 388.265 210.986 380.615 cv
210.986 372.966 204.785 366.764 197.135 366.764 cv
.152941 .294118 .341176 rgb
f
210.986 380.579 mo
210.986 380.578 210.986 380.576 210.986 380.574 cv
210.986 380.576 210.986 380.578 210.986 380.579 cv
183.284 380.579 mo
183.284 380.578 183.284 380.576 183.284 380.574 cv
183.284 380.576 183.284 380.578 183.284 380.579 cv
210.986 380.541 mo
210.986 380.538 210.986 380.536 210.986 380.533 cv
210.986 380.536 210.986 380.538 210.986 380.541 cv
183.284 380.54 mo
183.284 380.538 183.284 380.536 183.284 380.534 cv
183.284 380.535 183.284 380.538 183.284 380.54 cv
210.986 380.5 mo
210.986 380.498 210.986 380.496 210.986 380.494 cv
210.986 380.496 210.986 380.498 210.986 380.5 cv
183.284 380.499 mo
183.284 380.498 183.284 380.496 183.284 380.495 cv
183.284 380.496 183.284 380.498 183.284 380.499 cv
210.985 380.46 mo
210.985 380.459 210.985 380.458 210.985 380.457 cv
210.985 380.458 210.985 380.459 210.985 380.46 cv
183.285 380.459 mo
183.285 380.458 li
183.285 380.459 li
183.285 380.423 mo
183.285 380.421 183.285 380.42 183.285 380.418 cv
183.285 380.419 183.285 380.422 183.285 380.423 cv
210.985 380.423 mo
210.985 380.421 210.985 380.419 210.985 380.417 cv
210.985 380.419 210.985 380.421 210.985 380.423 cv
210.984 380.384 mo
210.984 380.382 210.984 380.379 210.984 380.377 cv
210.984 380.379 210.984 380.381 210.984 380.384 cv
183.286 380.383 mo
183.286 380.381 183.286 380.379 183.286 380.377 cv
183.286 380.379 183.286 380.382 183.286 380.383 cv
210.983 380.343 mo
210.983 380.341 210.983 380.34 210.983 380.338 cv
210.983 380.34 210.983 380.341 210.983 380.343 cv
183.286 380.343 mo
183.287 380.341 183.287 380.34 183.287 380.338 cv
183.287 380.339 183.286 380.342 183.286 380.343 cv
210.983 380.303 mo
210.983 380.302 210.983 380.301 210.983 380.301 cv
210.983 380.301 210.983 380.302 210.983 380.303 cv
183.288 380.266 mo
183.288 380.265 183.288 380.263 183.288 380.261 cv
183.288 380.263 183.288 380.265 183.288 380.266 cv
210.982 380.266 mo
210.982 380.265 210.982 380.263 210.982 380.262 cv
210.982 380.263 210.982 380.265 210.982 380.266 cv
210.981 380.227 mo
210.981 380.225 210.981 380.223 210.981 380.221 cv
210.981 380.223 210.981 380.225 210.981 380.227 cv
183.289 380.227 mo
183.289 380.225 183.289 380.223 183.289 380.221 cv
183.289 380.223 183.289 380.225 183.289 380.227 cv
210.98 380.187 mo
210.98 380.185 210.979 380.184 210.979 380.182 cv
210.979 380.184 210.98 380.185 210.98 380.187 cv
183.29 380.187 mo
183.29 380.185 183.29 380.184 183.29 380.182 cv
183.29 380.184 183.29 380.185 183.29 380.187 cv
210.978 380.146 mo
210.978 380.146 210.978 380.146 210.978 380.145 cv
210.978 380.146 210.978 380.146 210.978 380.146 cv
210.977 380.11 mo
210.977 380.109 210.977 380.107 210.977 380.106 cv
210.977 380.107 210.977 380.109 210.977 380.11 cv
183.293 380.11 mo
183.293 380.108 183.293 380.107 183.293 380.106 cv
183.293 380.107 183.293 380.109 183.293 380.11 cv
210.976 380.071 mo
210.975 380.069 210.975 380.067 210.975 380.066 cv
210.975 380.067 210.976 380.07 210.976 380.071 cv
183.294 380.071 mo
183.294 380.069 183.294 380.068 183.295 380.066 cv
183.294 380.067 183.294 380.069 183.294 380.071 cv
210.974 380.031 mo
210.974 380.029 210.974 380.028 210.974 380.026 cv
210.974 380.028 210.974 380.029 210.974 380.031 cv
183.296 380.031 mo
183.296 380.029 183.296 380.029 183.296 380.027 cv
183.296 380.028 183.296 380.03 183.296 380.031 cv
210.972 379.991 mo
210.972 379.99 210.972 379.991 210.972 379.99 cv
210.972 379.991 li
210.971 379.954 mo
210.97 379.953 210.97 379.952 210.97 379.951 cv
210.97 379.952 210.97 379.952 210.971 379.954 cv
183.299 379.953 mo
183.299 379.953 183.299 379.952 183.3 379.951 cv
183.299 379.952 183.299 379.952 183.299 379.953 cv
183.301 379.915 mo
183.301 379.914 183.301 379.912 183.301 379.911 cv
183.301 379.912 183.301 379.914 183.301 379.915 cv
210.969 379.915 mo
210.969 379.914 210.969 379.913 210.968 379.911 cv
210.969 379.912 210.969 379.914 210.969 379.915 cv
183.303 379.875 mo
183.303 379.874 183.303 379.873 183.303 379.872 cv
183.303 379.873 183.303 379.875 183.303 379.875 cv
210.967 379.875 mo
210.967 379.874 210.967 379.874 210.966 379.873 cv
210.967 379.873 210.967 379.874 210.967 379.875 cv
183.308 379.798 mo
183.308 379.797 183.308 379.797 183.308 379.796 cv
183.308 379.797 183.308 379.798 183.308 379.798 cv
210.962 379.797 mo
210.962 379.797 210.962 379.797 210.962 379.796 cv
210.962 379.797 210.962 379.797 210.962 379.797 cv
183.31 379.76 mo
183.31 379.759 183.31 379.758 183.31 379.756 cv
183.31 379.758 183.31 379.759 183.31 379.76 cv
210.96 379.76 mo
210.96 379.758 210.96 379.758 210.96 379.757 cv
210.96 379.757 210.96 379.759 210.96 379.76 cv
183.312 379.72 mo
183.312 379.72 183.312 379.719 183.312 379.718 cv
183.312 379.719 183.312 379.719 183.312 379.72 cv
210.958 379.72 mo
210.958 379.719 210.958 379.719 210.958 379.719 cv
210.958 379.72 li
183.317 379.643 mo
183.317 379.643 183.318 379.642 183.318 379.642 cv
183.318 379.642 183.317 379.642 183.317 379.643 cv
183.32 379.604 mo
183.32 379.604 183.32 379.603 183.32 379.603 cv
183.32 379.604 183.32 379.604 183.32 379.604 cv
210.95 379.604 mo
210.95 379.604 210.95 379.604 210.95 379.603 cv
210.95 379.603 210.95 379.604 210.95 379.604 cv
183.323 379.565 mo
183.323 379.565 li
183.323 379.565 li
.321569 .345098 .380392 rgb
f
197.135 394.466 mo
189.485 394.466 183.284 388.265 183.284 380.615 cv
183.284 380.604 183.284 380.591 183.284 380.579 cv
183.284 380.578 183.284 380.576 183.284 380.574 cv
183.284 380.563 183.284 380.552 183.284 380.54 cv
183.284 380.538 183.284 380.535 183.284 380.534 cv
183.284 380.522 183.284 380.511 183.284 380.499 cv
183.284 380.498 183.284 380.496 183.284 380.495 cv
183.284 380.483 183.285 380.47 183.285 380.459 cv
183.285 380.458 li
183.285 380.446 183.285 380.435 183.285 380.423 cv
183.285 380.422 183.285 380.419 183.285 380.418 cv
183.285 380.407 183.286 380.394 183.286 380.383 cv
183.286 380.382 183.286 380.379 183.286 380.377 cv
183.286 380.366 183.286 380.354 183.286 380.343 cv
183.286 380.342 183.287 380.339 183.287 380.338 cv
183.287 380.314 183.288 380.29 183.288 380.266 cv
183.288 380.265 183.288 380.263 183.288 380.261 cv
183.289 380.249 183.289 380.239 183.289 380.227 cv
183.289 380.225 183.289 380.223 183.289 380.221 cv
183.29 380.209 183.29 380.199 183.29 380.187 cv
183.29 380.185 183.29 380.184 183.29 380.182 cv
183.291 380.158 183.292 380.134 183.293 380.11 cv
183.293 380.109 183.293 380.107 183.293 380.106 cv
183.293 380.094 183.294 380.082 183.294 380.071 cv
183.294 380.069 183.294 380.067 183.295 380.066 cv
183.295 380.054 183.295 380.042 183.296 380.031 cv
183.296 380.03 183.296 380.028 183.296 380.027 cv
183.297 380.003 183.298 379.978 183.299 379.953 cv
183.299 379.952 183.299 379.952 183.3 379.951 cv
183.3 379.939 183.301 379.927 183.301 379.915 cv
183.301 379.914 183.301 379.912 183.301 379.911 cv
183.302 379.899 183.303 379.887 183.303 379.875 cv
183.303 379.875 183.303 379.873 183.303 379.872 cv
183.305 379.848 183.306 379.823 183.308 379.798 cv
183.308 379.798 183.308 379.797 183.308 379.796 cv
183.308 379.784 183.309 379.772 183.31 379.76 cv
183.31 379.759 183.31 379.758 183.31 379.756 cv
183.311 379.744 183.312 379.732 183.312 379.72 cv
183.312 379.719 183.312 379.719 183.312 379.718 cv
183.314 379.693 183.316 379.668 183.317 379.643 cv
183.317 379.642 183.318 379.642 183.318 379.642 cv
183.318 379.629 183.319 379.617 183.32 379.604 cv
183.32 379.604 183.32 379.604 183.32 379.603 cv
183.321 379.59 183.322 379.578 183.323 379.565 cv
183.323 379.565 li
183.79 373.337 188.375 368.259 194.363 367.043 cv
188.456 368.315 184.026 373.564 184.026 379.851 cv
184.026 387.091 189.895 392.96 197.135 392.96 cv
204.374 392.96 210.244 387.091 210.244 379.851 cv
210.244 373.564 205.814 368.315 199.907 367.043 cv
205.907 368.262 210.499 373.358 210.95 379.603 cv
210.95 379.604 210.95 379.604 210.95 379.604 cv
210.952 379.642 210.955 379.681 210.958 379.719 cv
210.958 379.719 210.958 379.719 210.958 379.72 cv
210.958 379.732 210.959 379.744 210.96 379.757 cv
210.96 379.758 210.96 379.758 210.96 379.76 cv
210.961 379.772 210.962 379.784 210.962 379.796 cv
210.962 379.797 210.962 379.797 210.962 379.797 cv
210.964 379.822 210.965 379.848 210.966 379.873 cv
210.967 379.874 210.967 379.874 210.967 379.875 cv
210.967 379.887 210.968 379.899 210.968 379.911 cv
210.969 379.913 210.969 379.914 210.969 379.915 cv
210.969 379.927 210.97 379.939 210.97 379.951 cv
210.97 379.952 210.97 379.953 210.971 379.954 cv
210.971 379.966 210.972 379.978 210.972 379.99 cv
210.972 379.991 210.972 379.99 210.972 379.991 cv
210.973 380.002 210.973 380.014 210.974 380.026 cv
210.974 380.028 210.974 380.029 210.974 380.031 cv
210.974 380.043 210.975 380.054 210.975 380.066 cv
210.975 380.067 210.975 380.069 210.976 380.071 cv
210.976 380.083 210.976 380.094 210.977 380.106 cv
210.977 380.107 210.977 380.109 210.977 380.11 cv
210.977 380.122 210.978 380.134 210.978 380.145 cv
210.978 380.146 210.978 380.146 210.978 380.146 cv
210.979 380.158 210.979 380.17 210.979 380.182 cv
210.979 380.184 210.98 380.185 210.98 380.187 cv
210.98 380.198 210.98 380.21 210.981 380.221 cv
210.981 380.223 210.981 380.225 210.981 380.227 cv
210.981 380.239 210.981 380.25 210.982 380.262 cv
210.982 380.263 210.982 380.265 210.982 380.266 cv
210.982 380.278 210.982 380.289 210.983 380.301 cv
210.983 380.301 210.983 380.302 210.983 380.303 cv
210.983 380.314 210.983 380.326 210.983 380.338 cv
210.983 380.34 210.983 380.341 210.983 380.343 cv
210.984 380.354 210.984 380.366 210.984 380.377 cv
210.984 380.379 210.984 380.382 210.984 380.384 cv
210.984 380.395 210.985 380.406 210.985 380.417 cv
210.985 380.419 210.985 380.421 210.985 380.423 cv
210.985 380.434 210.985 380.446 210.985 380.457 cv
210.985 380.458 210.985 380.459 210.985 380.46 cv
210.985 380.471 210.985 380.482 210.986 380.494 cv
210.986 380.496 210.986 380.498 210.986 380.5 cv
210.986 380.511 210.986 380.522 210.986 380.533 cv
210.986 380.536 210.986 380.538 210.986 380.541 cv
210.986 380.552 210.986 380.563 210.986 380.574 cv
210.986 380.576 210.986 380.578 210.986 380.579 cv
210.986 380.591 210.986 380.604 210.986 380.615 cv
210.986 388.265 204.785 394.466 197.135 394.466 cv
.137255 .235294 .258824 rgb
f
200.896 364.262 mo
193.374 364.262 li
192.694 364.262 192.142 364.813 192.142 365.494 cv
192.142 370.551 li
192.142 371.231 192.694 371.783 193.374 371.783 cv
200.896 371.783 li
201.576 371.783 202.128 371.231 202.128 370.551 cv
202.128 365.494 li
202.128 364.813 201.576 364.262 200.896 364.262 cv
cp
.231373 .372549 .419608 rgb
f
200.237 364.921 mo
198.756 364.921 195.284 364.217 194.033 364.921 cv
192.458 365.807 192.365 369.463 194.033 370.324 cv
194.823 370.732 199.447 370.731 200.237 370.324 cv
201.425 369.711 202.183 364.921 200.237 364.921 cv
cp
.298039 .478431 .541176 rgb
f
388.838 150.016 mo
386.76 150.016 384.673 149.997 382.578 149.934 cv
378.897 149.901 375.193 149.681 371.467 149.518 cv
367.31 149.258 363.127 148.953 358.931 148.557 cv
358.403 145.407 li
354.426 142.683 li
346.471 146.464 li
346.392 147.081 li
332.143 145.146 317.854 142.087 303.871 138.02 cv
298.144 136.373 292.476 134.537 286.884 132.531 cv
300.963 132.951 li
306.711 132.562 li
320.932 136.257 335.41 138.888 349.782 140.346 cv
357.167 141.17 364.532 141.58 371.805 141.858 cv
374.81 141.915 377.797 142.011 380.769 142.011 cv
381.398 142.011 382.025 142.007 382.652 141.997 cv
382.939 141.999 383.224 142 383.51 142 cv
386.811 142 390.09 141.896 393.342 141.793 cv
395.046 141.726 396.742 141.649 398.43 141.561 cv
395.628 144.109 li
397.399 149.92 li
396.117 149.95 394.83 149.975 393.54 149.994 cv
391.978 150.005 390.411 150.016 388.838 150.016 cv
428.5 147.756 mo
429.928 141.673 li
425.04 139.095 li
428.029 138.693 430.979 138.257 433.888 137.801 cv
439.424 136.931 444.79 135.909 450 134.841 cv
450 144.618 li
445.203 145.461 440.279 146.252 435.226 146.92 cv
433.006 147.213 430.764 147.493 428.5 147.756 cv
284.097 131.515 mo
277.189 128.955 270.408 126.138 263.789 123.1 cv
264.214 123.104 264.639 123.106 265.064 123.106 cv
268.678 123.106 272.296 122.951 275.908 122.686 cv
277.406 123.263 278.91 123.829 280.421 124.382 cv
280.421 127.207 li
284.097 131.515 li
.6 .654902 .705882 rgb
f
300.963 132.951 mo
286.884 132.531 li
285.954 132.197 285.024 131.858 284.097 131.515 cv
280.421 127.207 li
280.421 124.382 li
288.619 127.385 296.994 130.024 305.478 132.239 cv
305.889 132.348 306.299 132.455 306.711 132.562 cv
300.963 132.951 li
.635294 .694118 .74902 rgb
f
397.399 149.92 mo
395.628 144.109 li
398.43 141.561 li
403.744 141.285 408.981 140.901 414.117 140.362 cv
417.811 140.008 421.454 139.576 425.04 139.095 cv
429.928 141.673 li
428.5 147.756 li
424.041 148.273 419.498 148.72 414.879 149.05 cv
409.158 149.507 403.322 149.778 397.399 149.92 cv
.556863 .611765 .662745 rgb
f
358.931 148.557 mo
355.611 148.243 352.283 147.871 348.953 147.417 cv
348.1 147.309 347.245 147.197 346.392 147.081 cv
346.471 146.464 li
354.426 142.683 li
358.403 145.407 li
358.931 148.557 li
.635294 .694118 .74902 rgb
f
258.366 117.653 mo
257.329 117.632 256.295 117.568 255.259 117.528 cv
254.171 117.478 253.083 117.429 251.995 117.38 cv
241.535 112.023 231.558 106.141 222.177 99.9154 cv
216.283 96.0079 210.625 91.9661 205.21 87.8484 cv
204.784 87.0224 204.407 86.3227 204.123 85.7765 cv
202.838 83.3037 202.071 81.2544 201.776 81.2544 cv
201.617 81.2544 201.593 81.8447 201.698 83.2766 cv
201.734 83.765 201.626 84.3136 201.41 84.9165 cv
197.162 81.5904 193.07 78.2235 189.139 74.847 cv
187.896 73.7656 186.662 72.6917 185.436 71.6253 cv
184.209 70.5608 182.986 69.5105 181.828 68.4045 cv
179.485 66.2253 177.178 64.0794 174.909 61.9692 cv
172.677 59.8213 170.541 57.65 168.413 55.5521 cv
167.358 54.4947 166.293 53.4668 165.274 52.4135 cv
164.268 51.3479 163.272 50.2928 162.287 49.2486 cv
160.322 47.155 158.373 45.1285 156.514 43.1066 cv
155.707 42.1947 154.908 41.2923 154.117 40.3995 cv
155.966 40.0673 li
156.551 40.6959 157.14 41.3292 157.733 41.9673 cv
159.634 43.9352 161.623 45.9048 163.629 47.9396 cv
164.635 48.9542 165.651 49.9793 166.678 51.0146 cv
167.716 52.0374 168.801 53.0338 169.876 54.0595 cv
172.043 56.0934 174.219 58.199 176.489 60.2784 cv
178.793 62.3186 181.137 64.3935 183.517 66.5003 cv
184.692 67.5699 185.932 68.5827 187.176 69.6092 cv
188.418 70.637 189.668 71.6723 190.928 72.7147 cv
201.052 80.9871 212.181 89.1521 224.236 96.7255 cv
236.286 104.303 249.26 111.283 262.904 117.305 cv
263.136 117.407 263.37 117.51 263.602 117.612 cv
263.206 117.617 262.809 117.619 262.412 117.619 cv
262.101 117.619 261.791 117.617 261.48 117.615 cv
258.366 117.653 li
139.201 22.7977 mo
134.361 16.7526 130.205 11.3311 126.837 6.65327 cv
125.492 4.86069 124.276 3.18405 123.173 1.63112 cv
123.618 1.6201 li
124.718 3.08706 125.923 4.66328 127.249 6.34348 cv
130.795 11.0211 135.177 16.4502 140.277 22.5004 cv
139.201 22.7977 li
.6 .654902 .705882 rgb
f
154.117 40.3995 mo
153.124 39.2787 152.145 38.173 151.18 37.083 cv
150.313 36.1041 149.457 35.1378 148.613 34.1844 cv
147.775 33.226 146.989 32.2449 146.192 31.2973 cv
144.608 29.3933 143.071 27.5437 141.58 25.7516 cv
140.77 24.7513 139.977 23.7665 139.201 22.7977 cv
140.277 22.5004 li
140.981 23.3354 141.699 24.1823 142.43 25.0406 cv
143.959 26.7908 145.537 28.597 147.162 30.4565 cv
147.98 31.3814 148.786 32.3395 149.645 33.274 cv
150.51 34.2033 151.386 35.1453 152.274 36.0995 cv
153.484 37.3995 154.715 38.7225 155.966 40.0673 cv
154.117 40.3995 li
.556863 .611765 .662745 rgb
f
205.21 87.8484 mo
203.929 86.8748 202.663 85.8979 201.41 84.9165 cv
201.626 84.3136 201.734 83.765 201.698 83.2766 cv
201.593 81.8447 201.617 81.2544 201.776 81.2544 cv
202.071 81.2544 202.838 83.3037 204.123 85.7765 cv
204.407 86.3227 204.784 87.0224 205.21 87.8484 cv
.980392 .721569 .584314 rgb
f
263.789 123.1 mo
263.008 123.092 262.227 123.076 261.447 123.053 cv
258.229 123.02 li
257.158 122.974 256.088 122.886 255.019 122.821 cv
252.883 122.676 250.749 122.531 248.618 122.386 cv
246.499 122.123 244.383 121.86 242.271 121.597 cv
241.216 121.456 240.157 121.355 239.11 121.181 cv
235.98 120.605 li
233.898 120.211 231.812 119.86 229.748 119.431 cv
227.7 118.927 225.657 118.424 223.619 117.923 cv
222.602 117.667 221.581 117.432 220.572 117.159 cv
217.579 116.231 li
215.587 115.613 213.602 114.997 211.622 114.382 cv
210.038 113.816 208.471 113.215 206.906 112.625 cv
207.416 111.968 207.884 111.187 208.298 110.276 cv
208.514 109.801 208.702 109.322 208.866 108.839 cv
210.23 109.321 211.597 109.808 212.975 110.267 cv
214.916 110.822 216.862 111.379 218.814 111.937 cv
221.744 112.777 li
222.731 113.019 223.729 113.225 224.723 113.452 cv
226.713 113.895 228.707 114.34 230.705 114.786 cv
232.718 115.158 234.75 115.452 236.777 115.79 cv
239.822 116.283 li
240.84 116.429 241.869 116.503 242.894 116.617 cv
244.944 116.826 246.998 117.036 249.055 117.246 cv
250.034 117.291 251.015 117.335 251.995 117.38 cv
254.92 118.877 257.882 120.334 260.88 121.746 cv
261.845 122.202 262.816 122.653 263.789 123.1 cv
193.2 106.861 mo
191.807 106.216 190.433 105.542 189.094 104.807 cv
183.417 101.933 177.976 98.8146 172.769 95.519 cv
172.217 91.2129 li
178.113 94.8732 184.3 98.3031 190.768 101.399 cv
191.521 101.792 192.284 102.164 193.054 102.522 cv
192.944 103.458 192.919 104.41 192.998 105.376 cv
193.04 105.885 193.108 106.38 193.2 106.861 cv
130.291 61.0108 mo
130.291 61.0108 li
132.738 60.3363 li
132.738 60.3363 li
130.291 61.0108 li
.6 .654902 .705882 rgb
f
172.106 95.0971 mo
170.632 94.1566 169.177 93.2013 167.741 92.2343 cv
167.741 92.145 li
165.75 87.0329 li
167.788 88.4025 169.862 89.7467 171.974 91.062 cv
172.106 95.0971 li
158.565 85.7028 mo
157.989 85.2708 157.416 84.8365 156.847 84.4014 cv
156.786 82.4852 li
157.787 81.421 li
158.503 81.9495 159.226 82.4759 159.953 82.9991 cv
159.219 83.7775 158.634 84.462 158.6 84.6998 cv
158.582 84.8243 158.571 85.1906 158.565 85.7028 cv
142.781 72.7904 mo
140.103 70.4196 137.513 68.0335 135.011 65.6399 cv
138.414 65.587 li
140.82 67.7499 143.302 69.9023 145.857 72.0358 cv
142.781 72.7904 li
131.21 61.9302 mo
130.902 61.624 130.596 61.3171 130.291 61.0108 cv
132.738 60.3363 li
133.086 60.6679 133.437 61.0003 133.789 61.3316 cv
132.79 61.5632 131.888 61.7726 131.21 61.9302 cv
.952941 .917647 .901961 rgb
f
172.769 95.519 mo
172.769 95.519 li
172.217 91.2129 li
172.217 91.2129 li
172.769 95.519 li
.568627 .615686 .666667 rgb
f
172.769 95.519 mo
172.548 95.3788 172.326 95.238 172.106 95.0971 cv
171.974 91.062 li
172.055 91.1126 172.135 91.1624 172.217 91.2129 cv
172.769 95.519 li
156.847 84.4014 mo
155.989 83.7451 155.139 83.0851 154.297 82.4223 cv
155.867 82.1082 li
157.062 80.8849 li
157.304 81.0642 157.544 81.2423 157.787 81.421 cv
156.786 82.4852 li
156.847 84.4014 li
151.202 78.6684 mo
148.708 77.8875 li
146.687 76.1989 144.711 74.4987 142.781 72.7904 cv
145.857 72.0358 li
147.964 73.7948 150.12 75.5407 152.327 77.2706 cv
152.74 77.5943 153.154 77.9166 153.572 78.2389 cv
151.202 78.6684 li
.901961 .866667 .85098 rgb
f
154.297 82.4223 mo
153.043 81.4354 151.807 80.4423 150.587 79.4433 cv
149.957 78.9258 149.33 78.4073 148.708 77.8875 cv
151.202 78.6684 li
153.572 78.2389 li
154.721 79.1266 155.885 80.0096 157.062 80.8849 cv
155.867 82.1082 li
154.297 82.4223 li
.85098 .815686 .8 rgb
f
135.011 65.6399 mo
133.721 64.4047 132.453 63.1678 131.21 61.9302 cv
131.888 61.7726 132.79 61.5632 133.789 61.3316 cv
135.298 62.7537 136.839 64.1723 138.414 65.587 cv
135.011 65.6399 li
.968627 .94902 .937255 rgb
f
167.741 92.2343 mo
164.59 90.1114 161.532 87.9292 158.565 85.7028 cv
158.571 85.1906 158.582 84.8243 158.6 84.6998 cv
158.634 84.462 159.219 83.7775 159.953 82.9991 cv
161.85 84.3638 163.783 85.7103 165.75 87.0329 cv
167.741 92.145 li
167.741 92.2343 li
f
206.906 112.625 mo
206.543 112.488 206.18 112.352 205.817 112.217 cv
204.645 111.764 203.462 111.344 202.298 110.885 cv
203.87 110.623 205.38 109.624 206.442 107.986 cv
206.719 108.083 206.996 108.18 207.272 108.28 cv
207.803 108.464 208.334 108.651 208.866 108.839 cv
208.702 109.322 208.514 109.801 208.298 110.276 cv
207.884 111.187 207.416 111.968 206.906 112.625 cv
197.016 108.568 mo
195.737 108.005 194.46 107.444 193.2 106.861 cv
193.108 106.38 193.04 105.885 192.998 105.376 cv
192.919 104.41 192.944 103.458 193.054 102.522 cv
193.846 102.89 194.645 103.243 195.45 103.589 cv
195.413 105.404 195.874 107.133 197.016 108.568 cv
.980392 .721569 .584314 rgb
f
202.298 110.885 mo
202.086 110.802 201.874 110.716 201.663 110.63 cv
201.696 109.876 li
201.121 107.176 li
200.647 107.176 li
200.923 109.876 li
200.865 110.291 li
200.61 110.178 200.357 110.063 200.105 109.943 cv
199.078 109.475 198.046 109.021 197.016 108.568 cv
195.874 107.133 195.413 105.404 195.45 103.589 cv
195.683 103.689 195.918 103.789 196.153 103.888 cv
196.209 104.12 196.296 104.335 196.421 104.526 cv
196.646 104.874 196.833 105.022 196.988 105.022 cv
197.182 105.022 197.328 104.79 197.439 104.427 cv
198.84 105.008 200.248 105.583 201.647 106.185 cv
203.202 106.885 204.826 107.42 206.442 107.986 cv
205.38 109.624 203.87 110.623 202.298 110.885 cv
.980392 .862745 .584314 rgb
f
196.988 105.022 mo
196.833 105.022 196.646 104.874 196.421 104.526 cv
196.296 104.335 196.209 104.12 196.153 103.888 cv
196.581 104.069 197.01 104.248 197.439 104.427 cv
197.328 104.79 197.182 105.022 196.988 105.022 cv
.984314 .913725 .756863 rgb
f
201.663 110.63 mo
201.396 110.52 201.13 110.407 200.865 110.291 cv
200.923 109.876 li
200.647 107.176 li
201.121 107.176 li
201.696 109.876 li
201.663 110.63 li
.388235 .541176 .584314 rgb
f
129.005 59.7094 mo
126.139 56.7889 123.404 53.8681 120.804 50.9646 cv
120.543 50.6801 120.283 50.3963 120.024 50.1133 cv
122.577 50.1133 li
125.373 53.0869 128.313 56.0712 131.397 59.0501 cv
129.005 59.7094 li
112.782 41.8176 mo
111.443 40.2293 110.126 38.6672 108.832 37.1324 cv
107.879 36.0361 106.998 34.9052 106.135 33.7843 cv
105.266 32.6683 104.41 31.5675 103.565 30.4822 cv
101.877 28.3121 100.237 26.2044 98.6479 24.162 cv
95.6198 19.9671 92.7858 16.0411 90.1654 12.411 cv
88.8276 10.6162 87.696 8.78793 86.5385 7.09476 cv
85.4954 5.53317 84.4968 4.0381 83.5442 2.61199 cv
84.1754 2.59636 li
85.0987 3.91464 86.0635 5.29196 87.0682 6.72639 cv
88.2612 8.39128 89.4301 10.19 90.8056 11.9525 cv
93.4997 15.516 96.4132 19.3699 99.5264 23.4878 cv
101.156 25.4886 102.837 27.5537 104.568 29.6797 cv
105.433 30.7424 106.311 31.8202 107.2 32.913 cv
108.084 34.0103 108.986 35.117 109.96 36.188 cv
110.986 37.3519 112.027 38.532 113.081 39.7275 cv
112.782 41.8176 li
.6 .654902 .705882 rgb
f
122.577 50.1133 mo
120.024 50.1133 li
119.211 49.2271 118.405 48.3481 117.605 47.4763 cv
116.541 46.3345 115.588 45.1176 114.592 43.9629 cv
113.984 43.2426 113.381 42.5275 112.782 41.8176 cv
113.081 39.7275 li
113.992 40.7603 114.913 41.8046 115.844 42.8603 cv
116.861 43.9873 117.835 45.1766 118.919 46.2888 cv
119.993 47.4094 121.079 48.5422 122.177 49.6869 cv
122.31 49.8287 122.443 49.9714 122.577 50.1133 cv
.635294 .694118 .74902 rgb
f
130.291 61.0108 mo
129.859 60.5768 129.431 60.1435 129.005 59.7094 cv
131.397 59.0501 li
131.841 59.4788 132.288 59.9079 132.738 60.3363 cv
130.291 61.0108 li
.533333 .529412 .545098 rgb
f
275.908 122.686 mo
271.754 121.084 267.649 119.39 263.602 117.612 cv
269.216 117.554 274.832 117.091 280.421 116.405 cv
280.421 122.299 li
278.918 122.445 277.413 122.575 275.908 122.686 cv
314.792 115.716 mo
314.372 114.045 li
299.209 113.087 li
301.668 112.54 li
304.683 111.722 li
306.688 111.164 308.706 110.665 310.694 110.062 cv
318.649 107.647 326.428 104.777 333.997 101.566 cv
335.208 101.04 336.412 100.505 337.612 99.9622 cv
338.812 107.279 li
338.121 107.568 337.428 107.855 336.734 108.139 cv
329.589 110.986 322.265 113.541 314.792 115.716 cv
374.648 89.1361 mo
363.883 86.2788 li
365.845 85.1184 367.785 83.9389 369.704 82.741 cv
373.568 83.8568 li
381.17 85.1204 li
381.055 85.1924 380.94 85.2643 380.825 85.3362 cv
378.792 86.6217 376.733 87.8888 374.648 89.1361 cv
413.818 61.9184 mo
413.818 50.0381 li
424.282 41.0578 433.723 32.0091 442.217 23.4017 cv
444.915 20.6481 447.501 17.9422 450 15.2817 cv
450 29.9474 li
449.785 30.1576 449.578 30.3649 449.362 30.5757 cv
440.138 39.5185 429.857 48.9256 418.424 58.2246 cv
416.908 59.4566 415.372 60.6882 413.818 61.9184 cv
.6 .654902 .705882 rgb
f
280.421 122.299 mo
280.421 116.405 li
282.401 116.163 284.378 115.892 286.35 115.602 cv
292.512 114.545 li
294.558 114.15 296.585 113.656 298.62 113.218 cv
299.209 113.087 li
314.372 114.045 li
314.792 115.716 li
314.03 115.938 313.267 116.156 312.502 116.369 cv
310.436 116.946 308.336 117.419 306.253 117.949 cv
303.122 118.722 li
299.954 119.356 li
297.839 119.763 295.735 120.225 293.611 120.586 cv
287.213 121.539 li
284.953 121.822 282.689 122.078 280.421 122.299 cv
.635294 .694118 .74902 rgb
f
338.812 107.279 mo
337.612 99.9622 li
346.718 95.8389 355.497 91.237 363.883 86.2788 cv
374.648 89.1361 li
363.396 95.8674 351.398 102.014 338.812 107.279 cv
.556863 .611765 .662745 rgb
f
381.17 85.1204 mo
373.568 83.8568 li
369.704 82.741 li
371.964 81.3302 374.192 79.8948 376.388 78.4367 cv
378.94 76.7624 381.451 75.0608 383.92 73.3365 cv
398.695 73.3365 li
393.077 77.368 387.237 81.3183 381.17 85.1204 cv
.635294 .694118 .74902 rgb
f
409.991 64.9131 mo
409.991 53.2808 li
410.841 52.569 411.685 51.8569 412.523 51.1449 cv
412.956 50.776 413.388 50.4073 413.818 50.0381 cv
413.818 61.9184 li
412.555 62.9182 411.279 63.9166 409.991 64.9131 cv
.760784 .486274 .337255 rgb
f
407.744 66.6385 mo
393.171 66.6385 li
394.02 66.0026 394.863 65.3644 395.701 64.7248 cv
408.077 64.7248 li
408.077 54.8743 li
408.718 54.3434 409.356 53.8122 409.991 53.2808 cv
409.991 64.9131 li
409.246 65.4887 408.496 66.0646 407.744 66.6385 cv
.537255 .321569 .184314 rgb
f
408.077 64.7248 mo
395.701 64.7248 li
396.757 63.919 397.805 63.11 398.845 62.2993 cv
406.114 62.2993 li
406.114 56.4899 li
406.771 55.9518 407.426 55.4132 408.077 54.8743 cv
408.077 64.7248 li
.631373 .898039 .964706 rgb
f
402.641 70.4659 mo
387.965 70.4659 li
389.722 69.1993 391.457 67.9232 393.171 66.6385 cv
407.744 66.6385 li
406.064 67.9198 404.364 69.1955 402.641 70.4659 cv
.870588 .603922 .486274 rgb
f
398.695 73.3365 mo
383.92 73.3365 li
385.28 72.3864 386.63 71.4286 387.965 70.4659 cv
402.641 70.4659 li
401.338 71.4267 400.023 72.384 398.695 73.3365 cv
.760784 .486274 .337255 rgb
f
406.114 62.2993 mo
398.845 62.2993 li
401.314 60.3727 403.736 58.4346 406.114 56.4899 cv
406.114 62.2993 li
.796078 .94902 .980392 rgb
f
265.064 123.106 mo
264.639 123.106 264.214 123.104 263.789 123.1 cv
262.816 122.653 261.845 122.202 260.88 121.746 cv
257.882 120.334 254.92 118.877 251.995 117.38 cv
253.083 117.429 254.171 117.478 255.259 117.528 cv
256.295 117.568 257.329 117.632 258.366 117.653 cv
261.48 117.615 li
261.791 117.617 262.101 117.619 262.412 117.619 cv
262.809 117.619 263.206 117.617 263.602 117.612 cv
267.649 119.39 271.754 121.084 275.908 122.686 cv
272.296 122.951 268.678 123.106 265.064 123.106 cv
.776471 .807843 .839216 rgb
f
196.587 198.346 mo
143.819 201.389 li
6 198.579 li
196.587 198.346 li
cp
.266667 .321569 .380392 rgb
f
313.026 309.834 mo
450 314.786 li
450 309.834 li
313.026 309.834 li
f
164.211 315.92 mo
286.549 320.784 li
164.211 320.784 li
164.211 315.92 li
f
177.363 209.341 mo
172.226 209.341 li
140.742 209.341 li
140.742 209.341 li
177.365 209.341 li
177.363 209.341 li
.286274 .282353 .298039 rgb
f
150.602 224.592 mo
147.374 224.592 li
140.755 209.341 li
140.742 209.341 li
140.742 209.341 li
172.226 209.341 li
177.363 209.341 li
146.787 210.891 li
146 215.891 li
150.602 224.592 li
.756863 .345098 .203922 rgb
f
161.07 239.618 mo
153.894 239.618 li
147.374 224.592 li
150.602 224.592 li
200.625 224.592 li
200.673 224.807 li
152.731 227.891 li
153.979 232.105 li
161.037 239.618 li
161.07 239.618 li
.662745 .27451 .141176 rgb
f
166.336 256.088 mo
161.042 256.088 li
153.894 239.618 li
161.07 239.618 li
193.839 239.732 li
161.898 240.762 li
160.167 245.869 li
161.898 253.224 li
166.336 256.088 li
.701961 .305882 .172549 rgb
f
229.374 274.003 mo
168.816 274.003 li
161.042 256.088 li
166.336 256.088 li
230.75 256.088 li
230.814 256.406 li
168.095 257.894 li
168.095 265.046 li
172.671 272.558 li
229.374 274.003 li
.756863 .345098 .203922 rgb
f
174.844 287.894 mo
168.816 274.003 li
229.374 274.003 li
250 274.003 li
250.044 274.199 li
175.153 276.724 li
173.912 281.224 li
174.844 287.894 li
.662745 .27451 .141176 rgb
f
174.85 287.938 mo
140.742 209.341 li
140.755 209.341 li
147.374 224.592 li
153.894 239.618 li
161.042 256.088 li
168.816 274.003 li
174.844 287.894 li
174.85 287.938 li
.352941 .352941 .372549 rgb
f
250.044 274.199 mo
250 274.003 li
255.834 274.003 li
250.044 274.199 li
.521569 .180392 .0862745 rgb
f
230.814 256.406 mo
230.75 256.088 li
244.176 256.088 li
230.814 256.406 li
.596078 .227451 .121569 rgb
f
200.673 224.807 mo
200.625 224.592 li
204 224.592 li
200.673 224.807 li
.521569 .180392 .0862745 rgb
f
267.125 309.834 mo
233.25 309.834 li
266.857 308.329 li
267.125 309.834 li
.701961 .305882 .172549 rgb
f
282.319 309.834 mo
233.25 309.834 li
267.125 309.834 li
282.319 309.834 li
.352941 .352941 .372549 rgb
f
264.383 294.463 mo
189.073 291.919 li
263.928 291.919 li
264.383 294.463 li
.701961 .305882 .172549 rgb
f
282.319 309.834 mo
267.125 309.834 li
266.857 308.329 li
278.5 307.808 li
278.75 305.244 li
277.077 297.24 li
270 294.653 li
264.383 294.463 li
263.928 291.919 li
279.576 291.919 li
282.319 309.834 li
.552941 .203922 .101961 rgb
f
209.625 309.834 mo
176.591 309.834 li
176.591 298.363 li
178.25 305.433 li
180 308.308 li
209.625 309.834 li
.701961 .305882 .172549 rgb
f
176.591 309.834 mo
176.578 309.834 li
176.578 298.308 li
176.591 298.363 li
176.591 309.834 li
.352941 .352941 .372549 rgb
f
109.358 421.276 mo
44.9262 421.276 li
44.9262 421.27 li
109.758 421.262 li
109.358 421.276 li
.286274 .282353 .298039 rgb
f
0 425.125 mo
0 421.276 li
44.9262 421.276 li
109.358 421.276 li
0 425.125 li
.352941 .352941 .372549 rgb
f
44.9262 421.276 mo
0 421.276 li
44.9262 421.27 li
44.9262 421.276 li
.227451 .188235 .180392 rgb
f
243.659 380.615 mo
254.653 369.093 li
255.426 369.336 li
280.517 345.287 li
277.301 345.358 li
278 344.625 li
286.549 328.875 li
275.25 320.784 li
306.081 320.784 li
243.659 380.615 li
.286274 .282353 .298039 rgb
f
255.426 369.336 mo
254.653 369.093 li
277.301 345.358 li
280.517 345.287 li
255.426 369.336 li
.243137 .247059 .262745 rgb
f
321.833 309.834 mo
298.585 309.834 li
298.585 291.919 li
278.807 272.868 li
301.837 291.919 li
304.75 306.333 li
308.917 309.057 li
321.833 309.834 li
.286274 .282353 .298039 rgb
f
321.833 309.834 mo
313.026 309.834 li
298.585 309.834 li
321.833 309.834 li
.352941 .352941 .372549 rgb
f
0 70.3574 mo
0 0 li
81.7993 0 li
82.2801 .719739 82.7739 1.45908 83.2818 2.21926 cv
83.3689 2.34956 83.4563 2.48051 83.5442 2.61199 cv
14 4.3333 li
3.66662 12.3333 li
0 70.3574 li
84.1754 2.59636 mo
84.0186 2.37254 83.863 2.15037 83.7086 1.92997 cv
83.2455 1.26881 82.798 .629954 82.3566 0 cv
122.022 0 li
122.392 .527472 122.775 1.07118 123.173 1.63112 cv
84.1754 2.59636 li
123.618 1.6201 mo
123.202 1.06427 122.8 .524188 122.413 0 cv
189.073 0 li
123.618 1.6201 li
.286274 .282353 .298039 rgb
f
123.173 1.63112 mo
122.775 1.07118 122.392 .527472 122.022 0 cv
122.413 0 li
122.8 .524188 123.202 1.06427 123.618 1.6201 cv
123.173 1.63112 li
.47451 .435294 .423529 rgb
f
83.5442 2.61199 mo
83.4563 2.48051 83.3689 2.34956 83.2818 2.21926 cv
82.7739 1.45908 82.2801 .719739 81.7993 0 cv
82.3566 0 li
82.798 .629954 83.2455 1.26881 83.7086 1.92997 cv
83.863 2.15037 84.0186 2.37254 84.1754 2.59636 cv
83.5442 2.61199 li
f
123.628 243 mo
121.201 211.813 li
38.9025 209.341 li
128.375 209.341 li
123.628 209.341 li
123.628 243 li
.286274 .282353 .298039 rgb
f
123.628 243 mo
123.628 243 li
123.628 209.341 li
128.375 209.341 li
123.628 211.813 li
123.628 243 li
.211765 .211765 .227451 rgb
f
164.211 291.919 mo
176.591 291.919 li
140.742 209.341 li
128.375 209.341 li
164.211 291.919 li
cp
.52549 .627451 .729412 rgb
f
200.396 209.341 mo
212.934 209.341 li
298.585 291.919 li
286.549 291.919 li
200.396 209.341 li
cp
f
306.081 320.784 mo
318.117 320.784 li
231.965 403.361 li
219.928 403.361 li
306.081 320.784 li
cp
f
377.758 320.784 mo
390.138 320.784 li
354.303 403.361 li
341.923 403.361 li
377.758 320.784 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (1) ()
%%Title: (1.eps)
%%CreationDate: 11/25/2019 10:50 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6kBcF7dPh%%I]dIY"#sd!<Xq*OSZorM3=?D7#_WL?Hd.WGfY?]PC(Y9-<Zl5'RTT_]WOo4K>ub14lIFF\5%n"9m93EfD_+-W
%+rjA`31^K(s7sF[eYC-\g)K.H0F*:kdX$2c;VV.:="gVf?:riADD)brrD;4!1Sk;j."Q_Fe+CBW8PLWmiL.V=s-de<C0'f3P^YlR
%;OGP>ieO^an.ZRe5%D2!HJAR";=4+O&PtBgp[U"0<f%`LrbO]'WjP="hc9L^^&8p;XGLH'.(Z@#']TEH//Fo;cNa:a8?5a%T_4:*
%!tH,pm"YY@Li=Ko6'NF>8q;e4r.d'-(uK#K-<PaA2#>g4)uYFR1BBDL)>+[NBiG=I0F4VTiFg/XJ0(Zi;)WA<;%I!4XcB:N<BO4h
%_ajMf`:tGM`F=QV^l/kfM$cQl,&hp/('6UN^X=n6B(A"#XT$aHs,I8C<2H=4c-]4,qo-Q>0P]b"0ZfX`:$l8r)h$p.UEJ5,Lbl`=
%C,%iibf@&YJqoYR')ufh>UeKtg5!5;CBHC'Z%,5F^RYm=3TZ$RAfY_hP4,@:/,]Z2'LW]=/.>9QL;--B$ciB^%@&=FB\KHr&#`VZ
%.KM\NPq8ZW.DRdaG8mqZ3u3rd?j29CBBWd5;/mq]a93dK03iTu,6!e.s3.?li;LCD[b=J4YGj<eW`.<O,-!]QY,(\*)M&t+RY48h
%LAA%;2=jo4$iUTm(j&GS0]D\0LBe`7<:GD:n(d\4H7`e4q!kSh%m%buWrAXjgIP<9OrDD!g1nFu0n=`_"ZA&/l1Y/.]1r'H>Yu5K
%)+Tr]-hKj$`MV?Bf8#8AWBX>NNEYc9?'p2.5eck#?Vi0W1]g`aV$n!SGFQWGJH\b^.p]cD<hK9n^F7HaV?lZ!@T<5K?HND8!J-b2
%%;Md=Q`B9jeY*q0?:om]dj6'R?`j?TOqOX8#J()^jW9X>)2OnI<Mf?RTE*JbV.Z-4I!+/(qU_Bc.5@Z4>,0YK3qYs&OR*I'otZiq
%CNerPI^a):J&=LE-U!@7=1djIgQ6'T<g-t%69mNjR2N0PIVN+^nDcX]@WbAAdXXbN@<-k?;uBi#<6@'jSgIt;8#rG$NF'd\SYQr"
%gDXWt/cOu,<DP-W=N6=>f158$m!^_3hs.&q>mhRZC825]6D-;OoMoO@lE(OO.KdZ$dSXup=e%pY8H'@r)QC1iOY8R19c6/2D[o'e
%oT=j5D1<&6i7m'jmMsF]r&NR],ATX1rqPKNS\W6p>?VtpN'IVi)l5i-"X)P$`^I;:%.f_L%B\&YgR*U"C`e;PY^]&jom\*hiPuCr
%U/jX4m337uY.9u";RD"solm1ZY>8PA.kQA])IW,Qc*T0I[8F"!4\0';:.q+qnS:JWe<O,3CS;X]%g!oOBaLPE_hdgD^6YaU<t.(G
%4UC61SsGUIk2.H+8R_T[gEQRb+MnXnQET"&CRE`rFA(OQ[`dsf4^gJGAS9YL:JILc7HphcJ`[+P/]ML]_gF%/HdKp%qoW9G(ZZ^,
%Vmblb'`YRC-)IMO]B[E:-E!1f35e$5iS&U_hZ.`kCB8dL&+'dN))rGA8$JC,!WADh?`P[Ll7:4()ZKOl9P'$;qOh%n%h5/\K=TD'
%@W&QN2ruAEO:XbIW*KRS0+Xd:XL!oFNV4W:F:Sd9p%<obYTEM\4=liVe-^"IIbfPAZs!q*po`Dr#r@(6*9XqS^+2-8+tU/Q=7%JF
%fk]bsUZX^[@tg>Z1ZncMkKoXgY[cknEkX3iqf9D(kPK;60/r1qE/Wf#GnO_\I(?'LQ`:ed8k&c,+bFbIAc]ObDaH"`^LO3k][a4d
%MVj&)d-Fc]l<b!J?Ik=*8[;,bY*(]1UoAgkKq"qSE2X1k]nXs1:6oe+m:HmXXl9Kd.oQR:0/@d'^rd?s9Q/*ak0Zi*<dST]PLVA-
%CH[_iS'+g7+mT`2jt#I.2u]sUp01dJk(i)1Dp[R7esu>NL7gKh<gBso/1]Q[Ej>M'n5Eeh,O>0AUieJSgUA6:+!gJD;n=Ekh<QS.
%02dcn1,\kUmfI,#gX4d@[fgdoR8\kCS1aU"lTY0c6`9i<7Gj7%,fQj3^pLSeppE<Tn$4YTHDB<BH.s%eqL-U:RS,MNg'r+;oQXD!
%1Ts+]/f=*&/Xu4I"D3"\c(!&N]dUq&+b0g*d%"XjOb84PB%YaPH<D?7.4u,aj"P0\a!CgHgZ-(qOb'&]ln2%p>j40Cop4>+,0X<V
%a)@=t1Tqb*7N]C\mjlGNlMOf6Xl%grr=4o_F$S($DG<P_3LA<WpP$&Cj7->XiLf]:<H])DTCSBqbm^-58a3gPm&K>8*o]OCJ&LN"
%j/%_@mpQ^OqC\qKKs]LqR-:K(Qb9q&V(qHp2(ci4qO3=_.]^u_.K1+,bOdJBEtac11<I8(Y,5t,lJ52UAJXn<G;JH;//F3?i&.:f
%[7K`gH?h6b#Hp@%LG$GHdKRFfP)";*r2f?or4^B3(\euBJmH/.j#tYgR:#8d%*!QqlQ/eGcf)M7*_+5#\,Xp$qe((`c&:SLo)o5\
%cA%Dobj4R$;gpCYImrPE_;U97LM8V)Wmck[1EU\LoFQpPeWk;^eV^A]0?EVqRMgB]>4Nt%KPA.Rhrl:`ei)b^YG3OX'j^i[VKCru
%jg5^Mc9ofs/j(0;qPD!K8)!Y+COu"G01MJN37E[Co;^BZT%a,+W*c(=EgdhXg^Efn8Ba!+GoDTD?QEHZ-Cr>-+!*=,k%E4k&E[&t
%qH7$><KF&pWXV\oG'$?GhLKoS;M7Sajl]`r04c*^T9bRE'q;EKjJu5ukZ0\sU=lWsP,bXn]nfW?%pFT]inc;]#j,iXV.b?/5:5'Z
%DTqGt?&tXmE6b\&X*40%(U1\kdum(6ZrP)_CCXoE/#-l\4UC,Q:.m"l_d'6e8SVgU9hc$,m]Gor\^dVAg3OTnP$7Hfb*m]Vodl>N
%UZDf,[shBd(*G>97.O-Jb_1UL?DNc5?A+`5m0iq>at2r+HC@tm^Xa4c,`7pF??:?*`P43J50osJ=^1KlHKP,VM?hUN:<oU3cY/k0
%3/^[@UpDIUK^mB_ph*J'KXUEsU<K".o>L`p`B9(<#n^fVeLo9Q'JI>IMa]etB2LdN`N68'76QQ,?DOnU?A+`5<W=SE2"Psh`m\%=
%"#Zr9QLgY0cdN1RIjF/0j2V!*`,BM31g@1\q$RkVYA'M&jn0GY&C%!Lo!7:70:@8)/NNOncMB=s@/XDt)'@JEK56("CEC(&a#+sj
%HsE-K>g%5?igX_t\MhX8VP6ZIURI6Yha99Y=S%M0+4Ya<>81$],=8S4Li:UCQ[%_GT+/of<<1BQ7c.QBU;)XLFFh2cr+4rX1HZE1
%4WNB9KYI)#L6(8`Q:2#9:h]c.eI%c9j7O5'%6,)RrqId8o8%m%[A?[CmkJb&>8lmd>&CVo?bGVaf%!W_IbI^E"+k`#U4!1lISuW>
%UA7ApIZIS=R$=K"60VXg(29q7\^4Y\Ls/.CQf!u5ANE0kTQ_5&5kFJ('nH=-i%t:\#CZsVT%?<+kCJ".j3+Nl7Z2Cdi?*#\VfP&R
%dm`;<F,8_C3<+oWph+k3Aps2FCu?rP[EM-#D"_5!f399/#Hhik0F=Y+'$mE]"=[!T\O6H/RsiOQ4(dP]+Ju-+SK;>2Z:LE_>U*Rp
%@8^@S,m-*\j"T^WQ:hF*?Ee2,[A2/eo]n*:mmWGaTpG?;_9A1)r(Y9L(IC^=@j'd#A*^nokJ-9Ea+&SCr:_#*jR_EHZO4<nr7@#0
%qXIoWrqfEp(,5a"OI(7fn_]ams'k:+7=Z7ja.jsFa*_NAa(31K[euMr+7o/8^>IM0*].K(=rm7bPhlV>V<qiSNBApQMnnYq.=+\[
%mc'h(<'O>Ve,TDN1p'WUpOOJc7VP:S82pI^e>rib:d4)D_1D/<DJo.ca1b^.[-$pc+Jn.%U.'Q!bhjS5Nu]uOd-bh9N>9^q-M+^g
%rhm6I(?Eou"kk:Z/Gbo@=&n!:?mVg7TXu+"IHRegY,VAjY$0N+]1REZ>he.#RmtO@&%e70#2_Q22\E]$_Zn589ZfSZet>7lIQj*%
%Z8ebp9p9JQNJJR[R\kBh-#GU[3R`AFb@qJp[(q#![(lDje!gl]N`lWS\,4q:*10Xfd_i.B-3(tSm-#ZM]r]H/B)^Nc&*[:"3fj%T
%0E/tL^[^<%]_EF!rl0l2n`"K"I&X*l2N+j1@d_+kr>0tDAVN?EJ)fWP)_][HP8<>Occg2J'hsHrY'5uAjhoFBNl6P3Rol1>Bn-#G
%d56u"^6;998J!TAaX4YGC@IE]b_?P4Snql`DSB6*C_PZ$%*lS9e/J:;d[7Q%mOQ<q#..N7Nd`=Pfhd]eOGV(@:AK3U/psc]dZ&\[
%VT$]noSmk`ZS2.-Q_lW7'?@;q\l-rUp+NE@?V+/&=E!;JaK=R=Ps7&O_;)fNmbsn]as>JVSZhhWoVRoj)*H]_MOA('H-ABsl.'NE
%mA&4Y<@]+6H/@,"*m=>nkQCaPd9TFY@+Ig02hjW\B2EsdD&terR\NouStUWm.\=q&R=*K3G;SVSR(DSM(mN9)/TDd!fh_/80>-JI
%8/\+H%o^i5%6m8phO>'_N;+Lo5/p9@!eS1J0h4FPh!\`D$a>]N70\5`@qIm[H!Bn>5)-h50l&#ompl.i(j!!DJUHRnior^kmjTnV
%S@R?Rb'c]?f,J%V0cSGefeI[?;\?#,Mbiq<7gKWP<=>)DVEJVS@4)!8l.p':H!3O3;%Lcb8kMn(G1DY)g+IaBEea@e-!OS,p)Eu$
%UqLNpFpI$=C1s3Yc,Dih9?YZNCb%n<dEiR<;L?4j5L7\YdJQ*o^IP@/bVS<OPukSDb6o"n[V8==O;X5t-"0^$_rXjGh2?cZHT"!8
%c_ea,dK]ZQNM!7;[kuGs0@&aXTI273f"G$Il%tbs@A^\@^\a1\^JX9-94O(oI!H?:Sdp-.b2IKkqoo%?p8f;2nhLMar5b3@&Jk8Z
%=8seWCu3#88>$.?Mt_03B+DE1.=X#MBD:D`BqN\]0BWcgHuJFK$flYU^,P5%Esq*SH-l/s2s5O/^,P3s&,Y8Rk<.g^QpZAKK2fQH
%kIYfL46O4s^,tMiF2K%1^I[d_-Xl/ZS\*GF9!,.=_'e-,RgEFS68*jJk=pcOp?*4YAdJusJtJ-5qG+'2([1&C)S!?(/)f[3o^b]!
%@:"d>$F`"QokP1N9P6.b"386fE]mIOP]Cgm@$(#@;Ju,V`'!E+pA.!10>#^\hmDO:a.)2RAfZ/]B3pm$(/;HP>X_s(@b.s4_JO5j
%]*(;RIs91)>6d<]=>[EffJ_X]ja"rH@:%]UdbFO\D_GG6n.X9>E1V!@.[CfFAr_dr>#P<)p[n$jAmT[&q+QR+_@8^`/bqN!>3ZR.
%<McdC*B#jgn%epe(nRpNSK#9'rF4Ia:NRe*83Nb`nBL"e0Yoh.'u5-G'BPiUCZ$YSBld$B*XpIqaN=%cbboObgB]fX!SOU4fanPn
%3E$70V)@F?#/4Y&7BHI=7CI8I*I)NI/A]*[,E4lB2>K?_IB0cDs*"%CqCM`=7sq)Q2i<'Z;<6J"^Ut^YEt-I';=r-!eRr.-0&/qq
%D`jp[qpTE=/rWp-c0j^>*c`qGe$Q!=#@jRoAW8OE\4"!N0^3D*9*T:BAXJ]UaX%$ND<P8qo;tWodBC#Y:DYe1Q&bLN5s>,A;/>e3
%8n4S'kpsdl#..N7Na<F4Y8h1b*+iJ:HH.IA0@#9Tjm0oTd#IY,KBur'33,NpmfE7[)3<\/MRf5h$^ehEZ#1<V10r%-`g@S4c8Ru6
%/@JFS`'i&lU6Yl"H,qZo(DomP..bcp:H%<MC%4\H1XT[%#FqE3V0*&>pHCU#2V4OkVK^?M>ALPS'8pEB/S^0(hu?1$1tU+0kK&H1
%6B[:`#BP%MZXj!J?)FTWPQ+#=_bP:GcZ,,)DqHp'5LgP;ADP"'4*(rY6(nE,eCAJ19t_*hOuXAKR>1q!b>lT(Bhsopjl('nH!<^Y
%Dbr*M@RYA*Y,ZZONU@MT5A"bcqb"uRkg%08,STYY^VBp.GhmgjEDIHHZ@d>rE\:d2OX=41$rDLDT4WlX1n41qUDG#rP#FL`JmBAg
%9(5h^C%nW6DGlk<3WD7CB',)[L"lS$p<,%/Z126n2-il/hte0K3r$d#6IU;mkMOQds+oe*3F_fR>4Bd0OB*%82"d;O=7"+l0TASu
%f5nW2J5U?HTnl99WjP<cr8g0CGM^0N8]GZPD#f(KnXVG^TL;4%WI\T(d&RDsPdXIg]7G@=!c@l#a+3\q9$t"8bto6(l]nVgg[Os1
%>T`S/FsmnZ)[&L;S+@ReS'X>E_5%j$nBiDJ_>dCIrf?jGle='3^EpJi,0C2JKCsKCf)KXJDeN!c4MlJB!7m`MlC>aK_/$L3BQZ/^
%Atf?PoTs^E$2qD5&EOQ(M@-X;0]3@/"d*GV&$3^-4F@]CRHJ/V5dMZP,7;]B]RVF>ccLaM"=hDP3Hb&uI63!Umm-ah\gMG4G^Q@i
%Q2eX\QY;4@bnXn74sc5d0fbk;e3Sbd?h[\hdF<VP22!KEO>J.W0f0Y8(*jZFTGWE7%l-Q]SCu>Ma%LZkfC.^IA*?!"`8*YV5M\R%
%kPknNEIG<9MfXN=5Q=t1.QG_TPafFj\C;RA4oBL7s./So1c:1D,b8h\47@N;0F,;ORWkN:B<_<W.1`A3Ik:S4Q#mHMp&C.f2aj39
%KA#Iq?66Jh2+fBIka'cND2Wq1"o@N4h*<(sqj=!'X%?^-($2&;jqlQ'8Y<-!IVOqF^2C$[H`qoJh;6GD`X"8n+22jbmFLpb?g#/(
%g>JZOkp9%W2q9SQ.cH[qXBRJ(@&_OCQdC//A/9Duc4nh.3L7[;THsE<S.n3F.A*&VX0:BkU4IKo4KT#F,<b^Vn9n,hrT,%8&FXF/
%GU-pId-L#")1]KZ3^mOA"dtQFLVc+E5#_L"\g`)Vdd']<B<dbCYPRu%bjRPWnt+D\0+Nq^4;HM_<#+d6M*9['N8*:G@QY`qH+VE?
%2hJQfGl"^o/_QJG`f8\b7%T4$_><^.3GuWn)%d1*-E6='a]$Xb?rZ4:C-UTme@seY`Jka`BP-T9%#i3G286):2@Kl<CGX@uQJ,Ci
%?s3G[`lLC#R,s494lU2$&_oigE+T1ba#"g@G?Vd-)KZ$@V-P#g2)S4W4+kg4?6qI/Xe=?o6SsR23(C33PQOOe?db3W-%OJ,#FIcY
%X4kF?akX:PAV'#IIPNDo.".j"">==<D(NHP3IsXqf9EuVS18]ELSi@1WC&q&)#>YfhbguK/Su'2;$lk5s&erSJ/CpVk-L=J,AQI+
%P6=lf26_\_ruIq6)4%"noU<[jea)Gt@6R+q&E[6W305!Lot[EPl`4<hOV9dRg"+>@IF&4mFE1Pe]Q0[?FOVq!gDXbN+^Yb4pl4ej
%k7K;M&o0:-P;oDGs&+/37i^5/:8+`^eF$[Yi(Erd5EMj$qF[`\2>TOlk;fP+5Nm;V@&npa:k;7SB$#Rbch5AIg8f_rJ?r_*/\`iY
%?=.P::ZAhV"2oA?HPKlO*HDb'J%S1hNbaVX59FWd8^T0@c9U\UNT,b32k,>dGVN#kmf[[r?`H"rJl%#uh-QHg>,/2(HMt#'FHkC5
%_<f`b79)EIqToOF^"PVEp[HMh24r-_e'!W'3l]-5Ea0b0%omHi-I"uY.!`V-R5iJ%1sP=b)mtU8"+D78VEfs:[/5g_oSV)gfH5O/
%C*QPA1Ts5LU;fjEHGppOaWAG'1oR09hu0Am!fjo;d*;Ktn"@1;^m!ERE/jYRZLI4"'h1t1U15blr@bS56!O):fTn)L"'n%b,C`!r
%Y[h1>.JQX2:OB+C2*.t]dGDil!=iiu%Lu<d#\C\R;(H/=;dfK-n%4)L^2>/`0.MINB*59nJ<hHSnED5U%Ajl]A)ie2N&d!M@QR>G
%S+'o+BFi7oA*@cr4.U9]DsJ0Q=!]+rYHLAF7Q@<pW=7+*OTJf@O#-B_9/JQI>Qp/;N/BFd9I>UkUG=X.C;eh>5qb_;>M#=(1*:'T
%5!V0#T5to>G6uATDi1S/`qGZrWWm7_)eWOHHnnHQcQ&i9#Dn[m,HXuI1+Ik'O$L8aX-Ge[0O-njN+*Wp!j4O@DIbI@2Htp[)3X5i
%01GEr0:@j:`8V>@7I;sID8iV&-^Uf6)k-&G;<a>arKbn-F@IKmGLqe2XMJGugX*W^A1)dP%Us98pcODP7Rqjdph.h,8lY7;!0Y(]
%*lM1b@'&\MIiKImQ49H-F%UKo2&Oq6?qqk-K."YV(Sf6W7I+9IX;ue4fO=n$I^R3Km7YI6^?D1q\YGF>I'O:mVK0<Ckm@Ef5$3BE
%`BRKt(hQM,OR;n7Z2R>&SQ`'3"]#R9Pu!MYYrUF[:R_!Ebs5r_3COg7/<D#m5U^09O9"oEfs%XUNW,g`(%[]P2=_J\#;EO4Y3KBa
%Q+MA*/"SA5%ckh(OM+Xl]"Lo%%&mdbP#f2eNOC&f+RRbf`5UQa8,V\pb["#Ugh\\GJAT7!>=uBX)eubcDPu#+R)rBilg/Au+0B3`
%+KWE/kuRISo5g;&2^m@;SK0WuH6BB6R2O&n<bi&JQ9Wjg]kFBrXLukP!^5#Q7g_FmC*>sVpVdPqVUL?$Ylu*XTYQAd**9c;B>'#/
%e3:1TgJG:&l.GQ]fYhd0keE[egYSk(EV0APq!g^HZ*P*!`7c5?S\SngoJ,4RGXfSFrObhblX<k5F>mmC:sd^aQ_enP?dtrsb+A\Y
%k,8\PZ-n/t2sB1fKQ"f9([B$#R9F;5>/Y$k,hi=Apqh@B<k:F)H4.&Z#OV(p1Ws/]*C5$qNGf]s<SD<gEtlQ//luVZGBoPa*+r.N
%/IOmuM:.USU))Z7BoS-1.9`N53,TR`"+bEdrRjTWFW%o9\b4u]PL8@=qfQ*^IA-g)(">S;MfD.>Z=-Oi/?uI)kL)hPSdN1hhK^4t
%jsqJ7EX4gA%i>8+]n_B'UaE0U!lQ_;=2+E>Nr^+DhuhLn)gTI7d6:JNLoo9FFMJW)Il=HcY7%A/gJ`6B,5ZF^A@*lcc](3.B5O)d
%7iL]]hUntpd7_MfX-"DsP8h8Rh:WeU1tm1%a*aMu$i6O@YX%4CX.<$q1Ce8-UKtCJ#W1:0\AT*8=%\nX8sc]/V%MRs\Q`-Wm9W\S
%fWH2O,<B&[#*6%h]7"1*JL0,%EJQP<]WLmMB@29(U%jW(6JPpjQVjX#r\BkUmP$TWKH;q:4Ed,qig?i=]2IM=o.)ZsX(hgG>?.5>
%l\)7>&NK,,($(D\P]k%$^E76]\=^neOV1s[.3)"uH-0EZdI_?YAj#4L2@DEt[sA__@f\X?N^>$2(-j4(WT.KF:BO-gn-]Q'gd-DV
%0t_kF\%\WmD4RnHq+*9t4`&YY[<D$b)r0.L:GnAMDah0"ap?1qq"<VF)0ZY84ft?q]7[DVbqNeY.a;tV'\,jkVe]Md8poeJ\f'D]
%lLa)L;e?uKM=9MW?&S$ET<'&=jPmeA>"ggIp<2]6FM0S1=0?QS'oM8BC.s"7m&/a5PMAN9/()dd]u4oq?OuT5bCaW">IdJBC[8H+
%9tErfPfB#t,0EpUk2Pn[EKuF<9WjZAM`o+)S(ZtLX;>`-dp&l*m)EJ1$J")6b.bRO#O1OFXdIVtg0LeKXS5Y9nUYlVaP0n09]nV!
%]*IZ27R>Db?L"B\U;Nn:O7[GR31,Xqmjj6(A@ZP6i_HH]TGmWS,@&NYq2:53SU92G9rtX9iT0gc><&3X^Wr_+_<1aAa`;g->ZR<W
%;^7g3k3>Fd1psHAh8[TAXRU=/8SY:2l]H)[BopCNf058rU%lo)SV:g3SX\eeU0V)DL%il9[`-hH?:,F9HW;uO/K`I#ArO0V/>l9i
%2pcX*\glRB<$g*dD(@<]o\&(jA4oX3@\IASE1^?oViGtfD_kTQO5:aG+$U+UqdN0I$1H_M*b.lXq&,O2hd-JKp4^b&1b=^)X`2ZW
%?+$;@L4k@C6#S55MLJkq95c>mCY<+jTo5o_cjqe>'[-X/:o1!u%Y"fRB6VTr]=42,K0Qc/Gr&'&m[7RP_08k'Im:9YU^q3eAjNnQ
%]/u;Po+sNXG)N',I$1t=!NtL?h1TF=$1u6o-/qf_9]LcIoIK@t[+[V"KEpJLS@D2+LXXf@duTH^XKNn'de/<!=M;=AjAX/e\lrot
%`'9i'25hkDh-[i6*VpmX*\sp@pa4,=-1]a]qsA1!nLeYH<*QE2CoY'<6Qba2M;i)8G:Ji7+0F![5.>g+9nt3r7djH-D(G]E"o=eR
%7JPe1q(P4j(F1<@F4FVi>b1KlUV[I_0$t?`@,,mW<`):f62;4@mj.L$=fjDs]*E%"q\3]54P5):c)+p0Ci4rj])4<G?LH)b#M0k&
%A,71pHNW&!8/ee7:3),Hf+T(KS)&$rk:O;C4cLeeh5^c-[.:M<[)CcF_Ve<mZQ!\N:oZ-Q2Da;s2!`@e=9nR]#+K)!JgP4P<`a&G
%KNeq_C@t7rgaQT;-H$/OG'Fu68(rs'n>4#rA?-u:)]#u`Su/0L`78!:$t-CpVj"[gk.(+o<eBf0?ED$'aY4EMaIS;cT7.q&.VLos
%2#k@EpCH0.RlQLB+BQ+Bc(oV>.7E_c(ji"LdENH028/t>fhB-S/$5Vu^<mTqot(qej"tQgd)g+gk=g%N,!I>+X7^U[m!103KQD8L
%3^`/sqN1dFea!DbAo@$s/4>73:7n`BCqR3#L[b9p?/k.YM<i]4ccrqb\@d.;Uj"DrMp]es$`Fu!5sM&dPKf(^,J/:nD\,bFE4Ms0
%h#b0AJ8Uf*%5JlL+1I9m)>Y(Bk`*;YK*J?p&I.JO]Q;l/!e-K&q'8,M*YZN%PEbmDS9Tt\*i5UHnob+[OBYB+%tiJ%EH&lW^LCf.
%Bg?CO]B.\60kB?3h7hc0aJ[bOA[Ss4QX6g.lrn?SK;NgL5"t(tkgM_<E_,XrC+4<kDf)9[CtcVp"B=Ec@P[eK7(AW$:ZAQE0umOl
%?h]N"XVt)nQ8D3,lpe9)+%]fpY7I04@bJ`Ek\D*:YoB&u>j"jJ7Q%,2G8YD4q>9k!4.$1/Vh!N4$_5!aJSMEbL<QT!@c?P;$IO$9
%BhgOqN8\*K)Eh=Urb@d$[&UAQ`t.P["t[iHe!l^H2pgd0G&?EZmXueP;S/CRU#A@;^cbk2`qNgK`m@7YeJJgjrc/@dK&EePpW+DA
%bP@#gZ`?80dtmdDC%f:_(8K:PP?jt]X8AqP2io5N1d*22%E+dCj`9M,f`&`PTF!d8?[IO;GQh55ZKFc<R.KA7F_JnNICNp5g5r,?
%>@R"U%c#<#fi8tiH`0uhm&WB-Tq*?J%ILkcGqhPKN5V)0ZXYr!@)IdT<UgS8$K,s>hqao#)VjYg,B:iV9H/bA=?(YeIW$t[_d]eq
%'0:+`0*R1Bjma^.#`p1=q<5!e[nXB#\@O\;BB/=C(&.f0L=@;cU(,h_QHR"5h8ch;bpZJ*82SGo!$Wq$c_R'#gZ@a)Wq#Wuc]jn@
%CPH^OC^e$bR-a7&[Rg0/]0")<F*g$ZWTdS3FC<aSL#^ODU\%gj(pt?u=l5<>otf`WqXjD)8W&a[<>1_dF?X#Yl'@ENX2S;M]:(Es
%/Rmn-p:;2gbNd![DD-\b_,7o1ABJ+XgIYh3M%Hg9SLi=>l=T2"0tFLhFY]&L^+lar-Rhi9GGJdNr[W#>AM'ra%C9oIJ3+5^Ms/o.
%QVRq;0P!G"/^HZZN:Z&FF28(1:HC-M4;Z0\ZmTSk$"l6K/e@cSl$+nF(@<02j)D]c1sMo0P9dSUSZ[!j=uaP)qqIFWFnCn^9a^2_
%6`?6^Ld,c(034_BfMk>=+cbe:dT+,iIpY0pVN9V'`T]DDGbE><LEOu.&oY/4<?cp@$I^&^WA-o6Q;$j0N%Wp&KM?e6*%!P:p5",!
%W5`ff7[pF?dtc1J("V'W0&$:Q_l'X9@:uPbbMaK0gg+f8Je,3"DM$,AU8Z&Kn9F>Q/mf[\RJ:o$2Vm&e9bmN*aaLES^cXH?;t[%r
%$sNT*C/'9B-jUe].$/8:Ku$V8<&o<!`/rmGP&)n#60AK"c;Uu?9;Bj1S[^dr+dq024@SX8`9b\=k&NB/*h_W:XNE-:QsX&JgQ.M"
%cCH46$?=E6pT8MCWIt)u`5R#l#.`gG&%D#/g!0@3,rQ")!gW(>[DQ<Wm1*-5/^L-EIs':<NBK)(nSYgbc,ItG%r_t>eA9ELEWB$;
%<DFPJL$(P>UEhch;Y8O_0Ba=0a-VIlEuM<5\Df]HNJ-8mA[^USV3@\@An[))kdgp&BWKPcF`j+s^4q5^,V'hk/\SOO[hn#2=?To*
%J2WYLnT6._H=X):.$?dYDSDMpD04V;1]%BW]olZtH!A:IOBBCM&b"D#[?=[*TCVSb9XFpSA+19,C9#Zs#^H4inp!`sA3NmY7=*Sq
%+NhA'Jhjg$0agIqWJ4PbZkPnL5rNglkU0-ol&%3]H`-%lFJU:%=]99L$/G=Y.\/V(2O%-.&+2rI%0L+Lm<4POWGcRPfi:OrmA(N2
%UnQ.E)quQ5ND\m7[Ifu7I9CuOk1>4TO6"K=XhsAsliRY3<`YnMjC>!<C73ND6c3co@/PJl0#"=%F#@JnM77,gU0F6/XPtk%;)9m$
%dOSEN3s^25ThII?4XITIq#[5Y<\j"DZ[R'X^3ah4Q9K1D*g?NH>r6Q+=f<W!YJSBN3*\Uo(6_J(dNo>>6c&,+ViMp@S&bZA`%6Gh
%]>\d7Q`en?MV6VC[JP%\\h'gP.pM8%NR.kfGoRO6k!a-p#r=qTg8V4hlXO\k5cnAd1>ts$9'SJp?Cf^/9DiCuhm]Z3_(aJm69ggM
%6kc$(MFLjcXTtica2;2h$sViQIGM7(C,ORE^Gl="D_$rEh]H]q'@+S;LS:0-BDqAb1Tm3An[uMu+(Eo#?U@K"mhS!gm5-S&q?%0\
%ajZ(jT7&n>of(J7hn'=U,BIS0#J0#uDO<?f_VJYc4EY^!1dT@<7lU2K-M>D*N-+uM0H892W$q<-/]sE4j!S?V+USVM<"Sc/+%NqW
%/]TpWZ8n""bJA;.pnjr-9.N-KD_@YqmiUlU-5%@=2#$Qe\Kd_H\*6:EQ8srn,Whf)DROD+,MnF$",,%kK_Se4:KQYemEC4:?Q89.
%q7XCh"h)4iI6t.#2c6K`Vi5I]iNH$Po:]:la2Cs1h\4X^ZUA[X104cZ^;Ta+CV"i>6V?&t%C<`<bLokS\X#t/CR7OAHh;;EhJO[[
%ZQqHdj#:&[8p3/L-^k.I]Y"r>h5[lmeEO^,XirNMJBt]]`s_$-U$bo]_u=_DZ?rO@[DMh#i=XKs*tLI-p1U^]R[G5NikL"(o"GmS
%WEp$i_Y8bJ5rs<pM8WoemnLZ>LVL!FV//5)L2Q@#qiSZHDR'HBcntslg3-bMH*b(djiAK'aq)oj0>1\<X-ClqL/q?Y@7K+',[:(m
%IWX"C/:fit5%"J-LY`$Xj&X!N]@p"]YI`X&;UlPf'T[UeDhkCHi+]j9r6eABoknlq]TkdDej:cEFI,^%%p3H^=oJl9(dt`ZCRAG]
%Q+Qbp`UM,uqJ^pa"hR,;N1J_obsTf0G:1"B>e*95kS$:@]<o0HJfKV5f^TR@0G1q-&X)qWc7Kl+L[U'^SRfPU5A8&\pH-RZU9q!H
%pf,on3g/cF4UCr:>UI9W:+m/hcss)l>e$ad=lsJ#P$6#jg6j_RL8lKGd$Xf9:Pcur/<%Jp+e^9`)\]6&hER8PQ*C?Z'ig0_Kiud)
%=)1)t9@butc*<\D!:5,\WXm;KWh#fMKBrb8XZ%_.^@1XWpeg4l@c#OqTdL\`l0pm>iUEUREeO0^*_qM$!]BV?eAV+hp,(!DW.6'*
%ioU5,a(6f"h<iq%P'[pV7j0@]Bq;^V5G+<WKISWd9%<8iC#>CK$H<S_9i4b]@i5GsW5PO(l_h5_*u2tLC(BTB]CZQ8Ah?qf&tZqg
%$$NWml1/N?!r4geb[G^AVqP<Y"7Q4pE(m&^<l#[3G:&1P**)TeTs8[.$0TpXd"a9:chR4[?p1*a5h4QO\>l5@]Ct"SY*KNZ#5W:Q
%`Q8K!XlYVnGt*8#$7<FCH]T8@7*pddg=s+Ch'3HmI(QX'gGNhRM_"\)D$p?2Jef0kC70`sf^#:tH6g+B'"LT]f<*ni)I%!.e<_>a
%lMZbZ2D6dO+-]baF:Jp]WDb#u"GYfh$fqYQ5b6W.%b0o#&F5hMD;kj``f+O?g?&+&jWYQ%`G@G=K?7F>>ZJM0`WGjmEDI]1i=+kq
%/H\JbmTH9o'o0&nD73a#i&R5T&!gN8;C&i,9LWB'P(A'sX%BHsW<bH7cSq#3O?-"a+"L"*"^?lQ?Ec*Ie'm,!4756/(p_Vrb$$.+
%o6^u_WH]#PR&uE)JGqnLe8VgZ\CC:X(F1MTnQtEs.=HNZ_X(W)G/g5VFU4Z0+C;_kg1]6D\=D8Gf6C_<GAH]t&GA=H1Z0TsIUmZ/
%ATLc'=CoC7"]$JBoh;!QYSQ)RMb@c3(]dh2S.^_pI2A=:SX#OtZQgBh<6A8s7bK=<[0V2'GkZ1/L9]tjSc(d*jntr3aM'eJlKAAk
%3d.)=mB%lK%gG&P'M`U\N(A(QEXSXl]ocupC-<O!>Xc@\/Z]\DEuV9&DnrN()*f;#Y6)XJ%%L\LR<G(0\e_K>mZX.1pDaIr\ohk2
%U7QhG"eF2;H3n?\]L-M2ir2QQmp;hL)r'K1Xo$RX6J=IijfLD%1jIR)G1*2C[g'o1rA%bj--M/Ckn/fbf'ZC20Wm<>/:js#+*WrR
%r>iGYgR7fdCdutpR?tP^2.05@ILQ7GE1MK+2o-i-I@=8_2UpX31M%`J-dP,QL=e](#\/X<GT6M]Ck8qZ3m?lSLJ6c8W[52[2F:)g
%`lhC7EL#s/$6Q1g_&djJ)rQ/3dd@J0;DqDMAu?>Ym\QNppWLKsZO=Y<5NnckUb^S\<'=QEUlVq5m>r2N0c*X/fo=IVKZ9nYYb`"=
%i7^I5ClE$M+-k0:XtmWlPHLo-O>1`S_)pK(B$,ab[pQ?ebu,;Nr_+l<]Y/50g'>G\p2/iX6&X_OI1iVZ:'7W8?XIu:o1,-6m-_Ff
%d\p<tG(^07il2:Y2MdLo(P3QsaF/L\[f#LVe.OFLL,3IN)-1*h$eEa+02p^lJtfF"3\0cDk&Ehmh',W5g3//CoV4'rX*V=;>5A3l
%SWg;e3YNIRGL6/t?6G66K"-k5%NiS=[dDZ^7F?NmPUq\_>[SmC/u5i9#uC0tQ>Z1$T:R?e+O5P$R4F$KK^L7*q]-LaD_-s>*cA?S
%>-B#"lN@$K]6.f^\D7Rd]W^CA@HrbpXKAgi0Uu\*3(GugA,0[8I!U`+(^t!\EoA;>)SFtbB@GW2,8p.'C3M=6XI_$,fU_VAY^9"H
%f=7U!GUss*bDklAdm$b0ISe@n*TfE_r:<]<(j\g[K:D1"_;N>T'!c]U>UKK3o++e6AE)F'@i@P4FO=1Z@\7ESHs"(4^Qt\5A6_8S
%>-q=#%"/!8q'-"af%9HDbZjo<"F]+B?^%RuF+D!e%Ha^HEX[@Jj0&dRK'g@/N?qR!DF,hc=5d(k%t2,Xl>&POfRbcGLhl8GE4'u:
%_PaMWoQUQol"V/c`D,I1>)Mt16\NIoAlEI="+@jP?R(uJrJqE[6%Qd]50;;I?2W677Y\>XI*5pu/bQdN%j4TE%PU4$JaY`m7+pA3
%-C`eN'G=Ih4TOs3-3O4[nXM&1`#d=BT@NSuJ:58ILAMXPH[#\1M</-98KY9O9R>eT7_RX)QiHsc$agoiKTel"\;K'+0UZ;o\Qs.@
%LTN:^a3jqV5bfL8Y*q_ffmGK0`31[skagf]eCWY\9LOpDr<,Mo5CEQYZXGRA`R#1X?f@@39;fTMSi"QIido$3SO_q^jScu-ij*U/
%QHX.uF1=XXdFuW635+5)bH0rPRto*5i@W`A<OUm/pPgFQURYfbBYL1'M(Ya.2*X>\eHTFQ*9RLa[#C$J*lS-/E\oOX`Gd/j4Vub9
%62@.&[[SYB_=2og/"40$5)EF>@KhJ%!$q<6#Z8Rb6T(@O)\(Q"eM&AZ*pN!ap7).-+6>dqC^n/r=K]Mc^5%maq;Muj4@]6LA!7hG
%>&jYIr/;E6d_uOBS^Tk2JTaRrR-J+3mRGRNeWOVT7@r.Ro'C1BG[Sc.r<H-\ItGie3YG]S0"6F*Q)"(]0R_-\jR&gr_1Rq8C?^mA
%@%kj.V-rNbmN]4ZP;i#B2b"Tcbgj>qN4simdO"0#iAREa_)ADekbe]TjMA7^db8an\@e(j&$@VF;K,Wh<P5c,kKtb]O&:\KN<AQ&
%(s3Qci9'9!1`3r/8d;bB?>b@WVp'KA>)IubgU5%-OD5L_JojdfKC!W.---S!Kcn.=HP.%$Q=#4frRq]QnM<'OB=XdFloOnSgaV9B
%oYJ5K>;<Y&J!(<`h!ERCnMVBt-=`P0@-Vb-24.P4Xou(bO*L/-[IY(pc?GS,Via7hQr@$mKBEKu:p@/N*!\,hM+4^oI)Z>nWOqKS
%c/="!Gc,IkJe,&3aSu]5h-GrTQOE10piaVp"\Ue@`F.f1ZP'??p2e']Y4R@k2<lUBMVWabomHBcpeed(#kk`pUSZnR10@`J,gVe-
%P07W6)tgi/V/Y^M>)MrQhj12sAS6jrcWX/i')s"7=d%(^2jSVrmAHfZF_,bGhS&qk9%>SQ9A,Y1DX$rl=Bip2*T`XYPr!=B;S-Tq
%?2&9?QL61MkUE2W/\MpPY=k]-<*e<?AsO@e:dAg,o=WR%8B7Ztrqa%,]N"7#/?a$up#T#FFLrMA$:i8rHS6uBCM\5uC+6jXh7&s?
%Er>M,@6&abP$^C&;VC0eD0'X+n8uJu?bPnsQLC/-lc[UpB5(Kt.,AIB<bsA&1T/;>?#F#HlH?lK6u?KaIo'ERhb)F"_Cp];'l)q(
%I>&2<[oVRff8l3qdnXj.Q)</7Nn?a1jXbf&Y?Yu<p/Z(+Z,;j)m@1tM&mKfiWLf[3=.4'@_+LVT(gRU=%$7U$\or:h>7D+o_4j+p
%g8dP)&RO9V?e\p^;Usdl@Juq7H?Qk9=tPWZq!.fUs).KuCOW?chAa>sqs.Hp[8SZdeq+Wj>?c#H0%Qb4Xj.h40(#aZ$M<@^]TLis
%C=WlKS("dO]4QEWC2Ia)mG['/[&-Y/DQTf,O)+.TD00V+$/Mbfokl#?&U!tgS\'0-Y4#W^4KTu,F`..;?`^=FT(W]GD]9Xdop7uC
%CqV=RLY#b@j4EsQ1QIJ0D633p"ZN/Uq//Q]L"OE%]@>`ZA9[H"c2](JY1gk&NMe/#]MU]Rj>O@j-#E4;Vb<`VUfn7FVo".LR*4lP
%%UOJ/d,@L+(FhhBQ-e>Yl8J:3#>[^Hr@:iAkX1R/c.2GVGVcr)\@a7QVa!'MNk"66&\FcT?EED6k.Rq3CmHp>BsZK;Iba;UYE.X=
%W:h3C,lKU5F0nmRVr+Ffpj=ToKl><*\m]0L[i0][PG7%8d\R6"Ci-g;-b#K0nbLaR7"="7oWjIYI(?`!FoP]S\&rW*AuepHhF<gb
%=3X9HF[$iXA!'/)EW0qs3Rt-UjG&.n,B$AeB9?fuZ5sn5*iNa3q03Yiek0+&?LOP%U8Kph\'^]#mRgG=]fq<g-Z*^Il%ImKNa,nV
%[\_,%^RZ8_]klkAI<PMHqW)3,VB`kS;0XNe)]OW>MS3>6;?sjtV,$l@Aa6.Y^84F</5N[I@X@]l"7>@#oQb,>hCF?GoW^`RdFYtN
%cm:`Le*WpI%C>oY82/9EHC3C;1E(>'HF[\V2PZ%$74jD@7rEUC%Aeu"<o?;_Cl3_SAd`&\*.<)YcG&IV'";tPVk=rG]:TFOHb88U
%GB+d3ipJ^+qODlHdc5Z?8rjKA2uC78.k^@IWRNDI]q#](j[bBj5INI=@<45M+@u.ZOcW:T(PSp5ii>o(2DjA[^0_O4T/]-$6PU;[
%'+\GFn&1]DVC>QWqPMoG+D#V[^Qiu'N]PU&.`k6mq`Et=j#$`f0B_ASbc%EC3Os=^OY8K_?273#JX%nUDT+LQpD:):Ft!^dF`820
%=6lDZj(])F?JAUCeask7FdUuVVq68W=6\o':?D1[IAa8F\%C/01;=c(]f1*Bp%%XU,!CX'5H564H]`sXeDC1:-+%m!eB<3B2_1eQ
%SJ.UNh`<memdHuFchln'S&bE0%qfP_lusA=[=_!qeNDJKmlhiS41W4ZP2/_PF?>@"hp*<]`tKZ/*\VE4#31tLZ]b[/4?!qTo%6KD
%.eg?hD=+d#G[FP;i64.;POc\cPs"G1h;h6"E&lV9QBD3:MOnalW<AF>:DNd*P>nr3G`uIE)cY6prk+R]a[`,jkM(;,h0D(4B"$=b
%)k!M/)9Q2K"V[<DB'VXmIf&!FmVLM:m((i_cBe&"hI/)Rg,n@?d`^ThkT!TDpq0co48]A>\jr!4RQ=%W]$7"^H=m2U[Ah]:\#rL#
%Nt\56qsj>h3Hb6P+*LFH"6TMl?X4/6'X-fJ-hSF$s)]LcfK7o9Ge#iJ<#$:dZdI*98DX0uhCF6(rT9"'M9T<(k4/C$6jIYUp)D-'
%g!t4t3I=Qi"OFtpXaZiQ16:V-r:9Z/C\K9KO.Kp,o'$sJaZhBe[dkN.k'DTX/'EY,K;V#o[K"[i#X2;p(K+:@]#`&6X&.&02(XD5
%2ms+DjT562?J\6-#FDRal]^>:\oq@AgqG<S?h0o9<H.1OHmN&=ls:E9)u6O<^KS5*/Di!c-Qc,of+5jq`HCoiVg61pm*Rb)p&24d
%l<<?K2O#beF',o.>4qac6!@R*m8is;GJ_c!qcuCuZ#`u^SsAc^D_'gqqY@^Es89r/%md$hI>HEp#7jm?1&[f2$0<5mC2`_6Pc_V]
%<aJDq:SGIBn0td!G^+NaFnVG[cV`cJ5OY,_9$c**`S@eKV26jq+tULiK+HM!L:DO-)SNl1]H2"<ibS@m*e"K:a+Lj#Rr5sR4SHt@
%b&QZ;3JcSJ.M)&9;&L>i/kS3lKgP%$E`4B/2bTKKl+DKJeWbtTqQ[,o*\.t6X7fl1-r\qolfKptE[MR)(A8f4Wg;ALXKk><j_Feg
%DGY1Nj(s]df]-/L\Fs*Ap@Ma`]kHla$eqeQ]%64k)r+A*Vf?\sHYg(8F3$%`(CK9apYo,]p"lYgmks2aXjXjR-cBWc]q]8QR0uTu
%+4+b<l)qGOMXM<bXVW=2dU(gmf@u^9qPdcWVY9X61"t5TNn@RL?J=<(0N<M3;^fAoFnBYB"KM9ZhY-c+gLFfo)e>^Y2]dC]l+V%m
%LV;&L<HdgQN-MeL-Gij`pr;@!V@@Le'>5@[A\!8Oo3Ot#?\rlFT%U;2:"*RV(6k86r-?j0MtO+)BUtjK^d!*s)0I4a/bYHQ7Ho8i
%&'`YYS<NDP6Fe)q[9dhP]Xa!K>c#pFMA%oKBDbDOSq4o@[9n%K^hX5,q"0PeM`7^/qR:5(VP4!+D)P\MeXd[U\n[mF<s*(2Rm9d:
%UT8]eJ\UMc44$q*6ISSA#LNAViTI:FM!)"j6U*X/<`\e<B]-IW$\lEC`cJ;7J*;MM7tX>)G!N/dcnDmH7\M]9d1/"e`cD/il>Hj!
%@_7.Ka<0X3W1^F7B](hsQ%5_Kci$,.94<dd7bL>Ufg?R26%b6QBq2<L.EnaDX:OI@!*ZL+SH^rtJO-o)0)(5u=EE&pJ<J+37V>u3
%d"t,7q*i.?B-%p>@hRVD;Hm;ZQYMLb9k2Y]Hm=d6B+;1FX:bW#0uc&HFGt%:%Jt;<nS)@3U<`D>?ESMFQC<Qb2D2HUIEhVPASG[o
%7@?U!I1p9+$5R`N#$0TPECkc':58#m8eLrgm"\m.LXXc%7bc3*q5Kn'5m^Rq<c@^cdH%Z4Mt"S"<F(/<79AX.M*1kI&1;P/)Tm+Z
%)'b)sE(/hDp<itTl6q)RW]k*]g.F`=#5TiI;GIEAU>%"On>gZ4T?L$"*=FHQ.p&VBM>`1f3e]?oTshLDcI`7H2Kn,nMclF[YX8B@
%]1kWVI#]--]llUGIJkJ9_"(BXFSocL&Pon^qRdkZ2*kkSaD?Km;ToScnlmj[-T<q>'Y3Y&ATWkDDC/!PVqJRbl?3";j<oJ]\#dj3
%8>.lIK]%&!J91-Nb4`@Oj4D3DKNdE`a"'u49Z6h1WGu/D^hm$iG#Fgu/J[_8d+qW4[V?17R0d&79P9@/1!YtdRP7>TZt#iceOrM!
%Vu0B']mnR(Nlh71TL15=6rGZ?4/,#(@#W3Ugb+4"0FTcZk2Q/XiY1JS(O<JS=/EE^L32\S`kpghI:XNpS?N[4q0>b)s&mV,Cam]O
%1,ObU.L*'lfF4!;faaqYj/<>Yg`nn&oB.U73u!CIs$PR+MO00>.kPUE@Z14$jT*Or!IVLoJ4J*oks,3WJ[kl).$/4SG8^["goX<&
%a(]Lr%IR<U2I(=g("f_WCu2+aYNT:qI"1S?huEMe!GY-!@pRY)'dSNFV#V7l.@J*Jf<QSp@1#_-1qF?d'dur=huh#U*02_cj^a3W
%Ab0qLcaWHhXbguMBd#tD.;.F]RkoN#5?P[#-[*:l"T'U"dYPkMoYASOBkf2b6J#B>h6<(\9!iE4p)@UDOgT<jm/%32-.)\)(3WIl
%&7bNRM0-1iGZ&i(OQ'.=L#.a,(e_gi\,V'Q87(RAp,QYE`aZ%4V_1ilD"thkNquY*,LTJqglinQj)tO$V??lbM;J+/Z7X;0qT6@f
%A3WrkZ>Js;g.)+C[XCr#muicTG]0!SIbMV=`0Y9;V&&A(qPBj,Q'Rsoc;hq^iP\)R9"Ugs?2*H^/flt2%BP%."72bH-u^.q23&8^
%)Li;dR6f17Ppl\iKQ%REdO`6tM5E^m`sB`W;'+qP#VA\H<i-af?`Xg(d+-eZ;$/!U'c:+@6oHO;]S),`PS+*e'^7"NaGGaYPbfZE
%Lk5msM``2(FHgE+<2RGU'K4+pUD1VfLkqW7"\_=W$mZm_::!tYU54Y&%*b8a92UfQ_'6Z/jTWG;</hloBGm)VMGZk$)3^8ZESVn&
%L>mJHA"jsdi^P\DPc(dFZj8_1Cl]-=A<?m:,t8'kOG8V_*9*`dX#NC#q)DCfL59Z1QAgTe.*HY*9,pN`8ePo^"\YOI8k`4H"jUpC
%\u%S6_2qO"86-.(1aOk%QRG5#SFN6ljX=*/+@Tjm`\^GD\q!MJUF[YL`pj[f_F5)>(jZt;:(X)W*:?`B)hA5WN_5KPC5<']8/WVe
%,8(Do+9LX3*%`BR1l=VdY=Eg\.Yo(Aal&K%9Sr7J<.rAH8Lu\885MHC#[EhBJW<3o6ELZ-FIY^NDM@pA%8)a3``4!QZd@C(5T[=3
%_W+0C/2Vo8RV,B1RLrq^18nFHbb,Ch%n6Qa(_NX"5atQe>ilpLeK3^i(_:,f^_2S]/G,I56)^gf1t//Y,f/[`)Phn,aLE9oV@63:
%%#PXia$_X3)f#\\%Tu+oM]@\`?ndJj<1u#k%#Z8>/d[LFF:0=]6K5CETt*ociK>Tm[0roD0ib*1=[Jl<QA$KVa<L+=$OHS?QE_U3
%#ZHDn"i,Lqi1iSl0k(9m/-/sg?5>'uTItm(cmpYcFruOU;ReV$<J[rD`4/Zq(+!WTLNk,4,b-kE:n,D/N#Scd5u#8Z(<eiW";][A
%$nI1M6/eLMGRTf\,BG^<;$<Bh^Wlb.J<G)DJioJ('(:S"Z.8El@;+>HLbbVYcak&doWl;iei$&+egRBrp'=2OO<,_ak(=fm"_hX*
%cnH4@C!gJL3<LC<%]0]Y\nOtK-_\'[#U2k&SDsX3A2H7[*JMUL$p#p[RDL0QS31TZ2ghJjG"=KLp4h,TZn.phJj+,dK6.V4VZ7)<
%of#cN+GkX5jp.uOTXh!.#uh,?36p_k0[=6gR$<0Pco%?;iRu7=-W-&[Ym);,oF=`KH:1&B5>Fm-X(G6>Uk`WL(.P8)%#m!EP/&eQ
%p[A7P$$,T(pVN@XooBNMH)OsZJ@9g\.T\qe`g?o`D5*bX:`6.EeQ*N8<g6#hmLT&^0atM$@/<>h)2or7kb,S"A1gEcJ<URH&i:sl
%BO+01bWt1g@gliJXV;fla;DZ_5[%)#L).\JSB):1M$M,]77=JS*_.FsrY,8D`Q3f5qfPXI,p?"-H1II*%0-ndeNPYC'2>6%^^Ija
%jh"?ql9ZYd$1&l>E!#5]]^[5`@V$/F;%t87T-R6`1'U#Fm1(9N6s@a;#`r'3#XbgT(:hFNSGi(>g)l)5jAq+r%spM,q67?TY_Vqh
%AaDtgnB%uS(p8p9m=Op<c%CQUIMoTk0[Rr"gTnKU#.h'A2%J.&VoR3a37*5-c69[L#<EsjI%X\OT_j!^(Q?0Ya5L<1!r']$f/S_1
%*Zn&Qj2`UP`]gA_Hp7,saLA\#G7AL*fE_ZKDOpPFJ=O\iX,a#9%Y#$86'AIU92VeLrCR'=a=O]G?/a7lDd!A>=D$B9I11.]!T&&=
%Wfg3j5ir(m3$EhG$)%tQm:(ZC*T]<8#WRYhUr+'<>3,20VBCGT.UeG#U;fBoj&h49[NNq7,20kFN9sXXXB8?<&.<M67PuRs_I.-o
%`?AAo,@(G;JGC%h=3I*'.Y5EU$=ICY)Xi_K[]W#NeLV"-K#41b:uEuC(DrQRgO%F>*ZI/e`c\=om\!La.,khk\n0n(r/[/'*HZ(H
%!hEH0k?C?lOE^.hYUHdWm6P>GK>_uQ(aKq!$)o?s.^2B\3VmP3buA?0(jfU/=03X'UGuE?@hcFiiOC!!$KaI5--;,:8W9q5mS!p$
%R_Vdm+Y&A]0t]5>"P+Dl6Hdf/&W>5[l<_tF*ef0#pAAJY>>U-0Q:71fPi1g,>6&GtIV*lYd2]1p>BljWP$rlq@ZJ)5YE2W]d-g+Z
%4_lG[<>=7W@SB6@0j7==Kf_UD#o(VkL9l]e0a]cF,)8rjYl]PR:=7-\6DC1Rd?<6sF@QUmY%OCVU+?hkL.TV"<WX)&&I>nkVX[W[
%J3UAI-5_sEQPi_08"oE7lg]K?fVu_5;f5p#.1pF,:9k.R;p%%qVJ]#"'37tm"l*UmO!l0-6/X@L*;1T\R:BcdJG@26n;-:i'uEZM
%$;'_Rn4S[Wn3\[_"#]nX_9XSgB<!1Q4VVY&_"'&5e)Mj2k&D(;bRt??eh/%s:5%S9&0f)G_SY8U#F9(G'FA8,M7#0$01AZ+i%K'*
%.ePU!hMAC5RKK=D,t9\Y9U*_Qetq5)a<Sp(B((gfK/&So?:KP<TL87*6&-Ba',VX)'TcUONdP4\c@MfX)1<^uTKm'N0Tq"9/Jh9E
%iq(.QS.7GS(s4f^B-4%W.:maaM1Y=m&d@&:!a1[R0e5X&3^bZ-=b-r?7DUMVdE!4X8f=8P1>6;\3DHtT)Nh9%Zb"Z+m#7f!3k^B+
%m6Vk`f,A7!9nI1<4-nWt0?/b:D:VLiZcuE^W0qhJ>LfO`*NR59C::T>88H-%)6u+H[]e=b\p^l<?9lpii)^*s%"n)J;%f`S`sT2!
%oF_=<>F7q`M@i5WSNl/Y-,?duJ1-@rON6?0j("#^KhktT;.LpfXV=#qF$Xd[9p6+I'9p0*+NNL5UHfLnQdM76A4gl@XJQU@U>n:(
%NDMeDWtZs+85;'l7)m_945;U.Ii>`1_$+aRE2+171pKLaU("pQE$Y!D1t[LckZf3Sas7pHhKW*n%`JG\JnSVQ;j;u+:5oBkg$Q)U
%S>KL:NCZ%TW&5n/n"\H-UDD'Xr76r;[=H>TN'Ir6;lV*X!C`Y`_2VX^80?*>W$NYW&P1Cq*d#1&La"4/W!.%rAU0)@23iEJO3.MS
%&ZCBoos-.%p^nBn05='VPa+YaNEQJ4`#8rQFlZ)TOp!#<l[g^F7p@u)ai6bpO`M9!:`L/mLaLb679P0%e4@B@dkI99BtRHqLlCqa
%>@W9M5&SV%DW-RDQYh?*R"0?j85''lbqUDn>BmcE)8[sJ$4J-k\:l=F0+tc`4QsQkPY^hFBa"XD[7Jpo>"Un)K#>aP"De*mUX@g6
%:>89,r4T<\b>CP@L1#o^RTLe-kZ%s&V!Jn"8D'(/1rpqYaZOlN80Wt4-k;%E6ka@+U+AEIC*[31Bpd0-1u9]s7)jM,XYCE-+1>c"
%[SVcL@#&+tLm1Si";(fSGj@4N$sVq4.#&MnYQYD%An_md&;B7;fHMAYi!5(>+OUBb5oYc,,7/tP;W9_3.+';V!<im\'"17u*/1NP
%(q1Z3oHYd+nBt./`Zi!;oYCCc6udHUE]fU8?p5emkcH=8OShY/+0"cT2%(A&&^fpse52r17"H,6s7bGaQ28ZK2%kegnACA,$,&XN
%$qG'P6MPf"=mCB(C.-1ZBih*"Pei-QM+EVZHB]Z7-5OQ8WNk.C&<'nX6SU*57;>5p'kj1te;+0PWLU';U6(KUS',NW<RQ\Vo5'(U
%/Q+B"O8DEA[j!\CpRU?!+uL.`M:@@6W[8rJ(69tD"%7kVa[ck%TI3TIU]r+G@&9Pf%=0t)B$!T'6/dWM$i-G9WBhC;;#2mo;I_Y7
%7)hG+W?G)r+IZDB7mnmfEoJDKC,t5fS';GZfHiNl#=JilM)A%*(*5In&u]BNbN<i6DO!%&iB3mde06b6CAi7ML-R=<;I^<08<&=,
%:;DQK/LOG+Tp?@kYu$@'ciG49;IcDd'</65MeFU1TH1#::s4^FfSpu8nP;Sg#h1&S-It-W&IXYi\-W1?:3a`iZU6Ei;%CQ2&V=\J
%NDl&F85>-ICcMs2fpp&d7?,AJcaYj?8<&[7596^HE6F*f=@=N7A)W^eE$92DM:>Y;j[<i7g`de]i5^l-=KpmTC+S!]>"Uni7qsU-
%E[!AagIF[0;iqt"[KrUa2,6ET_BUFG6GSm#?Er2M&<'nZ6ZGAE+IZEm'P66c;^2<I:;^m+Vt!eb,;RP#CeZKZj29GD7qr=^E[!@V
%d>?@TYiQ!m#hX/A2&:!gOW"V9L^+sqE?[7UDV:-j$atkW'$o6n)@O!D8<)I!&J76ge;Qk6#Z1E_Cc(?l\B)">lU@Od]S#Q55FtI]
%n.RKBH&gX0/PF2m]FX&;Y3`p+lpksU1ifp2]GsL??K27i.X-l9Tp:;MEMtbr!:Asi;u\[*,!YcO&G'>XLIE:#s(>a0(M(*c7H>l/
%0le8P9gD)3nZg"sNKD4mVF;RMI>%5)dRVAcPj=UsUo8gMD\*17#3!QhU%RnWiZH01RR/qg#eZ4Z5!Ji<ki:]VN+)`Mm1_]4o8e%?
%K):KNg=ceP4b-EInKQ73-%eVo7OrqVO36ZT$'Y`f&C'ND@.CKag.!tu+k\fg8Efs`4>!nZ'b>sfO7FOc`YB'g(#Ad4M=q)k%)/J;
%$KVE^iW`QhA4*VI'ZMm\oYEJZE;1mi-T;gP0a;"po5TrjAf-c,MPhaYi$Qk82OM87N&8,6M$o92hQDkaE]B'C?1"u)RbsYR7,uY-
%'GAY.XoXpB]SnL)_5Xr'].[!!1,t3t-9*ZHKB4N"YsdS@ND\S")r#sO/"tc5Nf+8.-5`i;V'o+ok&hnLqCiE%k!drdm5UIk38'g[
%.&'ES#sZ^.`cWSf&Kln6J0`6*,fc-<='RII1]cF_6fU`c>'I]>2#Z&"$k3iCe98"eVeALSP*'\m(5H:0<^Xph\D[`[S9pQs/3'Af
%Z`oFgm$A(Nfc)_3FTgGlShk$CM0q8mn^$AYqh?oO(otu@Z&$_W:GRc3(8IMgbdSC:HZ<Za`UCOV1&0:;)A6c3#Zu2sUA[0TFJhQs
%TLcdI45*p#GR4[&#Qh`r(fWVMG?kB<'<j*_N/[r'!%Tlp)qdG]>7(<f^"O:f`)Ct>YZ`<V?%lYVcHaa3"a$9gHrnmFF5EUYDn@6G
%Cg7$V]b4+^XKe,NH?C9s6^3Cj%m,a49mB'?2T9s*SKO@S]G"jZDoEBT&oZ)0X`G=2$1,N``;F+8Z:7jc00,@VDD,_dhOpe/qHVVG
%!U<aWP!o&3EkEpu>0ESMEuUhG^^;D-Ib>c>G^1\^)^7oL%TE7AHUKX<:mc1U'2LZ-bp+FQalY\[q!ECW$8Xt-8[=dX5)V((,nh7A
%&gd.N98!mS;nl4E9K:,io=0W`StkNni,jbjf!.bKE?n4%-PK"lgrRS]KgN$s7Q)_MXR%F^+VE?u:bB>$MR,%bWL!``Vh$b$,DB.O
%Lp6I\TAr8'5("siI%kHtNoPlP'<%EO%gcDb36++3T0Qk]Tc?^]aGW0KXTXhu3t2f,;!1[W"G'*bPX(rh["FLrQqB3&I$R+^?cfsH
%La5TE$U@49SIY]hP#AYLKV/Iu_E@V/o"</C7!Dq0Ya6:qOngWV/dMV:SY\>%Et_+h+I&PQTP#)(+JW3q$)()rD+6i#X12#Pk8m%3
%S;?c&FAY:;h1if;_]T::J>P`&"<b)(3.Xd!KLdl0m+VuEYb2h!E5<qH8ZW:hM.[,GAC*=dRO:B7X_>fcX[JY8B7VPZJdY)"`/,\+
%l=l3io7<[$(o:e5)T#@'C&oE1_Ba^@8!+H6bNoe#d^Vn).iunO'I.Q38!!ur-)``kfu;Y6kgW8bW7+"ed1O8GDH,K'a3cUp>kg:i
%-o_R?RV,kP>K`[s-k])O&1e0K'jWd+,XDusE>5?,Drn>`E"nF&gXjG)8j#aS+]*G?ZaU+,ckJdAKcuW0B(B(Rb#3C(GDr<\r/nNQ
%Cl:"lmr-+kh\KB8T8LtJkTs+b3Q+.SMJq4b6pDcc+&)<ZM1.-u9]eM?(7iZtrsgR8RJUSMR.r<j!.LV:4CnM_d9n/\gqf\P#oSP<
%SX$U6M!GZ+*Ja]g_e;IFS^M>3PAGdmRQ27AZE1tR7&<;'#GQ>NUEtIsfT;KlmXRtaR.uXd&&&/:e%nEr++t;$["qI2dE2^QKER-Z
%&4A5"8dOAY'<Qp!`03r*#9oOKAV;1XM,m@WZFT&&Fth=d$:+e.*>(b/SW>oR42+/cVaIhqcAC*)JER./8E=leIh&4o,BSfa8-F)K
%<"&/bibV;1l6X9qBqW`787@cA,4)t[kOa@_5(*@O?m5oLFth=`*[d=gj/3n0,k9=i-JJ7Z";>VPFWMhocj;&Q!9s\#D#bk#9Km4s
%'5[_lJr,L!,Jq_2J3(M(&jZi(Km?Fpc:18NW(01Q'E)thm22O&*'kbkPb?a'B,B_RUKoMZThY],7R@Na\5@P7*^lnA9_:XC:BhJ(
%&9WS]2?5bR6lSRcJ05/n:,((M;(%`E_^P%+JV?iQdDf$2QtYM.d:VB@-^\T-W"Vk3`>Fka5&f!XY)t\9:bCUH@WaRk3^GnA8"Jk9
%c03(O*E[JU"HF*o)u/dZCj:'e-#qFKTYouL@21^Nn(csee:NN@NrI..,)N'i0[U(I-^\T-W"T^fERY:Ag,S@#'5\^8SgCVf#q"@c
%l3%c;*$s<45&1B:D&d\MM2iDto)=bZib2`ik:_dF*X#RL8QbUO1QPo-jO#KS&ja]L)CKMMO[nk1j(t&5HH-nfO,F(1R)4oP,Ruin
%ZrrV\PL3U/:>ojsPD?a:-<Pp8fiF#u_aKo(=FqqD/B2UL>K+3&W"Djn6SmGb)^6.$fnJ0IO7\bnnd_2q\.L065?]mF5?^IQ4+IBD
%Li/(qnEu=t;1"9CG_1b6YfmYAM(\0]nH,U#-Ge5r(=CZr(=D@XX*B5*[_gR[Aoi#\1d`[hGY@Og4u<&`[MsZN'_7eLEDO$ujN0;Z
%im1'9]jFs`E5iVd^Fi"ac,'I,MifemR@4suSsL!KaNK)ci5`q;)#;Cpa?N8.o$bkt!G!B\n`Z8P'Ni7s".1nS?RGp:@@@1g3,s`[
%J4CI`:Jg91#ah9X$S<<fi"R%H5R=),74#Tt#T1]W1="AmLt7S.$B)t6:/E.-hm"=p&5gW1rC9gI\oL.W,EDJUDU/-.2p!K&"lgs#
%i9\oJj6e6:MNmqHh+\%"mO"MoWG2Q[2Z]%M=jGht"OZH\.$A0gp60Cj%Inc9KH!n.YS9l8&'+q4U"<F`G8#]8U2lLA8AV91%#`gp
%2+Wm?CQMNMfPhM/[6`APWbSgoNkI_:gsPA"%=nJpOH4JH/d>fRX@c_Cdnh9GNho3C/HL\hXDSmB`D7M4Dr7om<+)+OmU7;u*MNon
%.acY0D=&[<`\g&hX_Tj)S(C%;Q8MAnKeT`fAeQd'd=M#O:,gpm\4D?U6I6^]`(`(AF)%qk@'g/gnIYXClhA"Y4g[%dPF'9[\UV[+
%7Tgan,Q<TsMu&14D[?5pn8&rY5Bh<*oo"j`'*r7*JgeU/A41S\M[BWbGm4Lo#]#Np'':=2K&2jLVB='7Q,lki0GSC,!QTToP7UU9
%)ug38O64eT<*C-9U(Do!\uihHaZ_Qi^HEFKjKRd]l$UN]+fULF6?GEMSe.I]U=u/6\1L,3'.sX>q(A]'q1Rr%c-H@2i#DU+M.:L=
%TJJ8(GdBCQ),=n%&lZ)\GMXN9/4s9+N?'IjdHDW0RfZNHVMtuD*#]4mMN^(IJU\ljk\;BT6Ao;Xfd*itCnF.l.9N>b7@$B*lm`=9
%eM=$VX7`5S)DO%jh#fdN?(,9IHRUr^?g2><,oB>_Qc_\k*.S;\EI,Et_4kR>!_T@91_W_Y8>7sg`Ot)&^u8@a%D=8?a[Au9`Mnrl
%RE]bEZC3s,TcsEt[2CCf<V]j1PZCfFNIDY:9RMnfLp.V<#p87@OJ4J)-(FuK`_;V9FOhf/9[ml&8JK"8("(D!'#(_U5e"=$Y3BIp
%N-b[2j6A=V-unHrg*qk$f_%6]X'$)-.:lnFflicM$+FG37,u!KSnBSdO^%!P0/A'u9J..20ROL0P)-Q-Nahh5X3(X],Z*^MN@Ar"
%lNcXt]3qGSP[O2?Jk-GoR)i,[5sndW716UcZn_!C8BB+NiTDa9^+W58$aYX58j^Z)SDmsPU&>_#&LJgcC9C.P@3R[>4@+Xsa\Xfg
%'MhQL<hqDb=@BL/\KN.4M^[HsIC.U(jpp%i?dT*oK;5O571NsBL7(B7PXH'kGo5-HUB[C7QXjUY$'m@7Ak"K*586cN:1YikQc<Ga
%OaIXDDhL2chLcq-4s@b9fIFrP/`>S0S&,AcL(Y$66l';HE]Le8d(=]g.F4rGTAS!SUe$!WR6Wje1nflU!><PO]P%X5M3D(/k7Jt[
%Yrb>]'^W\QjDZRp&-ea<i[GZg_kM@(33kAmjOEH+mFF:ofeSN/9'BgF=$e@rdksVCBT%`Ybtto\9E1,"U+:&SV+lfp/<rjdb#-FY
%h-lg+ggOa/qK&!8;okQ7Bi`uYU21-*7K#s7)<E7H:_qmP)'(<(,_jfgkVO[p/!Bb^+VFR=+<"Du%5d"X9P@aQIQ8;bbsRe[81L(1
%U64!Z.ZL)47Y+9UN!FGQ$btV.Ma.CDn;LS,+[0)*86tCb8k:&Llq5-S@ka4iU]dHfqWHBdH?%e8]M@[+P^@mN+6<n\\jhCHU898/
%L7kDaF-A/O9i<"69i=^!8lfCN?a;PLjsF=#W,A-O^c5T`4>%g:OE":[O<!X^;B>GtVOA\iQ.R*3dZ;.:K;48In<2<';h_!b[j!3A
%";S$ZJ[PdhBlVXH&h!9g23.N=Opmj7oJi^%4A.)Cnkhn#UH2MCEtgQo-SfPOa(X^XZH;16,''2b6C[#lj]U.\`JD$rlZ339BL/="
%J1(m\%SDD.b73Fsd"a>8MkYP"LTg3@!LREXaI<HM:<!OsJLXT_0eGd/0/%rMn`JT8^ak>qB**jO@a*JlLpjF):Em]71".-FW^(?>
%\I?&U^aPO>MT0dp(%[%F&FiC3!fRI[.B?]WOA*%h^qs8li!_OEGU^a.1+XX)Q3@B%=Iq<@&3r.FVh_3I!mP+oNT\.KOc@?FoSsM.
%&?UD3.;M@?d1(5cMV_0<BbM4m1ScBh;*gkb@4LJCe&Fb!dSmNlbDQ)!+=i)Qi&HA3K0%t]/HX5_*=;+fi>El0!qZ2K5O)SIc3kkc
%5nUJ!s*sb!Cr_]KaU\97I(U#P$(lucWo"H!!X&h=+,+GMTRiYc+S@`[s8B@5bhU*GaQasj1RU[LnoSs)WX'+Wc-1$@QG>GRkQ;c[
%.(m>p-*kIfcG;ff![VKXCDJKS6gGc=U(haV1/IISlW,kE<N*p$+i3ob6Ypr;8Z/::C+OJa`b9cFOV*?0P0Ij[/5b2G8L]u85uq%-
%Ta8@5$3M5aD$UG_W-2XYZiWN"[p\toei_[Q*e]F2E-'L%>i9\>c,BAHZ>:?YA`r\tp:^U#q8AUU@Y(UFbRF(ogEpR.R_nfNK5M0_
%#fckDlF%6HWE2K-G!Cink(mk#:YH(A`JKc('XV>=11V@@rH8fs]WY::BIpM+ELXhXj+N9=2Sbb(^r_en3?8Ubp`8FQ!qF;<`+I)>
%N=Q@@2c)QW@&3q0d15[<)4)D,p$-Ct22Dl)o3OX+lf8qY,L[UCmb&'(L=jUT"H"\d^@L:5E"dN:$FufH.a>a`Tu8t(M90C/:h#(r
%3V7;seci4YUa*/HEb`/518G=b"3dat</t*rLm=5I0'ajH@i@>UYjY&(XsE\]qO#a,^L;)3d).CTD$AESg@-]]0q8juL+?TK"mfA_
%9aEeR0Z&03Z5aI\1r3^DA`O2FD@iG*4@Pbp5)0[UKqnqc`1hj[\S`6/kN"(S\2Z/F"t,^L$)heYf#Q>P5V!7p,`hW"Wu*(Oq[3e?
%1e:aF>j`_T%=b?F,@^>%"]3KXK954N/&4QJYp(cTJ?pBafs9$1+fdB$W^NND,ZA+;8jdXLN#.WH"^/[5omfG,njmKtSX%855hJ4B
%'h\.Kn?J(s1)qR3Vc]V;.S>^>Jn4k+RAUAN"#@9T$31=eSUM9XK:6'q!ZO;eOj^UlR%m.dZERqMB,s1,",P@\''h8^Qqi60<H<_j
%^N:6;i)$*<2gI!,Dl?`gCppGB=^IhQc.<ooBB?nAO_*I;!'1M%Wul;4I\].rgk2Z<):06%o71RAe<MS6$aT`$=rjhiN"Uu3,G`sW
%\MSRN9%?IrKNjh8&8AJNEiMB@f:aJcfr;n(7P:%1B\TRg]r:I%U6CLM!30r@PtY[43k\dXW_mFCQ5#?Mc>9T)^1=)\kq[L'.<V^d
%$!c-bdD1`a&6`L;ndX1kh8uZ2!^h">@,#Q%7Eg(DZ$)6QT0hf[;PedX3Q_JrOiBet:^Ol#PKXE5h/)A=[8^7m!G>CiY@%K/WI)Hp
%HZEQcqW+aEUcXYNE86QqTi/:+g/fU+_7/@TaCN)m6TLbb"BdJT8nqAPIqs]$b.tRB*#>h!+&?iGd#549`o^hWdSu3]JO<%F0cmAl
%,2NS65c.K21AQRd2?_ddP=Y(7'))6)YDTUdo-,;Q&r7FL:kOUPN'R:T7^?O%`Q8sj9YV_/]01Gn`=f9SGS5_[+M$9P7U4M<\lKG2
%^l/P.T$C42ihh(KdYAcM\<.!:AYh"7g?ko42\$WN3c''m[P2@NF`D@@:*(,C4a;=gJe:7eo4k1o&.?0_/aNYHl$2Dn0YhfA;P1l&
%bP$+Sm8,ALlo>=d-:?Gh5D&cH#Ig%rj3@OGd:XC*mP-3$"IV-+,_:[sjdmdL1$*ea;Y$j=@&(6.%YC3R+a52'Er;\*lDk1OKKCf2
%Hce0hMkl[AF?]qPdDU5Pk^c_9X%huha3JCcKoBD0'\'1$e<%i91.1%lM^kV3[k4O".2Y@H\^B7XK[B>$&CpD*;q-(C.l?U308[VG
%<,AgX.)q]e),r\uY:HDSL`Z'>9=e[ES\*S:rD#:ERG^o:aV1'62tD8,)58aldp@P65`W^YkUGg%J>?6D-J@_\Lk2j!J95=;\Gq3l
%JJTnN9\[HUp;Ua?hAa.0)rGM/R3$1hANQG_Du8%Ql#)(MUKE*h,h^qsKu5o5J)!(B^Ft8U`QZSgTiggHJi51PZFcQ[mGbW@)HT6J
%U@@GC\-JkVW.M2.n!+oD6rRU%rmt&4o4NIKG1@g!AqLhK1PTf52M:.=/+[nsQGUiO+`2!+A3d(L":TgO;@I`KN-1V23O9nbYm)I3
%7NA^!X]jg!.T7o$-tf1s(X;@&4.BM9V-k(#ol1Dt(3pr[Q)$gN^m,dr6FOW"FpdA3^pr1egmihh,BXC_CsHh@^^^s9b]%nFQRP^%
%[2*B=!<tRg"keb:W1fsC^Ds2n#hu3AVHRoK[JK:>2q.UlW"<JXAZ)PDL5/S5"q/dM8oE6::bZbW0GGNL1fRu;_-&p"S2&>FO9+pW
%<^k6jX`_6=&<j.2AQW3MM]P^9CGLB#5n06<DKbVH?D!2'`8+BJ#VbpPkY#(t,q+!9Z#1%s6+C!L9(Hi<+<Of>:(k!;p.#^0#IC3K
%R'J0IU:Q5pqZ'gA!@M\cR4e\9?X,^d@n((LY1kGY+Rb(]2KpRRh"$PXCu)R7Q7_:$L?<KKA,O2(!Yng(+?]'`Dl/]]VJM<TQ>`cb
%$Jc5hY6bq'3Sg`CQhePU<(g0>0jmFMibj[_bU-3\g$8B^dk::2W@8B0PalWt0P'"/l>B"e*eoSZk+g%`TXPNDk0LS$N-@t6r#R>F
%(/#k[/l&MRjCk!KCb8k&,I"@4>7A(ALT2UmSi)N2.C6%ZHM;5B"r^+0<DWD7`*?#=J24@Va2:/qX/0:5::ENAAG2<"ZSk9]SG5;a
%:(rjG`>"%1\*Z-230K$Y-QZ'KjlVP4fa,*rH]@Bb>tru_R))TfZQQ8&?Z4*eRaaDm(j@J&i*M-pZshR]gJp1TK^sQU,;4Bl['#-^
%Ls`erTd@f1r?5sBf5r`q$HKGB9$jW(F?f$.iGrgM#I/GEgn6'0]O)%LF\0PVVH)ZiXrn-V4U]SAZFqU:H=9neWc1HZ9)]c`V+jm2
%UUs1;@g,?;WfVTki$JS$D@(`3M2]_m\eF9SorN_&"tRu.)GaD<a_,F^m]Cs0YrdSk6XTssL0c;HBg?i#b)uipP-COO7OZWt#]"u?
%J?j_ZqgOQYR:)r/.S@SiR#:.:U=I2I3UeLHYA^2c+XL\)G)#p9ZH&[5#9r>;.n'iEIV0eVaAR(#a1ps8W$`jW6)+9Cr2#J())o,q
%+SnD9ris8Viue+kVS#,m:\G4(:=)H/]97>=MHs#KnpP0Q.Q+9:n5SU(FssLi`\*qLUla4od_`eqqg'34?\O*P6.k03-ul";&NQ2#
%$ng^TeY-N:b*[$gYX'V:*pdArB5Vjt0chGB.ND=B"59KI+Y)Z]P'/V4>aY[-RDeA-`5)M\E8#'?c#Vi,ba+%44n[4<IUH[$ZFHcb
%EI,6CgC45l;d[E"k/e5\i`[#\(p_R4&]LJ'l<EM.5SVclj/0$m3@Z+]?hbQ1@DktG40*?2>E0'7YX]\jLZr>gL%>jnB/P>2p/5Vk
%N,mNDC(M+X&"aaSH`$VFC<R(J4[?b25HYE<;j88%[$dY?8Qne:gII:]!i^hCO+YSSPpNTm!9U2-Q0R\heX)QS:E;D*GU.EnF64\6
%^eQ5Ld61c1+`E^Q""Q!c.9/fW`'5+4H^=O76W&Jk>=9Y[pnl-j"-O$hF!=jgk#I]'$OVfIC'$bu;DIN(%#EL&p&.G[0NcWuf'?lX
%?AHce(RS3uq_"c`kbTC<GFH*9%B8iPr.?MB*.IdIXtUi2oLS3IfmbqAkW.mj\f9I[XomXJ/FPmgf4gc-N=OPggfX<G487ZUc"*L8
%@aGV%%AlKN!7jZi<h?)?/GZQ&pHjat:q=TA)CSiNBkNqa^)rI:4W`d6CZ-1;>2W#g0#\!m6HpB^emrVI<>e,cka9_-eigJaHE&#3
%E-JWP,Q/tdJLbmu\OtF:;MphiG=35g#ikSq,[1Z.kgG&4?!oreInGaJUgp'(c]3WraA1o]#([$u36+2j0<S:%7p,Y_#-J1,3._0,
%'RKlgk2['O=B`4(QPTSo>B^/nJ&)FZ(m'rbZ$\;hOWSQdS1$EIoJQn;]6nj=i"B;O^XH56AqI&>H$nK*4&dBpmW[m8f"s;U[W&.H
%!;.3m&I'6u*PicK+6d2I+plNSSiFsgYL0J'^MUeZ+/\^.Y5'ra\>Ofg)8cP%npP-t\of@ZhF`LW27UBXSH]`JBZd:ZpS70GJEB.&
%#<0G_S_cPBB2?>,rU$ob\#V/e1?L["PfPr(h$2:odb@T[hmq^'*T/d8Rr5KfJl2qq=-O&"gdcQ:<;&-QX=Z\B$P8l$K>V7cNBS/,
%GeJ#!K+BV\E&;0]V;lJToZSi%DOMo`T+EE?@"R.,d!W^:G<\g3/i1tnI[X#[\Ebu"5VdjF+9Y6%o)E,4;%I\lKN'p:9GE,32goe'
%4g;;4N@lg<F(]lfX5I;X1\c$A7Kb>H'P-=b!uIU:EWPF3*=h\G2/nO-/_kF.+6H:4!QKO<A;JZnU/_c@0B9@JTboigQYJJgB5-<C
%?!=bud!sLSca:Z!7A2hc-IJmoD-p*QhL3<7EZMsD_DSp3n?mF!Zp5A?09\l=]goVbgo%J+j&h&BZuD!W/UXZPNYJ1o&58fmZ7f;*
%(liu?DD<#@r<"Jj/R5&d$hrH9G7ru0+fP%;?2:(ikmQ)8rLaA+%Z78CfX0L$G:`rB5NO,*3;;C4M$Jj(-ioG1]4m_4M1F?Z:V`KT
%gZ:9I0#)E']n3Zj^%MuV\J(0nmBF[nf:,084op"Urc_0.&o*)HanN-Hr2Ml76Bn.SH7p#W+hrrj2!^k)kg,XT7JLZ`n!-n#A9`B1
%Gko6U*U[k4Dr@Afor>cU>WJMHHqO77,d]#t449u/:PRMNLc!@"s4jD!+QhdJHg3nb^+<jLZjDY4l1X\PgH/;?ldX2hm1mA^M3uHp
%!]fsZ..*nS?sK%(bnQ.-^itBi'7Z:VaDZaX^]TpIg_/.E1EpQ]'82#%n3,'SQ%jT/l8IPY^Pf]:bjIb+YdcEn<XC%FAhIud9F;M#
%X[o3_@rXk--MTJ'"<@&]G^]5JG1Fjl:_([>Q5AIajN=E@Y9&/9%"k`?lAA+>\'[&u=ms\:*/:XZH<Wh6NFl[^q]^BFX?;:m]g6';
%T,+G/YnlVNJUfGuj`?)j.q7%Hl:"=/MPmX8#6<rRc5UFaZqT/(EcXaPJ3&u?7O:Rl&4B<8U=ja2%0+3aJGqWj3aucQUXhkrDnKUM
%kX9Z>GBF@\Mj4-oHW,S*K13!J6rc$^4_DVlRe'^8q]X_==OCBNH^@+@E't7K8EM%LQjn9Z7`:/:mT<X04hG"npUdo7hiN?S_cmI(
%P'Sm!V+9;W'l@nqn=1jOpeZ_e(7B\E`CKU@$mE9*HGW&q*&HKTi1Qu>]S:RI-0SULcN?pQEfWT'mK%u&=g`?\8Dh=`)19(2oh<-a
%ke/A8_],uAfYR1pERpj6Z\h7pA^T1E:#/bUd[MRYB7rp42o<J.I*XLYVln'3-u9(CTd`W_NI&Sk`cJ(!B12(Xl+9e53(>^k5\.Za
%Nf*7<1bC;-9lPksB/?::bWU<)1qtO!J70=%78^!pN^caVqCV*NMBoAfKE4[Rbpn_,Q1RZK"gTfr)!(g3"V0MfSTED*<YC^MKns.H
%bEfk&_:]=;;?R`?f[Vo2q1Pu$OhHl;[AuN)Jm\h]GsN#`U!?di6(%CTqIp>(PYT\jhk=d%IZC>0hi1+&^j<)d'm_-S8m+[(pt9]O
%Y41sHU7O^&"kfYYUg5Eo&uK!'V1W85pJ]jE&1W#,&ST4G_3gbbr2*;m<#C)7Y/pq=XO(1Gbj0&jSd(l%e<,!9$]ir*X=@/E*%Pu!
%Nc;!LK3bsHBT[u+%.tl]#j$\&*@pEL\U2/:$0p))#gYqca<3930NU.;D$c`YZ#$]Qaj0(C9=Dfe6fnHFD*=lMEC-<J@uOm^-m#=\
%,`\9u]!A/C*hE(LUR-Etk(>EI:VbQ*7hhtPpp,I)eZ:CNQsIuYcU;r&H7jMe57'cE2Nge9NZ4)#BQ7oah+T5k?lnidFcD^gPXY^$
%jM0k=4G&3<]k7QoGh%.HL6.[U1\kUkD`FX\+QqV:m@4?85l=OPA4Ip7UK+TBFWl1Oi!+'R%j9N[j2aYO*(FB+VDSHdVqK&r#Suo%
%=&q/0O!`].]rG!U"`?fK-b,[YoqT:cf\KT;UTh)Y>iTq%(Tpb/ie#OqS<Vhgg^jOHDhrgBU'Z<Ak]NNV8f*[`RiO4F?mIfF9FiLF
%-6@N(YKI];)#?&4J0I_PPG^%tBEOuW6RI^Wk^650@`.gRg\RTYF3%ctFAoPIZa<$hJK\qF3.N36$_iI!O@lQcPs]d:r=i<4WH0.f
%hsl7;Src\MT*/H0I(=LJ*sGu]1a7sf5pDg)HU1SoRM()GgeqqnM)T_oONrUS:*GhS&dOq'9c`0V'FKJ;A,[s;ZppjK)VU<rV-3S:
%5UCAq-QnEs`tdu3'G4%2/O95!d=__fDdqWbVR.IBr`*+*`gh(DRtgq%=ZKJMiW%8;]6"g<L/Bdlna&,:E.(1$4G#:FOiIcFUP/^"
%DnX7^%2fBu.dWNi:lBYAi_`1b'(p]q9UH#O2/jD-08<rfHH%*N]V4)1)]55JDj0d1*t,`@0pZ(R%2a&($r^n'_$\U(Z`:A&S8\TY
%=bUncBALlA$DAqa?Z@kFf4#^gD\chh&a`32AqokFp$kBp*WlPlKnA*oHaG!GMPYWL)mkp]`<ir:$h3)T=sB#1E7@AcdB$N]5-*B2
%4"+S$RDoOLEbG@)SqR\O[DW\O0u.H4g-eo(RLnH!?qfgdF2O[cgk5,mb9FaH<Cg%ds)=jN]gDC%8.oQ$NPaYTAp&rNcDh('Jp:F?
%HON`P7KpCM6GfKaNnOO,n=F:.fs567A2r"'0R_j(Qp)9NR?_0sqn-#8MQYoO6u00]EH5>2_1nqpcP^]G8cXq9@TdP%er"!FcQJa+
%\B7*d"''XWKa."MT@n`3^Lg\>DMnpugOToP=;N;<n=eC[XCJ94^f1c<]6cAn.?(9P5`iUI*=.e`66apXW=:%R<@1:HTMS8@=l,kG
%+ImF-S]r90q!W`h32Qp.-u]VRXGepa#BP9OaOX<$IU(Y'fNBPpRQ:5[?'+r-d<gU`?VnDE?V0bhdt;cPdd#,c5r4.3QE6h$BIN9p
%e8@:DI2NJncQ2?pLMMnd&5kOPlkh>XhGC+iOpq<s9fEg6i4[[cmEQT,/7%+)A-U4+om>(lOaF$\<;L3K2k^j:?((15EipH[Bic.Q
%0a'ls1\F1(E0oYul%lP62W,3!)3;EX+tkAj;d\1#X*0A&f/$3W+T%mJUe;1ThN&gZ.Ot2[14\s]Geo4<'=(3EHdc,J(+sB7:'d#K
%O9C_HlP^P,PR@JFrdjSU]CC?;:EXS7-E5"<=XkA(Ani/ONp#1_Z(kI`+?,"jlp.>5Z3XSO]OpIq&4p>9Nb>f#R`DbYSL)T+`8+Ua
%PQTXGjp(^u2-)N)'R7OW5D1P4e:n]HWZhCc3j90N,UKkc4pJc#ADkt"+b(R?\:][qW-X\RUdI1K(alHc0GfqH$1jtE+S)b56*)jE
%`UKh8PZ#]F,"hADHNb'mGU!@94si5Jl3*A!V#OUL1Qad=R6qV4s$#,uO18E"$W*at_4[33W@N0,N`lY-X48S/YGKK65KmD[j@,!K
%n)dAY'Rp_1<o)i(Ei/Y\*:MPC\<s-=+GjR9o,A839<`-%[F)%X.+@K&VlLPe[Z,9<(Rl=#>g%O(+bpWSci+gehd&Hu*LDqh]Y"KE
%/(&."StI:i,r`kK44THijFhD&^sKtY)2B@%_>*&H"/6F-Cg3,1q-f^`K.MCTFBHW$_J:1_%P^TP')d?JOeEg2'SP%8cO%!Vob]K]
%L"V!R6&-8FOLI9<[GH3`2^oR/5s\hZ\t:]^5X"hATNRI')mbk+2efJV+U%_3b:9g<ka=gKj^oplh9l(Sg_b<C<^i6"C?6+8os0HK
%#Ac<JSk$h3itQ>qL,NRmhQmO/:30N(Z=(DpB;c>/p:8oe(oAt?l<qW:]V?;rm<8%O[&YMq"cta?o)kGuFt$uGE@POOF&P;bM`R%H
%--MYY#^P,$XE2Hm&;;j8TU:/?+#U)89K?r\GX$YZrgTLd`4b*:`e2uqQbAG`-"[:7,Aj_C1Yu=g!+\cGc8]:A`(JspV<50gTST#f
%FP+sj<Ab#3L(pO',$+?cZ((Er>58?+\r]of#_qfZE^cc3*SCf5P!Dhad:[b=T[eb(L"g1Np-AhWnm'6[Kke^BKPnmP\g_,_<>F5`
%>9t3roN>\T(TrE:$!sa-@)IQ;=g?LlO7mCo'_DDNb%d/&G@>SfGRUX(@`.@_k(9kk`W]RI4"CS]la3c=eP?Tfh_Oc3f$WGTZX`EY
%D?HC;\]*EIG`LmhEHNfW-n<)sah&Y$!>fMhaTGO9Q7R]7lN5MKjIBj!C'iX]Ca&rjmJrZ,eL',(ChWNZ%X6g\0kDco7.hu!,3<:W
%M>!r(-Pu+46WQg=PHK'u8l*qa7tu:nndA^HR"c$VhW<2+*7+qBLB$CF)<6udL9WHcPbFLG1%`7?C\QUg)[8'uBhISi&T+\5Z<2$>
%=ssHKFVqYdRJ;>i;CpQ,K[3[m$uOZU+09gX9rCA+WiG*849eIZ#-$9e4829tX',0X$5hDB@fe#Z%Q*2#=W7N"UM>ZVpcF<(Y/,B-
%]2]U%;i>6T,DU.4A86Bnen!+P,`e6]$m^kE@giG?'ftCYH*$;;<;tc-HZ1cV'=+&cUIn4as/*/+1XuYqB9F$L!Zj-`OepI:!F%a+
%b-W9Z[F0R=UeD(.6aFoB:euBa%thQik:sWkcZ",M4J9#n2s$45:mMarkUa9``@/aqUiS"`JiY1eYJoPGT;ep4OpobcR?]3f;6UM`
%dHIu.@1&a1N8,VCZN=#m.SB"Be?KKO<6!/-gZg)^V[c8fA!sM91a45e2=ifUj,f,88LE%O-M&oL)tY=2^qIaRPgm7B,a,9/*a*8$
%_\S@rN>uUN_qq)c^d+@E@//E@M9..p:Xs<$ecXtrZ6WE4IZ6eeC.k4\:dl^m[rkE5'OdeY*26B-WR[K7^$6"I:h78a(A\V1SMMh+
%(R'ha[fh^)%A4caV_PVf0f9na7!CLc':kqnTBK\p[i\>N`7lNc9Hs4%7?X`2]jp.U7t*DJMlT=QN)CD$8oK#eW.euEPnY>[7ARp@
%KpmC\_LdXK6Z#-;Ka]$I'\V<jg$MYo2j$P>5C+940s1$a"uDed8;Jg9PB^"86Zf^7@;:F,K#*F.CL@eS^8i+cBJ9#$>N>jmS%M@Y
%aRePSllY'c2,8Ujknc$">N<&lnIU&90ZI)#@Dh?6k3ThdjdE:c4cF1c)/7\Qn,8'kBPe/\leM^+6FPt]9G_D8n`n72(/ldS?.fE2
%P.Cr8n-WT]Dc!!<Grn"rh2d]XAfb;@oP?3b1u_7(jq0u!i-6M<c)\SMVU(,&9I=>MI`W8^f#GrYKYUf$bK+4A`RJ_OSEqGJ+lcCD
%B$1F;]K1m2';9*i6mT:c.1\qUZB#*h>+c4:Fj(S.D^ML+Nkp!SgG3K*H)N'_2L*\>ou`4YjXb[0G.66;gCZl)-oEVJk\j$WR:V$m
%KGojfgK5!7'bqg%.E?c$]<E<Ed0g;_@J#O>*FrHL,+@*jQ+E*Ia3s7H%nQpfGd"KeQep)&)Y4?O0BP&$9V?$]e%#RUB2ctV4g>/s
%ic1jJ<aA6T!B[O@a`&WPG0";(RdDGW0uL`*C1*+r7]@9ZrD:Kg&.2uHCcCS]Mc&#%[j*i#mE-G!m'@[BkqS"Kjj5p]/Pq4Vh:@M+
%DcHEh;r>#o!dTE-M?s_2A(@q*YUh)sUWs,KS9IACCe?FoM8Jc^n6-P7=_I,>Q'b[F.An(`^,:j^1\omRjP^">>-CPJ2h[7nJs'?0
%k_L[-d;l)7B)D<bg.ds78PK^,[YKd.7m?iYVU[fJZiT/Y&GhKLW[7jRj]H2!8i8W;pYkg'K[$KI3f'F0\hb'.=GT9Q4"C[8Dml07
%1t(99\OUKQ*ENh;A?!JnCs5^C-&[(C0HL[Q5BR\79[qLGe0H!WR$UIN%]N?Ic[g@14*5S?@)>4bQ"piXI4[0P'\"MPXqdu?\tUSt
%JJhKQB"_M&c[(hbl$c1(qa$/E`N&On1Z*Rn6W._G\Fa;<XUZ5ujN$'+(WPU>n^K08h'S/9Ju#Mk:4-p'_U>2@UJSugPObq7hU(+R
%IY?m>;f[fOMO#S%g0NFc!o.Y@=QXLXro_XGQNQ)V+s8Hka^')8An$c1<&F=ujgRj3;jZ#'B<0@i`mcm^lgZ0d?@^C="quD=\=.(s
%?paH!p8uVhh(F&T_ta*LWd5abU<06e,2Pf+mHTS%FVU692q?>EV^D2I[W%5/XPn)A.3/^j7Qm?jWJ?r9)'N#0e?D\e0bQImk[8]o
%@2@]U/7QL4b\R0Oh:ZG*,sZrP.=mcEEXU*,:gtnZ%]9p:FB6qV%UKh>BhG4tP`L/@(+n\YYHh9[&qI(#eT_B7\TI\dD6]PJ\?rK=
%B$Tf#0%'uRE6Bej3J?Pn-<We%"blX&jHZQqCNO@N:7GeGp7Ud)%OI*ZG3>njp:8CPPjaS"ZHj=oRj[pu>A1VSn<&`s,"FT'RJ,nZ
%r@<;nmM'@[=D#i5[<81@?S8k-kgkOE(]?+MDjRg-H?h2Of+tO:[=o,ZPI_iq-B4[KaQ.HX8G?L\H@@-0'K.54VuF6%8Q"Uu5jWm:
%P<Rtt^KNbas._ShSbqr-/%O3g$3Q,6U[f,eXjOCM.rLA@M,HY4aU\Rpn4]]91N9@k?q2RtWSBQLn^?OeU>=.iPE@l"*b=h--6Hdh
%5phjjQ<#M,@$=g$Chq21SlN,TjbC@f9Hn%.`ZQ4uWq6n;1$X_'d`5#Gp'rC=/R5'C:*3WhXLsl9j?Xn1"S+i$s)J85_tWQ)2WO0f
%.eaEA4=eZ_0AHFV3XLEZ]^[%bnj+WFFRh^FNtlM3;sAV1aTB8irfI0TIL$<#OmmKb`q,dM!TqmDNk#P?S1`n0nls?q'JV3i54S"a
%QX8Be&3`"B4]*6%d*Y1NiXJ?9Srp!7Kebgem)gDH8_L0Y)p195VSm&J-jK-+*FGiB12+V@.Ymn?lmrTslp9$4Q&ae]:gu:h3M4i&
%[><@P#CmS:KkM93/aXQL6f<YdrpQ3MhV7-khnGE_kLXU8V(XCI("MYKRF*=ZDcU_P4,<4RO2UXmWBGUS+g9:-5W[d`DO5d]mhe"/
%?<@k9I7E/_l&'>:>g4o,@3l>5fPNudHI2#i3trujK@pLbn?goF!6!h*a4b;:$6g0.@oQL9-,bS+jW^,7l=(J%SL#QJ$-WmfA>k5?
%X!DWZ_>*tu>,ZIOY)RRR/ET6qnjqXm-(_kpf?p\\Df7Q2E%:=/Xn<Zk_eF12m3%BUD/?OIrWbr@2aQWBTA/JZDSNmScJl@Ho\K)e
%KL=Y#2t3[:G\d$l4nS]%$0j<U6c$9ITq/I3WFe2/QQ4-k/G7LN"gb'i3LUbNMo"MrY@m*GN7Y-(C\Gi?g]YDfMe6.D_io@g:6>9E
%jW0>7U"]jc2!"h/'ce_.Wg?<U`GFj(R[Zu9_C1X&lAcntJN7`>Xr"h(iW=PG]*N<*,R2GEFQ$<"&qX>G<UK9^VMLje=ot2[h]WaG
%mXd3$r%(2&11Up6,)$3rAN.4'IGLS/=dCToE]1-(kD'8QF9a7NHsXE*&M0<NgN.U)&M1Le![(H_=Cu>6S?4fRgOjS<=gE0U,D>6Q
%<'%cTf+KrKi>&WaK())nGMX.nX;:-;&bmES=T&<,(@5qR+;Is`])m17,k]o1(O-mC^Y:B>nVem'AHE(Ch_+5I2P5M/>j%XmUW[Yh
%+Ntm1J7TJ["mFP)16DHX)<cO]$qL-LG1hH<6N^W*""oF\NNLrkRV_r4?0H8BGM<9tMS&72T`'&e*h8FT7$V>u@9Nd-3,Y,'5b)u7
%^l,%dFi0/tna5\:nlo3oAEZ);2H-\8%hD]NX:'>Q<:b(G#rYMDKE*`dD-51a]>ci!=GE"]ac+#t"n:3f)BLtN.3Y(DklU7R76-pW
%?FAV7N*puH!hkp2Z*1iIp>L/`O5[A7;9,Se"I'L,Wq:5k.P",PII,K^=m-$OjMJG5q2uQTRi^4FKASfsL.:q(XgJl^6u,*I@1R;,
%V)a4/_oI$!lp-NJ=SK8ejrh+`:8@d]d1ktHQ1Rk]gV<aVs8/rCBr;N1cOOZ&e_eL*65nIVa*2j2`]O_W?U"9+[GcMq^\mEtr29Sf
%00f6r<>12c\PD&ZT:Ynu<=cZ(F3oNQgVNpdDu\ktr7frE+&Uls"8>I%rHDfbV3R1mDAG$5;$J0D@O>$0AAO1g$)L4)`TIPU;cQFd
%ji7!:$LfgTA8?%9pt9S3ZPt=*RE5Q?k"r<&-XcbQ6/T&mf"_%92Mg&?Bs^,!8I7EkJ&G3@3e)XAUU'5+aK3??apqt_p9kJVifnW,
%`/spHR?,V+^GWDcr9"!?+D)Tr2qQU^!ibJQWs7r$anFLJK%\jlW/j=:)\5Nlq>6'iP4pe<J)A@S.\7_.1+(*84,F@l&Wfgs'9*4%
%QcQVuVP(?)[R'W?]gRT'W,XsAc,oKCU@[KQL?p4lmC@@Qf%OiF5PGcdUEhT_%WV@E+t%%WO[4%#gJK.^J]@%XM6%k%>huZR!UY0W
%p>G!T>AG0gTA;;m`XH<<M6(D`i8&Sdg+f)a\TMT:g1doYpIY1uQjo3FE;oh\7qLL:#_m1dM$s_:<Q*12Lm/$(fuT8m.2e1`H[dr]
%6N$!)O?hEhG7n%g'!;+6%GDneq:ml[g"L/=O$iIWq+9$1qhlGWGAW@aGJ?*TNc5gCE_U`#Sm2*u+\sbF_>Hs7MdL%lHH-MPH5=+J
%X7'6!rjFVVGt-,[SIlJ6a!Rt,;,?Xb]:1-2+erWB_e-"ri`Ci@NYYAa,P61n2/2i'k.?d->TAXbOu8TjY6^1/mG9IJ4$OQ3H-jsE
%=I(n&HgI,g;#=gkD317q=gh5XkKIlIpQo,T!fEO#B5caSh:iF`&9P>qm4AQd7lVG)0!#VNk)-!^L8#p93"0(_.kRd=c8I0VH-b"0
%Jn,7']hZ4H:#N'`R@#rH>\N)Qj\rCU,0ArpTj^2lH@E6#mObR<M4GF8^"##G)tC(II2<+(9?Z;F^ObfcG+d#td3<TS/CP5?B+9Wa
%*Bee`R_dT%aS$*@g-l3PL9dG*0&G+XUhJ%+A;!B(C)29AoKYdd*\VpG'V$u.JVSN3F4sLfUaV\n=?b-U/-HnqK$aj#<>,Qe[,Ap?
%njGc@>bVUXi.>*"&FDcu(sPO)oLJMl!;i*GkA-E*,`p@p9-b9=M(V9oD+7i]b\mJa):\_@iW@4Gh3"JEB:D9QN)#aAY6[f2HnIDB
%SB\-5F,j`?HQ4V\>#t-18_ljh\k."mo3q(OON00bl&1;5b_p1V\XG5Y?<ogDE-6QDNe="@gWDCW+75r$mdaFZa)Dm^0AgtJb-KWF
%s"1BFG;RJ$?j>a(hX,AML&@4H9c?T#/@EdJPj"63I0t&IWOU.jD6>M'ZSK)%*uij@M.@fo-6$67\nm2fnp2>aH8VR"5*=NgnA9W6
%?MH&b-Z8+Oijr=F_g3Bkk=Oo?nFFJkH9agGlc0O13m*r3HV3S\q=J%C(AFj?l]Bpe8jFm5I5heb$9-qRdSK##*=PI&-dJ5$Rt&j^
%Ug7c26)C2r9/nrq-WkUR:f"SW=1([0l<06j.Yi_(!\#]CW2H;nOQR&C=cp'Tjct4bL\eWFcZ<g&]?1M[)hEBYH[,YVo=Ei$$Ne:F
%GObf-F@%@[QPWKA!ejVjH%@81g*SJgc.Dif]HHboEsaQ56\B;r?R:G]UqaVb,R.fS"K,NN"umIoet+M6H@LbPWdD;#*$b_<o\3,M
%@%iXmP8KC1d(?'k+D@Y7J!1^'MmVhf&d,!)HB]8&L/hUmV"hM.$uE[!"9rtEY4;Wp\;$Qe0S]FfaU@DuhrKL%8N(j&DP^'6=SLSt
%09!TTaU?i-T(9a9Vb_SHSqg$HR&=P[(Y7WSaU@\[:3g7hf(3Pso"o=2(]H1UU+[WBXQ4HF$^5mSo"q2oS%Pt'cV7`5e8pfi-M8AL
%_FcmKH"#(F9jAOBEt]?jg:<%J7Q`VD@1poX5X.\@fPB70kQ3fI#Q#p<OcgO2P*30$\L<DRb/C0><E(;s9lhq:KedYOdld<^2XA6Y
%<Y]^cSMb&2;&)jKeDW.j3=CXH=N$on([p02iOOXQ,mXX[/X/\"h:0qWWuSR._Ja.s5Ms'.[3e"/HSs(&LhsN;4`@";-XK:3#.?9J
%/6Aa@`l+Jf\C0bn\2*MZ\'*2uJ^rIH;c^fq[n-GBH6t'!Pc]fs34P\c(jE=7[E',B@..`hC,)#d51$A8&]mNKnet<GU0*7(,SW>e
%V*^&dhjCFP_!IVQ/W?:W0)L"QFhC)XBB4s:KrK%A;bIkf//cc;C/B_.>BQ!ILp4./'H-2%n.CB8.nfK-ep()6%,CAadF#*-0?$h7
%Ws:VJ?$g,,G=NAHP>8GhOpHEU]]`M(Pk>jk^$hI896kAZ1`2CeebTJ;K'rH&Tob^@(DX\):;ersTOgi.g#%a1[R`WTQ./+7,NhYl
%#CLfSOp3Cp4Z6f*f;MH`q<Re31*8]E/<:]065Dl03^H+2=@mKQG)*XL'H[1VBg18\`6E-5rN7QS"V-ZWi)hen,Q-"<#i@-\]Yla>
%/B2PFC#XB7!q%aqM(J&-SN`8\68+7ce8A>ns)J>WfpPublPX+h>t`>5MNqh2[tItRNZ#r;[5b-(qmiOgB2i`)7FW2Bkq4P+Y^eEo
%H4>6;()D%=:nJr99KS,U,cf@Bm*M;k&^%+b(+`ti-ibH5V`G85O].inFM](fJqA]b6RpT:L_S5V#]df%cudWs"Z(+]><uf;L@k'g
%PWdYM7O4!`A3OT[>31E9O1mj<!hX&WPFm+)AV$:N&jri#XCk@Q]LX/=liJ>46g/Mt>12t(.#V3o`-C(+US^9eh2WWc\BmFJ8"%E5
%&u/+o-@bAcV%L7pXk^h)@s?c]ddO'4cqstReS0dQBf.?K8QI+0B"=I_^-\n>WGXN?OU%`9XNX9]J'f\4kDh+:<b__X_0WhoW%ohQ
%S\G*b#RF<HBX,m<D-SUsJ-^'6V:R0"NH.3<5r`A!,Ghof:tT:-1-rk\(quV`RRtjdjXd@BJg0C!f`MMDs!Xe-?SX.*<AT@BXH:a2
%CaeCQR3mqWs)Pc5<NYHp!jT$TQTse(,MWnm;\)CTfIS1na5%A[&I\+tWt?He!)(!q<*UN^4t9k]jhZg0mOdpV@@=9&?>#L%@p*-k
%b&431FQh>)k75Ic[,_V]@4fcEQ_7L?;,"h2.)-^V>r=n9VYU%i]KGJ^=nN0X-s/M6F`g"k%PZRn>2m84)tj!rHa=jG%q;(Cetl4e
%f[8B+.*<_]PA+Eo?r@foY0iF4,<^BP"YK"G#HR6D;,^TQUSq/8E^.q-,s+.SAU;`JJ1P%C"sZ5%m,#D=irfSnD#u4j,SVF4G+1&8
%k?p"=<NOJ>63K7!*,MU58kp,o/HDN:6D(f,Ht3QM*GX[V":Zb6@8sq>m8Z?9Tm"erFRIeJA)prA=1OI9(.kAYP.<r.+CR'oP)>/I
%VP:edisru?7s+kU2l#LmC+F:RH,T\=g,`>F<o94/MJ%5KPZgr3melT.a3?_oK3/KsALE0ZF+30Q=_6To[C%_+O8T'5/c2XT]khqX
%eA)M&(BctbLK-_-!R))UjCPjrB\=-rX-ZAV!]0,+P+=],jn9D"NT<gD/3'QJ&UEuhs,fVkWUh47=/r(784I`('U5E9!^kPLam^+B
%,9K#uFgc8uSPBXm"E,+6rHc)4<FCui+$?k"aOD?hR<=3,drhQ-VfBdX<>&0P*2.+DK';E,`AT?013aqbHSF*2H'B#O_GDY\6[(AJ
%1=8ZN8*:qA\a>&j0%?JFg/*(<]*8b7;>4Z;#m3d.OU?`p[%ZW,;.!P\=tZ'pP>,gB/`8PK\D@B@&`VdA8LZd<V+tTpF-"&j:(&JY
%8`^G(IkpK*etP2]bt0Hm<Kl\i;.;DlDADK;pNFClVM9:L\US`R8&ZHa.3:cX"5`NM<3*%MLm_e2%pEn37ek_La6pS"+Mg(:<h>Fd
%;LX<sLF^l-0fj&lXAf`<>>_L,D--'kg5Aee4Em7(oq("`2hiQ5P$VHYePVFTC/@5?:`qN=a)iN3qTkj:GMY,PRNN*Rf-*8R"LeM?
%",c43K2RaKe.cn4<B4V3RfjOLm4Yc.3_uhD8=mdT!u#M;d8<)*mVjpQc=R[^2@sAS>^F(]9s,VhOQd7eK;=j\S7Dl?m=($,hTU+i
%pn+I_)5O-CS#hG-#)#/C5^NYHod7!2)uB!>r7^Q5p\k+o]3<IA/QN_JkuXI)@f!0"M\'`jn2]C-Qg3k`9ZN!)U*3Vq_>pXc1?YiA
%_A>C&fALoPor?8<ZXCm<$>qFL;R'=[3o!ujUq]61J:q@P&i$7=m?a%(-!,l\pQ2bJ[IE;&99NCC\u)?)m84/qPiN`&DnfVcW-o\H
%)CTGG-PR=SR71BQnM@:j[]X0p``:`d9]U7d_PC'KMB%aklNY)++=&o=S)3#9_NpNQk5"MA=c"XGdOnG]@p+YZO/d!oOfZJ5)3"H>
%`AN+1XMi<ii82YZr('HX84rg#,pbbM]Ej^[hC(-sS1#.+pHm$R]d=A-nd\C5%c9`\\_cKm8%O#Y,/CZ<(37$%nn'Gk\"GLWI(fgP
%Y_W9/`O;Rl2*C#18P!GL=W_?7^=PYr#9U8ZS;mo7#J[e%&AUYWi/'DLY1gOl+?$:NrFS6CT&mG*)"dq7,^P7O5(<n,q#&IYRmd7.
%EN,6Gi_9_\2?2ObIhpmo6EBOf!C']8K/NVdXD,4b6j1ft_qi8HfACa[=^M+WBpMSB1KH_Req7QtB\(e.=aOf/]BD=[K^,S3n?eI+
%hPcurYOBlXmIa+kHi6l6?pm\9^LKPhQ^Ddea!`'.:]0PdKe+$qptd,7"Rn\Ws)8%L#Zr%b_Sr.0>V!p!^l:<Zb%Klq5Ds!E((qT$
%*Ydp+YoXVFcUkB"H"cEMhVQY3D4kMOY.,:G0#?ZBT2N\/S_gabP4]r#&!HTc8Cgoa^D!nR*W6*WlEn6R$%=eS]!mdo+B]5<ocRCE
%N+@??Ias>&5.H9^.==Urdu1*,Si'Rj3(I$j22Ii-HlZ3+q6/tr1pZOqOrUd.^o!W0J'b:?)i.&4=`kG8gW6._TGbq6YMW+6kkFWL
%46.?'E^ur:ojTBlfO@K>Lk@MrhZ6fJo!-0c]/bPTN*I&%O0ApChHrsc5d0<CE-2IK[JBY"T.o=@80/'r<hD(d/.[3u'/m[<8'\TI
%YYXs!6Nh2Mm[ad@LJQQT=$Ls&(ZX'?n-Q_f+\0+i];!*M.jf;KB_$="QS=^@L_e5s>f+jmKNundmk5.O;6`4P^`.2n:#<UO8(`*I
%hl[jiL+SjumH%"1F8`rCcBfUO?k9^<?qXjd/M6^V`?/n/ho3Llf3_QBfc0:%OJEuT?k8.fTNGQZ@bocX$n@s.#g1[:C_FA!)=3M7
%cBg3#ch4A)ni:omD"[;!Gj,&IjR5l4rYG$=Ti]=Q(K&^r-!2+r&>q&Cm+g_N;67j'C%7c)r""\XTND_^oqa(fP_W:HYU]n0^fIA:
%q=5j,a_hi;Q`qNK'b>oh+BW!1@%A#%3tZ8+SKHc^S`]7)i+ICgh-7gDOK8]/HB>3]7^>5&'+@;JO=G-f">eYt\9"RYEk=@,kGYfH
%f\l'+q119bG4p@I#I]2a+';(&s).K34267A,X8M``0lTF>W)u["tk'5<kIRp^&p"Mi,bBkpMpFI)&&7l=C&a$E:Nc3<IP``hRNb*
%YHN#:Y9.]e$T0*REnS!TKnT:S\4S=/>T:3?amJIGm'C!66:?.>Hg5MkY$_cPrF"2`N*5&S($lr!E[7`q.h[6A@O&@_2K/>1#/g1U
%?+gL"ZtGYXBbnH:*<Sn;m(aiq]NqpjqdSDik?37\LKQ:gFurr8^B?dS+7.k.l/<0Hi(Xa=o[S38EpMBU_%umZ)%D)=V<,$H_X9'R
%5<Qe(2![H6^)"u)ZUYj#d#<R=X,"Y\m5>c;GNe%6r=]$=T.n=F;u,B\n^.8"#iM>>!%n?(6F#Tt*D5(!1gIhM3*jX=k;GP_@O76b
%o8eib%uU%Q=FXM32<CON`St&/2SmA%@XJ%dr+rR@HcoM%(Q/O?HB>537^>eSpmmMSP,ntme7lXG$%=eS]!mdo+B]5<ocRCEN+@@&
%='/#hV.Wj)h;#lkNFnLbm*Z(#i2`V"K2[]35NEUrC3Z]u2W_n2C]bKgY`LA-XS/2lf_P3paY3#=,<!ca+1@:Rr5:^4]iHWmm%h*o
%(D`9J;clka(RZ@R*^kF?mg!uZnfj?6$Tn"1m[.-u8oQuZZH%tT`U9S3(-U55RUaoA<ZAN#Gsc?OHS#Y"or7QRJ?-_^#C()+Heu(E
%l[;53m8@Ja&]N0Xemh57Bd'eG\T90#Xqfo2$*'iS5*i$JVjk_XRA-)4r_`JlE95_eQ(<s53GT.WLMAdgB'Ec82Kq]FLJkO?KqH'A
%O+Nl[3(\Nt9l@g$j?UcsSN!,cjJf2_0?[nTPmf88X6?/JR!T</cot>,Opn`6DO9bIXL#a0)R4ZE]#8)#79XEh^6=$j\mHD6'glV?
%!h:h&a2PmhSY`tRHNA"2NR_<S+6ka[m01cT2k>C"UGP2#R<&J,PLVcW*6JiYU;Hbk[JK9)WGe+rICibLgZ;>j/slEX\Qs-?_n?Mb
%KT*-lkJ$TF?rOk`NrqUB9MG(r3?NKpYr@snc7cGg3;.nN.OV(6-@<Tdhucd$Xl?TZUaQjea\-pUVR%!DerD%):REW(pmB+Y!Kpu^
%:f+YF"-YR\(IaAM%A6t(ffhqr[u/C(G_Wl`KOd!,6AL2Pm)*bMm"T]>EL<u1KCTn8,Wo@ko@l5m1$K+$,*U5V-tfLTrD^pWPlC'J
%P%/9-(.P+HBLRY1OtI9MBQSn/O?4R4*D&uqkoY-W)_Z5V>t1CfB?GCd%)&D[0oBcTiV!$]Tl4,3>=^<'7@3OP)RKmqK&M9N"hlKO
%,"+o7g-LLj0/>s+!s7JQ4_E.oCFIt+O=%*M1!085`o(r/<1'l!74O`jcc3G<QmX4=k1qYkTKA.*/?.qVbTa4UOMVi4!Qf%Z,s0"W
%m2u1F0sp/m!ikkJ4J5a2fM@S1^0)1l5)99q(`![2<Bf!602JLkNK)DE0Wh'^0[^=Zocb?:,d%8WksPcK@G:]khmDhm7;s0-G`9jI
%DdLcJ5MC$dFWSJFHWE&EMABV#5V%k%*#-W_^,hp`1L+VF_PDAM=r8[1A.Q+F9gH8Qmg$oHN_NK=N67mJp-?I&bDM1YO[nY]kpT@B
%jrX3VENZ_8JgT*/qAu->rL-HKV`YOVkY`A3/O>72Uu0q`hkL`m'X\]oQgLB`^#)W('B]0)aa$2QYr8W4jRCa7U/ViJDafAAHG:b+
%<Sk,R:[R"C`"SRc&pcY54II%tml=,raBB.hmm:)Q$6j9.aA=8dIWeI`E')CUh@.-#f_eeDb4(4=o!7QJnt^YijDs.TI*#m_fC's6
%\A`cajn#uG0&U/(\_jkbZH;Zl#/""plX<$`0Ear8'8>nTU=R3KZJGBcGbJ]F`m=.NE`%Pd!+Eh.8]ZC=HH8AN[@<jV2e$G)'>q/=
%)A=E"Z@5Qre7H]uakM*CD\m2;]3O[Vj]^OofD9[$>Aokg]pj\10@g]^&*]3qC(40W&=.l613,t;%FZF16MQe[X@Wm4TVPE'a[m0j
%J9jShXFlH9OBh5[2<bM+("u?tc\&[MGD-L\7mo+.l%sM7iZJN%Y;HT=B`nS0?-q\O\tn%Efk@tg0Q1+7L>)tlm_s/6+R$r:\u,ri
%@hDaSqb^H]VR52JBFnAFKWU>=N<*N$Gm"0UL6F[iU'g!UZLOQk\STFqpPgBB4<]cUB0K5a/3r*WNX;i,/qgc*K\%S:9#N-kE9ZH\
%SaTJK`HO=N*Y]K>;WqEi'>[1B+?u)3G_K\KWITOU1Z-/iNYk*LmLP,T?$?^tFtkR5/Fn?+b6RF@cC<!iK0ZJIleC()dVK2,_E')0
%@mi5+6'iHc9%kHmf1maK7q=c/loM&S-]CjUf\CjUL]JcUM[o_mJtL8bYjJ1Gf@?lK'^(Y:a'CD:;-oiZ>nSi/6Y#dhG=c,fAok>R
%37GB3mTZ&8&3&'%^*\Ua=iYosHh+_Z+-HG2X[IX18l?l@[rWWJgU\Nb>qS!,-:NZQ_[H#ENYUS^!)AAko!hN]*WOp_%nhBHN_K^m
%0S+Lg6/:+5nt#-f>]fAr%]e0)Hi&!>k#pu]-P&Xn/8G`O:b8g6]ZMR`^4A>b+Bp2X%&1ZT+06D\TXDRL7i<eMS=0f<-U,%,7At6X
%Lkt9Gm<.41&;QaZo;ZiL//P8eZ6"_G3qu,"1fCar8Fo)0m`0]UL`A/iL_qYZIOY[_rPC@ZMR&$2Nu#*%$ksU[W:H49jCk&%73Q4!
%m*R6Z4ZOkO0,R#I#IFgA'N%ko6"^a*BSbDJ=!&9"gp5?>TI"8QFsn#76XU^0G3A((P.><::%ke#5b>qi(Ju8`Lq\r@3k<4@9lF)@
%XW&dBTu>d9fE$#g>?d^8=Ymm(>o<CdZ\Y#j&b3J#AbIZ+;5ZgZc_2',)$"k1WZA_HYk9CMKanZYk2Z*K&8E4.WiqBbC>_6siW1OJ
%1?9]#X;+?&rp9MTR"8MP0.%8CjPZtYKh1`aaBB8g.Es\gWP,M[#8Bs:pXcs*eoA3?L!]<*D#\@-D7tes!T$mZ/F&!QhrKAL*JH.o
%pic0.qlYQ'K6@V7-?D#'!,+C98B>r\hCb)!<8?-sbMfJ:qr^U=+>XP?n4@fDbN2l;&=amUT"IroSEj,m5\Wbk-Ga)ZJu:UIFkcrD
%iHRWI/)C37N''BTKhku_F%Ed@EU*?!^Ajh?f1kh7Gd1sTSq7E<=$!(ATF&=bTZHfY?Dc['Z[;qZYCD.\]aEB1ORH<7'NDR7p3f0#
%@:F/:a+&+;]:;sD0FnQg_nuCA/aOPd%gIM+;-p3Wj=)Uig)/(,fZ*6Di29L8gh0p(UY#3lg-)CjKA(`.CA78(5S]a!"3m$f)_V@F
%aYR`ZDWBP'm.9J4g]i,=@pIiBhEC)YKAM#2HM?0j]2\9-gJbZhDi!!<jD'8s?(8$)JtGa(RWJ.u__:RHm2jdF61+ZQeF(6&>u!%)
%V6VIp6FC:l#Pi7h.t*nj?\4nFoK7MmhMq#L&A8=rHP!l_TBL^UL/Hr'MY1Ab&?=9/3g^p7\C.k^qBbq$6ndU;%o:7Od<cG<#LWEi
%'"rpIo,Rrupn%8ODGFkQ7mJd+2HS&0J\ua2]"WV"0!BcMD&<!f^)tJplUYF-R[Eh>80FF9KP(5E7'OFN"A1h5i.D;a;'J!A$[lKA
%mlQ[i_3JQ5_V"SY-+LVeF-<U?e8=M;Z5t:W6*e3/anfr@2#[IQMbol.]FOu1IAFF&Q1SpDZq08Eigb_fS%%FSF5Ae<3dfB)d-W!r
%7R'jNIJ6(@KWg(B4oMU5Qa%79BI@-43Fnq*?%PR=Td0#+m/"!QQ\2rQ?k]Q#8k1g"<hiiN\["+$7k`htKsnF8]DBlKleS(CAEW?9
%W8=I*rU;>?+fGpX`sqifp%iN,7]1Eb+C[_?aQ2h\bct[J@o&(M')Xs0Q(T1o(Om0f?=-NA5c1>e[s3(;_0Q[@O204:K7-+U"s8BB
%rGb19jt!d,SR3J^>fX7O(#]Dj`;sGZAI>lCL>2%f`IZsdfs1A*m/(J\35BGSA_N>0r6t',YQ+M"^<7I=1i>K=l;=Vk3P`s*?9Z)5
%9p]aqo?m"4!qVi[nur)bTDmHWr8>%chVR1RchVqfdmITs#r^No#I3FI%fY(0q]Gk$hpsFZ#XPm'mO1AQ(9+?Z'fr)mAA]=K>d^Kb
%AXBAH]D9,&DF'j-OU[ZI1\UJr1skgIe;!/lot:h+:8n*='&qAT?U&30?JPBgi,1Ynl86AMpgd4/a_CMP:'N]25!e8%q-_FfL)jor
%+JS'2(a4"1+tX%^MR^AdM'nr!>jE2C:CTA"[5=$96%*_TIB;OECMKBEq8)/<DV^aWXlIfp:*][n:BiS]E#S_3K9:<QrZW]l=cO=c
%M[2+B7G`21Mq>qGM#9;5Ots7CB\);k1luYJ*:aMTRnk4+#Hd9tV%'[?I\Z8@JM@LEfimr"XiW/>q48bef[8*Kn^olDD<WmoTD2qn
%YJPS["-1BTh<`I81o?@d-r4A#U`":Y9,9i;Z_A?6&;04q>,7mL5e;NZ_Do.&=9UcWCJub#0C"Gtbd]D#Vkp@$9jh;BBS[")ULW>h
%Xn/<edhmT"_\&'W_]NmK#WdHbOi)0Wh8^slo'K'<nt,8ZGo`kQ;E]QblWQKXUuJeDASb&Z&6#LT8QA^Y"-XhjE-5<<GL#NB]OhWb
%O\Zm>WiVhtZ4jn<^ab=J!;5T!mFrBYX/Y\ApYsQO0Hl;`);/D"]6XY,YMZK<$/B7>OE:XEOBlhl!9Ztem_DPJ[`&ebJrAGbboQ8)
%lg%VL\ED-,Sk<t1GmuAQPhFAuE)e]cAkA8C6@"K$4BQe)"<ka.9>A/khQj1I-Ro!i5/.=T]t-$$*K<MLb/`ZF/mZ&3&\9`Y?Q7E`
%5HhoRfCCakYBR+JqHeUCh^P-:_tD&`URY\;%gU#."F$%i?G?V-h_PYss8PA:mtYQ,__^UeiVRmPHln2)&gHFC3sZ*7="PNhi<36!
%2IF3%5FpLs\Gb%Jq]@r!h1OEEW85cnm69m:+LfeaI,5N":p&F]%U0TOl.^Ua')ZjGQUK2M#^?lCpE4a2?BY';"h`,#V?`/.&?G(,
%*`s*2H/=V60>UG^FW%dIE)2hN#ISnT]*Gb@>1DuX!a_3\h<H.V>'K7F[auK0E(Ag*l^-P-'><C39$$*[oH$Eh61k/`7.8$*%+GMS
%LYP0dV2mS/1iIn+$_4nYKmc/(lS??N\C<\jhLjhd=Xi5+j2jHJYIB.>8k-@\E6JhL_8X"!]RPoiG"?lknseDtdmZH0arc<+5mY4@
%+l!@I)H8mLeER[RJZJOnpAQrGfjX":-X2YAnd!ioOKG]T[QZ4Er,aZA)qaYL+*$BdZoNWKm!di5DiH9&K!2UklEIehX)%8(_og:g
%^E2HQLG$m&c,kLC#h'PkNe5E5e_Jb!o(0>.lKihcPF^Uk&m:5M:7dZT7$aHP^\p?YjTWVZ1^W@]>.t(V&7/1/<Sa`.BH2#klF4FE
%QG\!ULG]2Ti>,:U^XgmE)6r$+BG'3-;^5t'qr/5m^3+6U[WUGq3figo%f&(GTg#3oQNlk,9;84d::p#d'ssWQmnbcWNE-c:Zka-K
%Xf0OeP)[Y;!IN;a)V^o&n\#/F(r!FjdGsP*[j^jMGOr(^=Ou,EUd+MaJ]8Apn-CiM^%3l[9Q]*s\IBOpiPfRPck\l1C%<0T0#YDS
%[kEdOR_L^;OX9@@#;S>fCMFism>K/Mgc@>8>=YJ`S]:G'T8cZi*ZgI+^\?\P*G@#X\jVu?TZ)[F(8(7m%/K$IZp^?M5'=Q?O.fGs
%b,9/PD9*Lg]`T,p^,0CejNA@K=S&A!j0<_pg=0hq5P<u+<Ti<QC]=4S<^TnjK?a-=6c:/21jH!:ETETG[)SS^e@9]cmN.U`Sn$Y8
%[mD;>HpoV`Hu70'ak-!!;<M^"kC_MCAojm?rmW<l1nBLoi;$.aG^b[ZI(N5!]W2uS?Jbh1cY_P,(O1t7iNDP-c@oB_f$cgOHi^^d
%o@)IJZdrH/@Aq]hG.oDHQ3d(+Zm;UF[t3_oDnfZ3H1!>n*<#=Q\AibHi*r6/_H;g..N>l7B.rY^f,!8E@,:G*GZSC"AU1hpd>WN\
%KBqj$=]4?*#d8'HEnp-d?),%KF9r5>[U+8Qr`sW*Lqbb\SW$2&_BETRm<Wp:9QXi9J'[7@HMS,_CZ.*SY<R++\aTrE`SC'C[)[5/
%ARlsei9L_rj;%(;^"_k>i:?_WV3i$,qjo\'7!A+Ns-O23_isCp$%,hV^N+Qs(3(Ph@_YaOKP\#lm)dc^/qe(gr=]$EC+!gPeTT9u
%D\$UWTQUi\pU-sUa"(J>\Q4Es-[J+eR_rEMV-4hJd^T&K-2?.]:MpUO?3Uq7pE4bmUA&:HHG<b(.huqYnNcL<96.+/Yu81?/qe(g
%r=]$MC<(.7og.sdeF#Wirj:2C_]iD=0A/;!-[MFhr?.h/CnYb$bEq."P<<ApcfLbgk7<aM+F+K\pU*QKLWpZqZ%[U%nj'Td4]ia`
%E1q4)l^-OB'>7@O>3bhj6%9HZ#LRl0]rsirmN7&;W_f\/?<1LIKf`d,aESZfl:Z2X+\:ARQf.H2kM14OMlZ;9+oVZa(_H8dde=1r
%O$Ltq'mrioc_H(2I2TaW4.<Q:i,%<qNGYk+K$3IE-d@OsU/9Yf9-*Yt=V$toTNQc9i:HQ:oZ]Ws1Bg+b,Ghd.&ZW?HFR.dNn'Z&+
%LR4$Z[9\Vp+/TRe4MH"c^45eN\a,T7]WGR40<)?g:<Y"pYN'V&UcU[fADd3*jL;0#h)M"tN9jgkAR+)Q;X%?l0Apl=q>Kp>\)/S(
%>V<B=V-ncr#aq%8o<narX@)_1AslQiMNjVdl=/0JE^R2DVu3g$O-Q&4(iM-ug(=.U(?4+7=#8SQ:!!eKkLV@*U6R].a2VWTLpX/1
%(k:h<Nsk^2:Q"rRXm,c^7:JHLJ*F4+4g%a,^?n2cOqG$eRVMFjg+=\*s)m5tJnXpdbcG&-5\+>C@5P=hahB%hXB:-jEbcpDNJ#T=
%m99\?(e*c=Hu'gZ2K]ql:OOQfd<YKhih4*,0RnS71D)]\\fUY##"IQ>.6S!#$?PPAdT^Vt'cr0on!I?c+.H5Y2RO_%7HH?FR#q;c
%C!'3'o#9u=/fbmlXWu8k:1O4$%u3e=%tDOVBKCWmOi(%dC`p;IMEjPHaP-`s0sVj@0*J;2o8Vjnbt2Rk>"?+L()`a*6.8B(FLJP#
%r1Lb`_#,BShpN'V)l9ihcOeA#A%aX6kr@EXO7&o0(*VuhquOjt_JJpY4r0WPik(!gNkqJPYfFOQ$41T`,,ZZ(<V)\Z1]WeuK[-bD
%1/'Q[k)G[M#X=+]2\7F;3h*UU";-)][grs675sP`!10im9BQode41`p:;\/n_oOleJ!#q7B<B37HLgGqj78em@sPc2?e9`,\(C'`
%<F2D9$jJsAR^efX^:]-7M"^r,<j;?8mq,Gj_s?$c;I4BVZrE,o$oQo61o\W)l@;fZWL;'ai:5p`mh\n4,tD>?hpf"o_6F?N4)hI6
%VO&9_4sq;ZfNU!\Ze%+jWrUrH`jehJegkga!F-'eZ_*TBqYFol<+RJ%=HQ"[5e1LYEs(P'&>2dFh1:JI8,D\8L7a#KICcf_>[*#e
%4F7i_l-SB_*Xk`/i+bFth7UVUQVTF0qR_HD4#ngf2OoJSdd-Cuas*Y80l`%_,"3TQU/"WEf`\VuU+Pt&&_S]^bn72!fZVBtEK0(0
%f9iHYQ.QY>JUjXu^HriCT?^9A3$jnsH5Bhl.h$B/']"CG51U0JdNdDRYFmc/Jqt83"mR_(BE(I>[=:;Olo@;q$=7>0\1U/<*AAKH
%?.a24?BJDuC@%b#/g^LY#.U_(r"H>jC24u);Hdler(q-d6NIW]E"L2Lk6)EP"Q=[;#86dhS3=4]AW]<D=b2&X!$>S=&LrHepGe9d
%$#p1kZ,CQF9@ou_;;9Fb#iL?kM]A^486F)/&+]UJ+qY0CIRePr"e0U%R.u$lXoSb@!HPSg:1Q:;bKOt#Pj'b;+[0^cg=mWq&q4/X
%.HQ1\4d)-H&GhJ('PBQs=aZr-X(DR7S.VYNm*J\CY<2X0a%I&eAXL)>hshoF,+L^NOHU$i47\",UIZSh)*bph1^f+U&QehYs)uXH
%1;B(8aL5og(RY[Y^"GQ+M[2+OD2jFoP:MiQ/723CV=o;(TC\FddU\)*8u1C%M')8_<5_46k&aY"EKYJBcjA_pa]]%fo#pm^7!V..
%,%;T8063H$G*FZ.M]Z=r<n+RjJ%KN>Lnc%9'`6,m5kpMqZ!(&1<(88Da#OXHhIU3'6QcYh<[<T;MTRF$HGJ&TB]isoS>'NsC=YI"
%oBgRdD\pTE]3=@OjYG^GGNnL8Zo4bf0D`W90&3-,J`*hp@m84qO:bXiX(./C2AK5D#RE0K-HO8=#]bQFKc-k.Tjg?/_rh"UCDLL^
%-lOB%!nd<-SLpaQ/\$gR51lSrE:Y1T_$Kaod"9Jk9_tmt%F#P<O;-b#TGL.]/R=M#CEb<<69CfkGU;8?qJJ_,LNJ91LP\Yb38phB
%h7FNl[rIL=dYSAYHX<#<S>5BD1HM]JbD^Id+K*Y'iBa\f@LeU'M6EG?rZ[M,A]HUuGB5=LpSWN!_'"B'M:@)7#2/=P9^+J+EhGFY
%(g\VYER4c$1-Zpi6=[8.>uDA5+`g%hH&U*?Cf%boV#D\#Z^`\EjC5;S\4=qbe2AAt\]/ANJdB&_rB@*)]NR%nnr8>#(HOBUcgZ$2
%.Gr.BjhIDelAgPNCu(=BJ\A?nBdDcBHP4m2JpeT)kIG+56:(UEmm[JU/hiAD?E=7NfquhNh#m_Y5).;?h""md.+CJhr,hAZfKH>B
%gF@Lj,D/il09p-uiV()hhSMYC`km4QqsL^'IT(o:.huY&co9uOR;CHt%jNa^UC[YH1s1>kA&JOf3]S\rPn*93]*8Je_meD$$g,Nt
%6Vk]-cCOn6IDSa"Pm/A0eSAhZFSJIIUSA?+;uL2h7#1ppo[HSbh?Od^UQni\\nLg2C\FOKKtNlE(%s'.7[&nS[<kZ&meS/3'HIY<
%Y$/M<ADE;]6A0/j/V:GH9gUb5&!k^agtiYX$FqeIR^C=MK5=@9HP%Crp7grF^HDa&k*.LHm:VK5UlhR'!HCW4G#]5U2G+.1Dl=Yp
%]9.^rMO2>(M<Z"5q6/MN>p2WZECcEJR%/N,"[#gb5L1[1AlK&p?ER5DU)'t-OJlEF/JXdl.Nt7s%ohaV)ZZchM@/$uff?L6W'>[r
%3%HKK`?\a8R5cHLa&U(OQeT!C[B"fp&Pn'rXu_Eb^a>NX3crT>g_gNcO+?!T;'ro)^&48k+pmj[*J/?OOE2g["3`@VEucdZF`d`k
%8Lljf);1*3lPNt&qt5MfVJFahA-)"@ZK8?+o6o]_VF[ulQ40>hK@)9&_ATs:Mh'GDp8CJTI8qsDnZt@sW,L`S985Z7NP_e$ojEm\
%)XX;RfZ56Z1Dc>U;\0E^pG8JPo8PBDc?%W6!EZ+p[sL6,.cgk#9<Y[7NYOYX,Z?]rMMbLL)u<CsFrh?7#?2uC:>RUY,d_A1E^W6d
%#IJSch$$r8RRVRH]1-FWF6Cfh6$!Sa)V+3_KbDa$IP!l;?Z*^8kS7E[r=Ws3L5KNgC"uign065X&"m2SJfP+'d`/nX/3nW],3_,r
%%2\AOS?W02ZRb$;_DE66JdHUDM^AnomS9g3M+07Ze%UrU%u:5CmkOW?DQ!GhPEq5U2cAKomW/Yq-nqke&dPY#pZ8ticR7!-8?IYF
%*mH,ScgQ\l)1BH]UMEJ^7@I)54Zl(d2ZRnq9boQsW@O)I]$XbETNI"920"t&V<G8!N>?2H4OJV?QkCtCT`#I/m6ksi.peiB"$Lf$
%ocs\<-Ydr+1\=gFeO5j@fW!h_W1soW%i766J6Je%$k/cLb=`,l+@9'<4_.Wg_8,DJIfZN#>&g8:'+pp'rBAH/ZI-[m"al;C"YV*b
%kpe2[OmT4]lk+o6E4#/<4D/?s8c+jck#k.(@+c*EeBLLV$GE+G)c_FlIZUm"(s0Y*+LkGW/VIOIO6!ginZGqj(\?LkJ&4<!D0dch
%*c/nm8dQmjZ3%3jR]a8sdVV/q\#-5t#f8=teZP<o.hkHu]NTX>3"Y!u;Ciq.Io8fa83`RNF]$e,4brQFCc]bLQIrfHPltL;fEHdl
%["Rc$8iHcm?2KuMYfcfm;!)/AZrIAh]i.c$8@h!:<n.D4BMr=&F0`,'OYUbWJ?5KSE0_'tRka4;LsQNoV`"a_:kZCh8%/(g'r&R9
%mg;)oFE2Qs\Wg)Ebpu!j?O]SD^<!@HC9O=r!>K:U[(S/1#D[@>llh^2d9"LB^]lqi/psl=m9IGpBnVihT27,eO*>ln!K,eKpftU/
%T9.hKoi5)+5lh+=YKAojoh80mR1E-]\i<"_!f*E0ZSW1m0@-QlY&"e>7=OQM:ql61.PYUX6442o@jfDkH!MF$7s&R<K[C\`(ZJ1\
%.)g_ViZpOChQ/gL!X^(G%#5&A#Gs*tYt.fh6''2j,8)t)7;MVn@&]UW+4lf`$"]a@6Fj(6#>gg9HT-M:!-5MY+9`>gZrG_I$a;GY
%h&tn+>Q4cS(k=@Z+!;YO,SWm*aH[U^]:h[ZNPkH96uado:^HJE/09ihTH]ToMnV8LA69@QK6pQ5!PO%rd-N8OBo5SgcRU7Mau*):
%ah-k(TbHi2?<TT:]PVSZfL,#K0Das!Xl%\P<H</.*d3Au<nLhf&TW$>QKmi?X@]O32Q_LMD0\m*,:#&5>U?F@+fM:YD9Ic[ANNoD
%Q:2$XF./T9?DW+E0"VBcMISNSf)UMnp3RFF.k,:]f/KXn[)9>g!=aK9%g'Q5iW-U397UL&dM@#-!!S_0kt?H;lJ+A0"dI@md,39k
%@@"5+83#4ElF"N]b-f#\nkf*hPY:6d,+am&[ZoKZ9cThsh)*6:bYs/n2:kF4&u";4M,Ru'K>8N(TS:`e_Vj6uRM8[>',dS58ZN+H
%fL:(I@#pufBshXUTnZ$;TTkof'Ku*YXpCUgXF'>@+*9+Dp<XEqfrJtoOYktg;>1Fm9u^q`']IO!8gtCQN]J%h?hQ)l.7]A\`2?#s
%b``\Q8L9_>0LHlL789"7c3hfF>R9W!a9jHGDE(tS<^*Xc%->sXcN1FCe&pVFKH,if+s$`L]0]ib#XGrOYXf^`;H3a.'2+/8Xt]YT
%:lKO\EE#@<b$Ghbl>-!LcihF4(H9HnLhh,dJ\d@<D>tr_!G]<G7A(liSOm`encN'rEYfB$$$iS78NDrgdVR!d2[T=kZ76#V5e6.o
%S+oT(H%UjA$T'`(`?>d+8n:phCaS5Qfba/sBN0K#+bp`Z%M!3DOBru`=?kYb][\nQMo5jQDMn]sI71C4o@8CI^nd/8-2#=I):eeU
%pC=l7l3h-M^8aeJTY+[2$p'h]U$]I='`B7S8BJmp/hSlr0^t]#Qa]^Yfjn-K[UZ=B=\q9C\h)K)Z0e3,1+%l!(UFb"ihDQf$3qPk
%6n>'jOFf[lAG"1F:2%QG<*L43.cS&ZHQLNeC<&865#=iPM#F<$5lpZ6rULQA$Ehsimg[7PU=UCN[`[1+/q[B$F_MW@VMh16k4tR3
%HCfOjS,`-<eCO]po)b@-_?B49_cW9e(bD$^>b#-FAskqi:]\[@?/t<ppfEej(s`@u.Eb;DWaV_%.psU`$>$u(:p#<%(DnEF4LAcB
%dd+6[1FNq5$u0=%-&U60iI0sH*-k[4OAG[B6!99VFp:PX<=O4g;*WQUm,diUpHkT,[O82W[>oXPKV!?eGA`dA[>5^=.O%C#Ib[na
%@"2^Tkd6V2(3*%)cGBTij1sCj>;P^(me!.0lo&N7?I+$X`<f2f;;mQ$C/M[MZl$+56Fo,S`W;#&$J2$o6[!]P:Gs&`a;'+(hpGSZ
%&JX5_J1s*2eUbW^LlW?)Ej6tATupm'>ua9_:d#h-Yeb2!_\V_$Gd:B8AeM1g=ht<F&(QX,44PX"BV"X=j=W3qPCR)&77c4mn@!05
%8qCCK%e_BMB^$(K3iH4ql1u"A-deW6R#MO'D;@ulBV8.05JbE15rIN1'^-jGe@S.2JiXt+oQ4l;)aV;l@6B1peS^R"'J>#<p^Wa%
%.u?gUE!0b3Jj6tug2XP775UnH$9#sVpD1p]ii-"W,6H@:YR$CFX(t$J&t._g81f/>_1i!$##4?"oLA7(`@t`S[&jR;Ca[.LL1.E=
%Yn6W4?hdg_eUh1.P8"4`3!\(`.#UNpENdR2q.C.h<l<J!SY.J>]6As>,i,'cM>tlAJf:RWBCoJ*fme1U5qS:e5p9NRleBL1iSm8^
%cfY`$MM7Y=3g%97iB"D@2N%%P^,4EZVH,DhZH\/@h<_]#^8d&^-cmUHJ:Ji"anac.2ShNQ!oXjsY1OVC'phBG-u2_[p0cJAY9:7V
%PQgC-E+k-Bn%SrYmJ@P@mWF;VLTIu@Fbo5ZWV]^+UMnpgW"'OL%@IRc"k7$$W;IuETM#lR,^K)gN]_2dJWAM*+D>7a&O8V<:C*E0
%)5]OU!Y$h.Z"m`pACekr^E/D2Bf96'.c4TT\pBADQ97`Q[CI(D=n-*]S:WKCs30.lOlp5h,S=<chM'B?/g'lWI*1'HF@9hIk7rF2
%04qYr@m\OHiNX:gs+N+PVLb+uUg0fCRU4$>$6iA`=lqdm\i_XhndAgs]M,GC'nn_.h3"@3b'k^VJ^OOe595F$PB;lr9uW@rEhSUm
%1mV)hlXlH\7'[6e;n.WKfl;V<5m:=!@(6f^C94L(h[8d=IQ0qE'G45@%+U<=nE/Fj&Jl+NPiYWmigFFtq#Hq\]\iHnO/:ZH>XpZC
%>6Z`"1\ADRUWG`e\I;;Aks=/QrHu?OggsaT5T_.L-EkCr@F2p]A3V70jn/lkJ`m7&[S0#?gqCV2\d#i'i$=DI,/DX+*UnS:_\siN
%bgXf8eVOU#2@CXl,aA4g\Z%'D.PSfZrO]#[*SfTm]S#X`EZ4u2KVZTIVBP4'r^sg_ACX+LKQ"W)]$'N3"'ofA\Cd$NG#qeuMK1aa
%@@Km_lP2>:C-V,:GsSkXCg#-X@VW$Id.Z,r*W932S"hs&p2kpuT=cWo%Mr57f@qdF')VY0]2$=gJPEYV4>!ZMGe:k9DsNQ06[>iB
%GmA*Y^p5i++R;EHW:b%BD3!R3f%kJrYlHAHQK/h.onWIcCD^+<8:#n1.-(pts7?]VV2i&]g12>i-?\UnKt+*cVa(fZ]g98;MPah+
%-'fPS'sF5[D.ou3D7Irt-7dO#b;q]`feg4@;n$Gd5g'mU"L;VTAGP#<>/.#`-'=h5QcT9G$Hk,YqDS0>+>0AR3F\EJYBu58HaJ`/
%6U$9E?IEa>\ogW2>3/Fm3[M=C"DfKS6KjLJ$QqA2`\^d'PFUUU9dc,0-.J?#XnEO?0rQ>GC2YhKDf7@L25;GMM/Y%P+Pc-jSbMgn
%QnPPHkQ6'QB%fFGH'Rh[h3(&/h3+J/>>fOj!#M-Rpr!MR<t5urlh/)'A]%_'<]11!1\cn(`54_a0U,8,M6=">,p]R`/(F3D[Er2#
%<Z]1-?stu8K=6De`tdh%SN:*"]s?e5U*Ao4Ru^<hDD+"h0rF'3D`[&1drm,AD6E/ob9+qDQ=/*DhM"PDm&iSm[,bt*!`R,\:8r,-
%ITlT\]M#Y>TOLVZ;S=m@@1.MJi5Kqjq<jA)ql]@^G8#Rqk`_HWmLfS9RpJj0ZOm3b6&:3kW883HMZVe)Af#0KM)8C"d@7iReUAX;
%c]e45WTF?$'#=]gB&6GuPd'(&;o!<%_H9SSM5rtdP&ht^dOX0!bmUXA>nN4u1h.COY&!a$M!RYK<^=5N#h1iSDLngo+FCX_"\2&E
%T]rs)(OH_KNnupUQUs:F6A2,]kW]0JWJO"&'8,s[YUK&](oV1p@!"a+VFk1uN\ousA_Y<#l-+ue9!V6T#Jp(D1[H9m7G.)[DoC%n
%orq*#e'$5sSD=jCjG9K@aVk[Fa@Z_C&2CB;#oa]2kgVdES',%QKacrp49aN:)__*HC^=N<!1gn\WX_C$2Q],#,&VW7Y.f5'jeC-N
%\b?;t'"!Gqh1]\WAesE\V82-m@qIT.VJ8,!Nf@cjoG&p[R$4E#b'GnpE/$W]<\-kN'eUeESRILt"FH%HXtM!3Zr2`!Ys%"V.f1Jg
%nr9"h3+p>SXd"l6eZ;ofJgN<S0gj8W="Eij6ij"_q:&'<R$\:L@TV]KCB5-ocP^0Xd.A,&<[!>DlQGVp*k$:XMR/(7Y7/%YDZe-L
%jS-MS#)YNJ7%Y,TE(%p97RUq1,rNL>bbU/K'R=*dbjPQ/(1_clm1ZQ)@,K>uOu?bK(<r*Lh-j5L.!*<tq\TPk_9`QMGt_6SAoNns
%)78&sV:W!"U`_U1q"$j]R6?PPN;4)S##Q!>A>C@hn&[P(UH!o'=\"uW<C=_]!\iQ4"2l!:gji%u<.U^IXKa0m=%#^j%"`S0L#XqE
%3T=Js3K]n&3]58D0I%'tK].GKp\@:dPulL!C^pLFM9c>H5O&A<lNCf6iYN#g#b_Sff[/tMq?b4m-*i@PX%$"(!,5F"$W6n`\i2Y"
%%KSu8B,>n%4:EQm`a+F7\IhKO80RV">/T$f^<P+c]"s)#UR6(C3_VRaE-gHs_Pe>4#mjfg+h47$joi:[1*XlAf)tp]`e$J?`s>UH
%AcrHKqF103\nj't@*o>+N!VFNH`n[h.-Lkck/T:LV=Gpcf3ldIgr:dZ6M%#m7u39'#^$ENM*%k^DI/D8LHUIY6&^V[a9\Ia7.R*f
%HX(/gk.cFB_?PW%"+tQDmg[>\BNf.o2R*"]DAc=Sgdro4J<saZ6bS:s(N>4ZAtgu#@DGU.hKO!t7?$Ur`Bql#G*9F1&PdY(Hik$T
%c9ZXaj<GR8jN(c%#h:=[b/p>n!CMV)!%hlg(a2#+YCYhe@7gJ=I/JAg`19KD!lNB<Ou7t]i5<j+!]gqAlN/*,;`B6B"Kgkp,Zo@7
%5gBDP%GUic'\]e8hhfW!FNm5?5r%O<`"5%4a9"eY*BGlhV]p5PlG)R<6dK`BJO>>8KGP8C#j^?;.(Ob*G6V?:]Z642@u7)sTnkIX
%*iM%X_)!@)YN!j\'Q$I+&KKu`/QVRZc."_q&Zsmm%Hl9-N`83='1HSoE6tKg3@1^7!O%CcVVK\qq&0&oGo\B?O!O-fS,qUK_L\sQ
%5pZ_+#r7!PeLB#k@=XgB'TO7DU*h*PA0YomlFmP&1T+r;[o4t+-HgfEk7%n;cIX``d":[a1'mV]a?<[krcf6JG`#1:,:JGX-IN'n
%W6Q)-lj6q)+Dlt.enc$lq$9.VP>4Hncm!^iQ`/K>MM@rf7!R,#9&cOO9k9_nYlKV1-,a^iRq*k1;6^ae$$5a^;9i/6P@E/ShF,\i
%en@tN`0QU)Wb2p*8noP4ZJILQb$h(;>^/f7$ihKT_4[d,cUqmiQi_kf1,BYq<$h2>6F]dN6U_60/kg_+(+?Ea5]O#qaTrJ+;+[""
%@q]lpb:d'0U7S+q^OuGCh0QaN.]DGbk%B:!1a48J'tGfM"h/?C)$W!U"G)c.dubCP>_SF78,1lNCoB2CT+DN:kZ7qUcGNupJU9hN
%TH7^tTOo2L(<GluR>;brO6FSMD_%28!Xu>%;$`"^Ig1/8iu):!=hfUYDKm;FXXNLlL70O\-A%oGR+.?E&e<KJ\ls@?Hci)eqA:@]
%\E(#7,&1h2^F`-*)@Veraqhf&8f80%BP'gQ[s;kAdePZI86*nq;rB/TZoVlB';/_C]gu>SBUTJh6$<Uf'RFX>0Lt?4Gil>\2or.6
%D\>4a%!A5&Li2EJV$t:9@('U0[]Y?/=@J.ih]<tD;H2;@HoF?]<reBb;H's<$\L+t3ei\>Sl)9*A5[2!F)=>-,8(/G;o[&pE>1BO
%KKMB:R*EK&50Mtq=1B29^eW;n'0HD/p*!Zq/Hlo\)D'YI.^-1/OpN6t&I%Q6)A?^O(/UcD"mE'M?3NpP)$oFgn,*3;>$gYD?3?3p
%2$ZXH><>[X\9]4nVAm37RuJphYEYC;\$$J*WT>Ctkpe7%V;:aciShp#kr&u@n"<4M)P@MX?u3iVZMHD1q):)=3^u.iAt0c?Z69c6
%aun=YWSjl<i\15RlpB4CdiGj[(Z=g4HPNh2/o(X?ZR7mWOBO+O4]m8fs,`$`EVPYMM#*SFVfiFHe;c9=)gfVA#p&B]P8.$e"<0*;
%c8sUj7L5\`E+21l]aia,rWhE#,KD0p@6HE2?E]gMi/HcL'SZePp84`'"EG?1Z-+gMce.^*S6rOJi6(eai.`c:"0:/*c*;!RA#pGE
%),YpkcXFB6M%5B-A2F?I9(.RMp5lA\OH(B8&1po)F9kH\.dFIXV]YueY9+rHSDn(I8.Qgc,@Y"e$ja<+.Ruk)^cH`ZG&ST)JImqj
%;^2ZV""GfO.'uk55\(2>723HkbVePAINbU2=*-ND)G;5\K17_u/QtPr-gF0@@-IV%T:d#JEQ4Q]W9^b1EK*9gXuOe6,)W`_qEs<W
%#`J1g<#5[,$?3PLbt\*q,iA;@;?u<(`[T$,"sC3HeZ2Ar('Q/ME=NpuC62d-f-!&*ioNcb,c;_r:[3gWm0=<m>QFPOl<Sqs!pL#?
%Y-]/-J3dn1*&b/,6i.<9r#8RD(!IQ`Lm@SZeDUWN@\#k^NLOQE?bSn:3YI-uqh.'7c\"uZ&_qF2!$gSd-ep4ti)F-^QcJ#lRW6u?
%7%dJ6^G=dUeD\ili2j4IU)E0jJQ)W']+uP(G,$X^'P`Q'-Y.lW4H1B725g_bJ(B&&eBtt.,`B@l,*P\cY9*&kJ5l.:%;0[ZMERJ=
%9T1DK2F(U'GnZ>s=Ni'/4-/OY`1s(t2:G\N_*8D'(U-J#n_hdGU5+LI[Q%*npB@/YNZG&7X,?[9%g=$B+1P>DU.#-2@";*Q_$L/t
%[!TZ@ociC8J"W7'@30Bu8JVM\CCnIoLA2o?No6jl%GPlnD1NK8fdBA5.i#:cQ7[Q1%OB%$5VSrU$G)fGW.B%$C@(E<;d@!`I@/e8
%OOe2D.u9B_LOW2p&Oh%W!eGgkS&Pof7+X"E+KRG1[HM`6iM\Jsc4AeYE)UhK5di,8n3p2HJq4;0NBbTT)qLsFCI'\8&,eTc1D6m:
%P@]j$NJoVX+5m)/>bG:k3<U-lE1r9or42SGo^ndZ8H'jNPCAr(&>e,Jpo8B>Fg/q0lWVOB#8G@^ZiJP>]qJ7_`]8GJ<YYk]-(Ao[
%:k@uX2rUL*2a$!Imh7I;f:F[b'GDnL4"tao:dTOn6mtb2"XnTF@R8S&e;+3DE9MpBQ9(jTYWmBs#APu^+qZqkE[8.\1GhIU/LS_N
%XoT:(6:d'\dkaCb(=^%J;Lo:a_<),:04",LF[dAX*tIQO(FTKeP:r_8e(DYP^)7b<US!CE+p&@e'`155eKQ,H_FL(C<X,7E%p%<8
%eE:GXG9-2Ug"$6L=U4QL:!aKQ+l1$>4XYm?#L$ra'=d9BW-FL95*k%nG>L%b&&dj41X+[19+nBV.;"cbHRa(%_<o)C'D5l"G3b:4
%VpYob6/C]B7#%?^0]3)ZN7^8>*f=c?bb=@_0gZ?d83X6^C*M&cGS"2a)5N/e=Jg9Dhh4jiId6F,E4D/g^lLZ2EpCHZP9'p(+\LhO
%XI!F!AO3,b.R:R8>^Cg7WlrPh+j(6,V@/--C[NP+N=iMM<:l!VT-]Xt-?8%JYBi!ZpJn5-],99KpiY6.EfiHE'+[uu9Y)VgD&UKW
%i%-T9Rq<qBB$=/Kcq=<;[rqs+DSn^>]eA_:jH=#1'1oHWCgd^*L%`l?$.R38ltf8I/cGSCc&<Xa<XT9q/N])3ac],^dEHYdp0qs?
%=<]B27df8-CrGRtL(lsccZb;C:ghK!(GG/5"I#te/u0>r_-5mKdLcD8$50.?iO[kIZLO:H:@8H.9=T4.8NTsTaL,heRY/S.h&)>B
%lH<MI'#rfJeA!J^&]pDX%I=6MN00"_O2=/s13@-8_H8XW@LG_e.a!(KhW^0=#((8m).JBbF2]XUHp\C!)[/BDr8nF/16rr_8F?JB
%$/8+KQ(D?Bdf;bcc&)l*e=2\>"hA%Z-..&Kge3>\:90[<)3rm^qAlG$8edOL@[d'f'i7//R)3<7PaqMbF4asKd?@/<UStq`I/R/O
%M(fKS!;Rn(e<<0Dk6r?7=EV:o%5YBNZGZS>6!.L;@$N<>XUHet4DNGrNA_BA8!MHi7]8WKoO1&B8R!r!a\lk,$"UK9UpZHsS<>c[
%"iVn'&$QEP88mgY%SH(fp8!,A]!m).(s02D2UOP7HUsu9)o_:WZ^)9+?<PJ=%ap?]oTl]nNLdP+g.be8T#MTA8-@"\!s6NY8l\VY
%.MA!P,pp)T,RSLf/GV>1Yl;WVnH&r\=m@gaj;O*.l^D2F(P`W_\p-bn[\T^FSYlq]m";kd)hZ4;LB[*:m5.dsF"5)b+FuZe#["d%
%ZDDV[5)<@#oMZSqBa.%4euQ9a43S?-4]'Nb\o_Cd`[VScmH$R!%Im'&`;WGSYr+4aSL.PGkU0F"%<b%DNJ,<-[u0J6.`dKep*K)u
%1sPSOegroo4u=dLdM?4/7/'k.C;FAKp6!g_gMU6N+A=<KoK)#kCTA>e<]&l4[gc6)m:rUW?`[MRRSmg)q;F6UQCQ\qK+V9In4ql\
%56f%Vppo:>P@2aIV6(pRd]#NI_k+bE?]hNp[E9.0rNU@QZokl-78n!+;>S(/G+1*;mK+OM==`(,,t8&24HhDdgFpEs*oDqalKsAr
%jl,k)naNG<D`4@urTS:f5+`ACqsJi]GJ"o%]%,b]6FCr#`h-;PF*IHUI-t%%Vrur.\7iH]]mfbOrr2==^PKm3~>
%AI9_PrivateDataEnd
